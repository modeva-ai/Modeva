Search.setIndex({"alltitles": {"00:00.000 total execution time for 0 files from _sourceauto_galleriesval:": [[90, "total-execution-time-for-0-files-from-sourceauto-galleriesval"]], "00:04.445 total execution time for 3 files from _sourceauto_galleriesdev2_calibration:": [[41, "total-execution-time-for-3-files-from-sourceauto-galleriesdev2-calibration"]], "00:06.663 total execution time for 1 file from _sourceauto_galleriesval6_fairness:": [[84, "total-execution-time-for-1-file-from-sourceauto-galleriesval6-fairness"]], "00:06.739 total execution time for 2 files from _sourceauto_galleriesval4_resilience:": [[77, "total-execution-time-for-2-files-from-sourceauto-galleriesval4-resilience"]], "00:10.538 total execution time for 3 files from _sourceauto_galleriesutil:": [[55, "total-execution-time-for-3-files-from-sourceauto-galleriesutil"]], "00:10.564 total execution time for 7 files from _sourceauto_galleriesdev1_extmodels:": [[36, "total-execution-time-for-7-files-from-sourceauto-galleriesdev1-extmodels"]], "00:10.862 total execution time for 2 files from _sourceauto_galleriesval7_explainability:": [[88, "total-execution-time-for-2-files-from-sourceauto-galleriesval7-explainability"]], "00:15.189 total execution time for 2 files from _sourceauto_galleriesval3_reliability:": [[73, "total-execution-time-for-2-files-from-sourceauto-galleriesval3-reliability"]], "00:15.768 total execution time for 2 files from _sourceauto_galleriesval5_robustness:": [[81, "total-execution-time-for-2-files-from-sourceauto-galleriesval5-robustness"]], "00:17.725 total execution time for 4 files from _sourceauto_galleriesval1_performance:": [[65, "total-execution-time-for-4-files-from-sourceauto-galleriesval1-performance"]], "00:23.018 total execution time for 2 files from _sourceauto_galleriesval2_overfitting:": [[69, "total-execution-time-for-2-files-from-sourceauto-galleriesval2-overfitting"]], "00:54.595 total execution time for 9 files from _sourceauto_galleriesdata:": [[11, "total-execution-time-for-9-files-from-sourceauto-galleriesdata"]], "01:02.642 total execution time for 1 file from _sourceauto_galleriesdev:": [[50, "total-execution-time-for-1-file-from-sourceauto-galleriesdev"]], "01:08.949 total execution time for 2 files from _sourceauto_galleriesval0_residual:": [[59, "total-execution-time-for-2-files-from-sourceauto-galleriesval0-residual"]], "02:59.730 total execution time for 4 files from _sourceauto_galleriesdev3_hpo:": [[47, "total-execution-time-for-4-files-from-sourceauto-galleriesdev3-hpo"]], "06:07.666 total execution time for 14 files from _sourceauto_galleriesdev0_models:": [[27, "total-execution-time-for-14-files-from-sourceauto-galleriesdev0-models"]], "1. Aggregation Stage": [[355, "aggregation-stage"]], "1. Data Sparsity:": [[365, "data-sparsity"]], "1. Gradient Sensitivity:": [[365, "gradient-sensitivity"]], "1. Prepare external data and model": [[375, "prepare-external-data-and-model"]], "1. Uniform Binning": [[370, "uniform-binning"]], "1. Univariate Partitioning:": [[365, "univariate-partitioning"]], "1D ALE": [[86, "d-ale"]], "1D Partial dependency plots": [[86, "d-partial-dependency-plots"]], "2. Complexity Measure:": [[365, "complexity-measure"]], "2. Local Curvature:": [[365, "local-curvature"]], "2. Multivariate Region Detection:": [[365, "multivariate-region-detection"]], "2. Purification Stage": [[355, "purification-stage"]], "2. Quantile Binning": [[370, "quantile-binning"]], "2. Wrapping data into Modeva": [[375, "wrapping-data-into-modeva"]], "2D ALE": [[86, "id2"]], "2D Partial dependency plots": [[86, "id1"]], "2D feature interaction analysis": [[67, "d-feature-interaction-analysis"], [68, "d-feature-interaction-analysis"]], "3. Automatic Binning Using a Depth-1 or 2 XGBoost Tree": [[370, "automatic-binning-using-a-depth-1-or-2-xgboost-tree"]], "3. Generalization Gap Connection:": [[365, "generalization-gap-connection"]], "3. Uncertainty Assessment:": [[365, "uncertainty-assessment"]], "3. Wrapping Sklearn model into Modeva": [[375, "wrapping-sklearn-model-into-modeva"]], "3D Scatter Plot": [[325, "d-scatter-plot"]], "4. Create TestSuite for model validation": [[375, "create-testsuite-for-model-validation"]], "ALE (Accumulated Local Effects)": [[330, "ale-accumulated-local-effects"], [332, null]], "API Reference": [[0, null]], "AUC Score": [[317, "auc-score"]], "Accuracy Comparison": [[317, "accuracy-comparison"], [319, "accuracy-comparison"]], "Accuracy Score": [[317, "accuracy-score"]], "Add advanced ML models": [[49, "add-advanced-ml-models"]], "Add traditional ML models": [[49, "add-traditional-ml-models"]], "Add wrapped scikit-learn model": [[49, "add-wrapped-scikit-learn-model"]], "Additional Utilities for Slicing": [[370, "additional-utilities-for-slicing"]], "Advanced Slicing": [[370, "advanced-slicing"]], "Advanced slicing analysis": [[63, "advanced-slicing-analysis"], [64, "advanced-slicing-analysis"]], "Advantages": [[356, "advantages"]], "Adverse Impact Ratio (AIR) for Disparate Impact": [[364, "adverse-impact-ratio-air-for-disparate-impact"]], "Algorithm Details": [[332, "algorithm-details"], [333, "algorithm-details"], [334, "algorithm-details"], [335, "algorithm-details"], [336, "algorithm-details"], [337, "algorithm-details"], [338, "algorithm-details"]], "Algorithms for specific models": [[338, "algorithms-for-specific-models"]], "Analysis and Comparison": [[323, "analysis-and-comparison"]], "Analyzes residuals feature importance": [[57, "analyzes-residuals-feature-importance"], [58, "analyzes-residuals-feature-importance"]], "Applications of Residual Analysis": [[366, "applications-of-residual-analysis"]], "Apply subsampling by setting active samples": [[6, "apply-subsampling-by-setting-active-samples"]], "Arbitrary Model Wrapper": [[375, "arbitrary-model-wrapper"]], "Attributes": [[52, "attributes"]], "Bandwidth Comparison": [[317, "bandwidth-comparison"], [319, "bandwidth-comparison"]], "Base Model: GBLT Depth-1": [[359, "base-model-gblt-depth-1"]], "Baseline-(Kernel) SHAP (a group of baseline samples)": [[87, "baseline-kernel-shap-a-group-of-baseline-samples"]], "Baseline-(Kernel) SHAP (a single baseline sample)": [[87, "baseline-kernel-shap-a-single-baseline-sample"]], "Basic Data Operations": [[321, null]], "Basic Dataset Operations": [[2, null]], "Basic Decomposition": [[354, "basic-decomposition"], [359, "basic-decomposition"]], "Basic accuracy analysis": [[14, "basic-accuracy-analysis"], [15, "basic-accuracy-analysis"], [16, "basic-accuracy-analysis"], [17, "basic-accuracy-analysis"], [18, "basic-accuracy-analysis"], [19, "basic-accuracy-analysis"], [20, "basic-accuracy-analysis"], [21, "basic-accuracy-analysis"], [22, "basic-accuracy-analysis"], [25, "basic-accuracy-analysis"], [26, "basic-accuracy-analysis"], [61, "basic-accuracy-analysis"], [62, "basic-accuracy-analysis"]], "Basic data operations": [[2, "basic-data-operations"]], "Basic fairness analysis": [[83, "basic-fairness-analysis"]], "Basic reliability analysis": [[71, "basic-reliability-analysis"], [72, "basic-reliability-analysis"]], "Basic resilience analysis": [[75, "basic-resilience-analysis"], [76, "basic-resilience-analysis"]], "Basic robustness analysis": [[79, "basic-robustness-analysis"], [80, "basic-robustness-analysis"]], "Basic slice accuracy analysis": [[63, "basic-slice-accuracy-analysis"], [64, "basic-slice-accuracy-analysis"]], "Batch mode 1D slicing analysis": [[67, "batch-mode-1d-slicing-analysis"], [68, "batch-mode-1d-slicing-analysis"]], "Benefits": [[355, "benefits"]], "Bivariate (2D) Plots": [[325, "bivariate-2d-plots"]], "Boosted GLMTree model": [[23, "boosted-glmtree-model"], [24, "boosted-glmtree-model"]], "Build a model": [[38, "build-a-model"], [39, "build-a-model"], [40, "build-a-model"]], "Build a model and save the prediction": [[34, "build-a-model-and-save-the-prediction"], [35, "build-a-model-and-save-the-prediction"]], "Build a sklearn style model": [[31, "build-a-sklearn-style-model"]], "Built-in Dataset": [[321, "built-in-dataset"]], "Built-in Interpretable Models": [[12, null], [48, "built-in-interpretable-models"]], "CBLOF": [[327, "cblof"]], "Calibrate the model": [[38, "calibrate-the-model"], [39, "calibrate-the-model"], [40, "calibrate-the-model"]], "Calibrating Binary Classifier": [[38, null]], "Calibrating Binary Classifier Prediction Interval": [[39, null]], "Calibrating Regressor Prediction Interval": [[40, null]], "Categorical Features": [[324, "categorical-features"]], "Categorical Variable Encoding": [[321, "categorical-variable-encoding"]], "Categorical Variables": [[321, "categorical-variables"], [354, "categorical-variables"]], "Challenges in Measuring Model Performance": [[366, "challenges-in-measuring-model-performance"]], "Change Feature Types": [[324, "change-feature-types"]], "Change Log": [[91, null]], "Characterization of Weak Regions": [[365, "characterization-of-weak-regions"]], "Check proba before and after calibration": [[38, "check-proba-before-and-after-calibration"]], "Classification": [[308, "classification"]], "Classification Metrics": [[366, "classification-metrics"]], "Cluster-Based Local Outlier Factor (CBLOF)": [[323, "cluster-based-local-outlier-factor-cblof"]], "Coefficient interpretation": [[13, "coefficient-interpretation"], [14, "coefficient-interpretation"]], "Combined Application of Threshold Adjustment and Feature Binning": [[364, "combined-application-of-threshold-adjustment-and-feature-binning"]], "Compare the XGBoost model with LGBM model": [[38, "compare-the-xgboost-model-with-lgbm-model"], [61, "compare-the-xgboost-model-with-lgbm-model"], [62, "compare-the-xgboost-model-with-lgbm-model"]], "Comparison for Classification": [[317, null]], "Comparison for Regression": [[319, null]], "Comparison of Different Methods": [[323, "comparison-of-different-methods"]], "Computation times": [[11, null], [27, null], [36, null], [41, null], [47, null], [50, null], [55, null], [59, null], [65, null], [69, null], [73, null], [77, null], [81, null], [84, null], [88, null], [90, null], [378, null]], "Conceptual Soundness": [[339, "conceptual-soundness"]], "Conditional Independence": [[326, "conditional-independence"]], "Conduct slicing analysis for overfit regions": [[67, "conduct-slicing-analysis-for-overfit-regions"], [68, "conduct-slicing-analysis-for-overfit-regions"]], "Configure MLflow settings": [[49, "configure-mlflow-settings"]], "Conformal Prediction": [[367, "conformal-prediction"]], "Continuous Formulation:": [[368, "continuous-formulation"], [368, "id1"], [368, "id2"]], "Convert the model into Modeva": [[34, "convert-the-model-into-modeva"], [35, "convert-the-model-into-modeva"]], "Correlation": [[3, "correlation"]], "Correlation Coefficient": [[326, "correlation-coefficient"]], "Correlation Heatmap": [[325, "correlation-heatmap"]], "Correlation based feature selection": [[4, "correlation-based-feature-selection"]], "Coverage Comparison": [[319, "coverage-comparison"]], "Create test suite for diagnostics": [[29, "create-test-suite-for-diagnostics"], [30, "create-test-suite-for-diagnostics"], [31, "create-test-suite-for-diagnostics"], [32, "create-test-suite-for-diagnostics"], [33, "create-test-suite-for-diagnostics"], [34, "create-test-suite-for-diagnostics"], [35, "create-test-suite-for-diagnostics"]], "Creating & Managing Experiments": [[352, "creating-managing-experiments"]], "Data Access and Properties": [[109, "data-access-and-properties"]], "Data Drift Test": [[7, null]], "Data Drift and Sampling": [[109, "data-drift-and-sampling"]], "Data Exploration": [[109, "data-exploration"]], "Data Loading": [[321, "data-loading"]], "Data Loading and Management": [[109, "data-loading-and-management"]], "Data Preparation": [[321, "data-preparation"]], "Data Preprocessing": [[321, "data-preprocessing"]], "Data Processing": [[320, null], [341, null]], "Data Processing and Feature Engineering": [[5, null]], "Data Quality (Drift Test)": [[322, null]], "Data Quality (Outlier Detection)": [[323, null]], "Data Registration": [[321, "data-registration"]], "Data Summary": [[321, "data-summary"], [324, null], [342, null]], "Data drift test between cluster \u201c1\u201d with the rest samples": [[21, "data-drift-test-between-cluster-1-with-the-rest-samples"], [22, "data-drift-test-between-cluster-1-with-the-rest-samples"]], "Data load and summary": [[5, "data-load-and-summary"]], "Data summary": [[3, "data-summary"]], "Data with Model Predictions": [[9, null]], "Data-Centric Approaches": [[367, "data-centric-approaches"], [368, "data-centric-approaches"], [369, "data-centric-approaches"]], "Data-Centric Solutions": [[365, "data-centric-solutions"]], "DataSet": [[109, null]], "Dataset": [[1, null]], "Dataset Workflow": [[352, "dataset-workflow"]], "Dealing with Extra Data Sets": [[10, null]], "Decision Tree": [[361, null]], "Decision Tree Classification": [[15, null]], "Decision Tree Regression": [[16, null]], "Decision Tree in MoDeVa": [[361, "decision-tree-in-modeva"]], "Definitions of Group Fairness": [[364, "definitions-of-group-fairness"]], "Delete data split (if needed)": [[10, "delete-data-split-if-needed"]], "Diagnose the tuned model": [[43, "diagnose-the-tuned-model"], [44, "diagnose-the-tuned-model"], [45, "diagnose-the-tuned-model"], [46, "diagnose-the-tuned-model"]], "Diagnostic Suite": [[363, null]], "Diagnostics": [[312, "diagnostics"]], "Discrete Formulation (PSI):": [[368, "discrete-formulation-psi"]], "Discrete Formulation:": [[368, "discrete-formulation"], [368, "id3"]], "Display one subplot by its name": [[53, "display-one-subplot-by-its-name"]], "Distribution Drift": [[328, "distribution-drift"]], "EDA 1D": [[3, "eda-1d"]], "EDA 2D": [[3, "eda-2d"]], "EDA 2D Charts": [[343, null]], "EDA 3D": [[3, "eda-3d"]], "EDA 3D Scatter": [[344, null]], "EDA Multivariate": [[345, null]], "Effect Attribution": [[354, "effect-attribution"], [358, "effect-attribution"], [359, "effect-attribution"]], "Effect Computation": [[354, "effect-computation"], [359, "effect-computation"]], "Effect Importance": [[354, "effect-importance"], [358, "effect-importance"], [359, "effect-importance"]], "Effect importance analysis": [[25, "effect-importance-analysis"], [26, "effect-importance-analysis"]], "Effects interpretation": [[20, "effects-interpretation"]], "Empirical Cumulative Distribution-based Outlier Detection": [[323, "empirical-cumulative-distribution-based-outlier-detection"]], "Empirical Results": [[355, "empirical-results"]], "Empirical Risk Decomposition": [[365, "empirical-risk-decomposition"]], "Empirical Risk and Generalization Gap": [[365, "empirical-risk-and-generalization-gap"]], "Energy Distance": [[322, "energy-distance"]], "Error Slicing for Weakness Detection": [[370, "error-slicing-for-weakness-detection"]], "Estimation from Training and Test Errors": [[365, "estimation-from-training-and-test-errors"]], "Exact Solution": [[331, "exact-solution"], [338, "exact-solution"]], "Example": [[318, null], [322, null], [323, null], [324, null], [330, null], [331, null], [337, "example"], [364, null]], "Example 1:": [[372, null], [374, null], [375, null]], "Example 1: Bike Sharing": [[332, null], [333, null], [334, null], [335, null], [336, null], [337, null], [338, null], [354, null], [355, null], [356, null], [357, null], [358, null], [359, null], [360, null], [361, null], [365, null], [366, null], [367, null], [368, null], [369, null], [370, null]], "Example 1: BikeSharing": [[319, null]], "Example 1: Grid Search": [[373, null]], "Example 2:": [[375, null]], "Example 2: Randomized Search": [[373, null]], "Example 2: SimuCredit": [[332, null], [333, null], [334, null], [335, null], [336, null], [337, null], [338, null]], "Example 3:": [[375, null]], "Example 3: Particle Swarm Optimization Search": [[373, null]], "Example 4:": [[375, null]], "Example 5:": [[375, null]], "Example of TaiwanCredit Data Exploration": [[325, null]], "Example: Feature Selection": [[326, null]], "Example: Outlier Detection": [[327, null]], "Example: Subsampling": [[328, null]], "Examples": [[317, "examples"], [318, "examples"], [319, "examples"], [321, "examples"], [322, "examples"], [323, "examples"], [324, "examples"], [325, "examples"], [326, "examples"], [327, "examples"], [328, "examples"], [330, "examples"], [331, "examples"], [332, "examples"], [333, "examples"], [334, "examples"], [335, "examples"], [336, "examples"], [338, "examples"], [354, "examples"], [355, "examples"], [356, "examples"], [357, "examples"], [358, "examples"], [359, "examples"], [360, "examples"], [361, "examples"], [364, "examples"], [365, "examples"], [366, "examples"], [367, "examples"], [368, "examples"], [369, "examples"], [370, "examples"], [372, "examples"], [373, "examples"], [374, "examples"], [375, "examples"]], "Examples 1: Taiwan Credit": [[317, null]], "Examples 2: Taiwan Credit": [[354, null], [355, null], [356, null], [357, null], [358, null], [359, null], [360, null], [361, null], [365, null], [366, null], [367, null], [368, null], [369, null], [370, null]], "Example\uff1a Basic Data Operations": [[321, null]], "Execute the preprocessing steps defined above": [[5, "execute-the-preprocessing-steps-defined-above"], [14, "execute-the-preprocessing-steps-defined-above"]], "Experiment Workflow": [[352, "experiment-workflow"]], "Expert Decomposition": [[358, "expert-decomposition"]], "Explainability": [[85, null], [89, "explainability"]], "Explanation": [[354, "explanation"]], "Exploratory Data Analysis": [[3, null], [325, null]], "External Dataset": [[321, "external-dataset"]], "External Models": [[28, null], [48, "external-models"]], "Extra and Protected Data Management": [[109, "extra-and-protected-data-management"]], "Extract the last hidden layer outputs": [[17, "extract-the-last-hidden-layer-outputs"], [18, "extract-the-last-hidden-layer-outputs"]], "F1 Score": [[317, "f1-score"]], "FBEDk Algorithm": [[326, "fbedk-algorithm"]], "Fairness": [[364, null]], "Fairness Analysis": [[82, null], [89, "fairness-analysis"]], "Fairness Comparison": [[318, null], [364, "fairness-comparison"]], "Fairness Evaluation in MoDeVa": [[364, "fairness-evaluation-in-modeva"]], "Fairness Metrics": [[318, "fairness-metrics"]], "Fairness Metrics in MoDeVa": [[364, "fairness-metrics-in-modeva"]], "Fairness Mitigation": [[364, "fairness-mitigation"]], "Fairness comparison": [[83, "fairness-comparison"]], "Feature Binning": [[364, "feature-binning"]], "Feature Engineering Solutions": [[365, "feature-engineering-solutions"]], "Feature Importance": [[326, "feature-importance"], [354, "feature-importance"], [358, "feature-importance"], [359, "feature-importance"]], "Feature Importance Plot": [[360, "feature-importance-plot"]], "Feature Manipulation": [[324, "feature-manipulation"]], "Feature Selection": [[4, null], [326, null]], "Feature Selection and Management": [[109, "feature-selection-and-management"]], "Feature importance": [[13, "feature-importance"], [14, "feature-importance"]], "Feature importance analysis": [[19, "feature-importance-analysis"], [20, "feature-importance-analysis"], [25, "feature-importance-analysis"], [26, "feature-importance-analysis"]], "Feature selection operations": [[4, "feature-selection-operations"]], "Frequently Asked Questions": [[92, null]], "Full Conformal Prediction": [[367, "full-conformal-prediction"]], "Functional ANOVA Decomposition Process for Tree Ensembles": [[355, "functional-anova-decomposition-process-for-tree-ensembles"]], "Functional ANOVA Representation": [[354, "functional-anova-representation"], [359, "functional-anova-representation"]], "GAMI-Net": [[354, null]], "GAMI-Net in MoDeVa": [[354, "gami-net-in-modeva"]], "GAMINet Classification": [[19, null]], "GAMINet Regression": [[20, null]], "GBDT in MoDeVa": [[355, "gbdt-in-modeva"]], "GBLT in MoDeVa": [[356, "gblt-in-modeva"]], "GLM in MoDeVa": [[357, "glm-in-modeva"]], "Gallery of Modeva Examples": [[93, null]], "Gating Decomposition": [[358, "gating-decomposition"]], "Generalization Gap": [[365, "generalization-gap"]], "Generalized Linear Models": [[357, null]], "Generate and save plots": [[53, "generate-and-save-plots"]], "Get data split by name": [[10, "get-data-split-by-name"]], "Get prediction interval": [[39, "get-prediction-interval"], [40, "get-prediction-interval"]], "Global Effect Plot": [[354, "global-effect-plot"], [355, "global-effect-plot"], [358, "global-effect-plot"], [359, "global-effect-plot"]], "Global Explainability": [[86, null], [330, null]], "Global Interpretation": [[354, "global-interpretation"], [355, "global-interpretation"], [356, "global-interpretation"], [357, "global-interpretation"], [358, "global-interpretation"], [359, "global-interpretation"], [361, "global-interpretation"]], "Global effects interpretation": [[19, "global-effects-interpretation"]], "Global tree interpretation": [[15, "global-tree-interpretation"], [16, "global-tree-interpretation"]], "Gradient Boosted Decision Trees": [[355, null]], "Gradient Boosted Linear Tree (GBLT)": [[356, "gradient-boosted-linear-tree-gblt"]], "Grid Search": [[43, null]], "H-statistic": [[86, "h-statistic"]], "Handling Missing Values": [[321, "handling-missing-values"]], "Histogram-based outlier detection": [[323, "histogram-based-outlier-detection"]], "Hstats (Friedman\u2019s H-statistic)": [[330, "hstats-friedman-s-h-statistic"], [333, null]], "Hyperparameter Tuning": [[42, null], [48, "hyperparameter-tuning"], [307, null]], "ICE (Individual Conditional Expectation)": [[334, null]], "Identification of Reliability Issue and Impactful Variables": [[367, "identification-of-reliability-issue-and-impactful-variables"]], "Identification of Robustness Issue and Impactful Variables": [[369, "identification-of-robustness-issue-and-impactful-variables"]], "Identifying Problematic Regions": [[365, "identifying-problematic-regions"]], "Implementation Considerations": [[354, "implementation-considerations"], [359, "implementation-considerations"]], "Implementation Framework": [[365, "implementation-framework"]], "Individual Prediction Analysis": [[354, "individual-prediction-analysis"], [355, "individual-prediction-analysis"], [356, "individual-prediction-analysis"], [358, "individual-prediction-analysis"], [359, "individual-prediction-analysis"], [360, "individual-prediction-analysis"]], "Inherent Interpretation": [[312, "inherent-interpretation"]], "Initialize ModelZoo": [[49, "initialize-modelzoo"]], "Initialize the Panel": [[341, "initialize-the-panel"], [342, "initialize-the-panel"], [343, "initialize-the-panel"], [344, "initialize-the-panel"], [345, "initialize-the-panel"], [346, "initialize-the-panel"], [347, "initialize-the-panel"], [348, "initialize-the-panel"], [350, "initialize-the-panel"], [351, "initialize-the-panel"], [352, "initialize-the-panel"]], "Initialize the pipeline with steps": [[54, "initialize-the-pipeline-with-steps"]], "Input Perturbation for Robustness Test": [[369, "input-perturbation-for-robustness-test"]], "Installation": [[107, null], [107, "id1"]], "Interaction with ANOVA Decomposition": [[355, "interaction-with-anova-decomposition"]], "Interpret effect importance": [[21, "interpret-effect-importance"], [22, "interpret-effect-importance"]], "Interpret effects": [[21, "interpret-effects"], [22, "interpret-effects"]], "Interpret feature importance": [[21, "interpret-feature-importance"], [22, "interpret-feature-importance"]], "Interpret residual by a XGB depth-2 model": [[57, "interpret-residual-by-a-xgb-depth-2-model"], [58, "interpret-residual-by-a-xgb-depth-2-model"]], "Interpretability Enhancement": [[355, "interpretability-enhancement"]], "Interpretability Through Functional ANOVA": [[355, "interpretability-through-functional-anova"]], "Interpretable GBLT with Depth-1 Trees": [[356, "interpretable-gblt-with-depth-1-trees"]], "Interpretable Models": [[308, null], [353, null]], "Interpretation: Functional ANOVA Representation": [[358, "interpretation-functional-anova-representation"]], "Interpreting Residual Analysis Results": [[366, "interpreting-residual-analysis-results"]], "Introduction": [[339, null], [366, "introduction"], [370, "introduction"]], "Isolation Forest": [[323, "isolation-forest"], [327, "isolation-forest"]], "Jensen-Shannon Divergence": [[368, "jensen-shannon-divergence"]], "K-Nearest Neighbor": [[323, "k-nearest-neighbor"]], "KernelSHAP": [[331, "kernelshap"], [338, "kernelshap"]], "Key Approaches to Weakness Detection": [[370, "key-approaches-to-weakness-detection"]], "Key Modules": [[339, "key-modules"]], "KmeansTree": [[323, "kmeanstree"]], "Kolmogorov-Smirnov Statistic": [[368, "kolmogorov-smirnov-statistic"]], "LGBM Linear Tree model": [[23, "lgbm-linear-tree-model"], [24, "lgbm-linear-tree-model"]], "LIME": [[87, "lime"]], "LIME (Local Interpretable Model-Agnostic Explanation)": [[331, "lime-local-interpretable-model-agnostic-explanation"], [335, null]], "LLM Summary Table": [[360, "llm-summary-table"]], "LLM parallel coordinate plot": [[17, "llm-parallel-coordinate-plot"], [18, "llm-parallel-coordinate-plot"]], "LLM profile plot": [[360, "llm-profile-plot"]], "LLM profile plot against a feature": [[17, "llm-profile-plot-against-a-feature"], [18, "llm-profile-plot-against-a-feature"]], "LLM summary table": [[17, "llm-summary-table"], [18, "llm-summary-table"]], "Limit the number of bars in bar plots": [[53, "limit-the-number-of-bars-in-bar-plots"]], "Linear Regression (Regression)": [[14, null]], "Linear Tree": [[356, "linear-tree"]], "Linear Tree Classification": [[23, null]], "Linear Tree Regression": [[24, null]], "Linear Tree and Gradient Boosted Linear Trees": [[356, null]], "Linear Tree in MoDeVa": [[356, "linear-tree-in-modeva"]], "LinearSHAP and TreeSHAP": [[331, "linearshap-and-treeshap"]], "List the available sub-figure names": [[53, "list-the-available-sub-figure-names"]], "Load and Register Fitted Models": [[372, "load-and-register-fitted-models"]], "Load and prepare dataset": [[49, "load-and-prepare-dataset"]], "Load and verify registered models": [[49, "load-and-verify-registered-models"]], "Load data from MLFlow": [[2, "load-data-from-mlflow"]], "Load the built-in data": [[2, "load-the-built-in-data"]], "Load the first 5000 rows into Modeva": [[10, "load-the-first-5000-rows-into-modeva"]], "Load the samples indexed from 5000 to 8000 as \u201coot1\u201d data split": [[10, "load-the-samples-indexed-from-5000-to-8000-as-oot1-data-split"]], "Load the samples indexed from 8000 to 9000 as \u201coot2\u201d data split": [[10, "load-the-samples-indexed-from-8000-to-9000-as-oot2-data-split"]], "Load the samples indexed from 9000 to the last one as \u201coot3\u201d data split": [[10, "load-the-samples-indexed-from-9000-to-the-last-one-as-oot3-data-split"]], "Local Explainability": [[87, null], [331, null]], "Local Interpretation": [[354, "local-interpretation"], [355, "local-interpretation"], [356, "local-interpretation"], [357, "local-interpretation"], [358, "local-interpretation"], [359, "local-interpretation"], [360, "local-interpretation"], [361, "local-interpretation"]], "Local Linear Models (LLM)": [[360, "local-linear-models-llm"]], "Local MOE weights interpretation": [[21, "local-moe-weights-interpretation"], [22, "local-moe-weights-interpretation"]], "Local effect importance analysis": [[21, "local-effect-importance-analysis"], [22, "local-effect-importance-analysis"], [25, "local-effect-importance-analysis"], [26, "local-effect-importance-analysis"]], "Local feature importance analysis": [[13, "local-feature-importance-analysis"], [14, "local-feature-importance-analysis"], [17, "local-feature-importance-analysis"], [18, "local-feature-importance-analysis"], [19, "local-feature-importance-analysis"], [20, "local-feature-importance-analysis"], [21, "local-feature-importance-analysis"], [22, "local-feature-importance-analysis"], [25, "local-feature-importance-analysis"], [26, "local-feature-importance-analysis"]], "Local feature importance with linear coefficients": [[13, "local-feature-importance-with-linear-coefficients"], [14, "local-feature-importance-with-linear-coefficients"]], "Local tree interpretation": [[15, "local-tree-interpretation"], [16, "local-tree-interpretation"]], "Logistic Regression (Classification)": [[13, null]], "Loss Function with Monotonicity Constraint": [[359, "loss-function-with-monotonicity-constraint"]], "Loss Function with Monotonicity Constraint in GAMI-Net": [[354, "loss-function-with-monotonicity-constraint-in-gami-net"]], "Low Code": [[108, null]], "Low code": [[340, null]], "Main Effects": [[355, "main-effects"]], "Main effect plot": [[13, "main-effect-plot"], [14, "main-effect-plot"], [25, "main-effect-plot"], [26, "main-effect-plot"]], "Managing Datasets": [[352, "managing-datasets"]], "Manifestations": [[365, "manifestations"]], "Marginal Distribution Drift": [[322, "marginal-distribution-drift"]], "Marginal Distribution of Outliers": [[323, "marginal-distribution-of-outliers"]], "Mathematical Formulation": [[355, "mathematical-formulation"], [358, "mathematical-formulation"]], "Mean Absolute Error": [[319, "mean-absolute-error"]], "Mean Squared Error": [[319, "mean-squared-error"]], "Measuring Distribution Drift": [[368, "measuring-distribution-drift"]], "Methodology": [[323, "methodology"], [366, "methodology"]], "Metrics for Group Fairness": [[364, "metrics-for-group-fairness"]], "Mixture of Expert (MoE) Classification": [[21, null]], "Mixture of Expert (MoE) Regression": [[22, null]], "Mixture of Experts (MoE)": [[358, null]], "MoDeVa.ai": [[376, null]], "MoE in MoDeVa": [[358, "moe-in-modeva"]], "MoReLUDNN Classification": [[17, null]], "MoReLUDNN Regression": [[18, null]], "Model Architecture": [[358, "model-architecture"]], "Model Calibration": [[37, null], [48, "model-calibration"]], "Model Comparison": [[312, "model-comparison"], [316, null], [346, null]], "Model Development": [[48, null]], "Model Explainability": [[329, null], [347, null]], "Model Fairness Analysis (Classification)": [[83, null]], "Model Interpretation": [[360, "model-interpretation"]], "Model Management": [[309, "model-management"], [374, "model-management"]], "Model Performance": [[60, null], [89, "model-performance"]], "Model Quality": [[355, "model-quality"]], "Model Registry": [[309, "model-registry"]], "Model Residual": [[56, null], [89, "model-residual"]], "Model Test": [[348, null]], "Model Training": [[309, "model-training"], [349, null], [371, null]], "Model Tuning": [[350, null], [373, null]], "Model Validation": [[89, null]], "Model Wrappers": [[314, null], [375, null]], "Model Wrapping": [[362, null]], "Model Zoo": [[309, null]], "Model Zoo and Leaderboard": [[374, null]], "Model architecture": [[359, "model-architecture"], [360, "model-architecture"]], "Model comparison": [[63, "model-comparison"], [64, "model-comparison"], [67, "model-comparison"], [68, "model-comparison"]], "Model interpretation examples": [[49, "model-interpretation-examples"]], "Model registration and loading": [[49, "model-registration-and-loading"]], "Model reliability comparison": [[71, "model-reliability-comparison"], [72, "model-reliability-comparison"]], "Model robustness comparison": [[80, "model-robustness-comparison"]], "Model-Centric Approaches": [[365, "model-centric-approaches"], [368, "model-centric-approaches"], [369, "model-centric-approaches"]], "ModelTune Usage": [[373, "modeltune-usage"]], "ModelZoo": [[49, null]], "Monotonicity Constraint in GBDT": [[355, "monotonicity-constraint-in-gbdt"]], "Monotonicity Constraints in GAMI-Net": [[354, "monotonicity-constraints-in-gami-net"]], "Monotonicity Constraints in Neural Tree": [[359, "monotonicity-constraints-in-neural-tree"]], "Neural Tree": [[359, null]], "Neural Tree Transformation": [[359, "neural-tree-transformation"]], "Neural Tree in MoDeVa": [[359, "neural-tree-in-modeva"]], "Neural Tree model with Monotonicity Constraints": [[23, "neural-tree-model-with-monotonicity-constraints"], [24, "neural-tree-model-with-monotonicity-constraints"]], "Nonconformity Score:": [[367, "nonconformity-score"]], "Numerical Features": [[324, "numerical-features"]], "Numerical Variable Binning": [[321, "numerical-variable-binning"]], "Numerical Variable Scaling": [[321, "numerical-variable-scaling"]], "Numerical Variables": [[321, "numerical-variables"]], "One Class SVM": [[323, "one-class-svm"]], "One-way ALE": [[332, "one-way-ale"]], "One-way PDPs": [[336, "one-way-pdps"]], "Outcome Analysis": [[339, "outcome-analysis"]], "Outlier Detection": [[8, null], [109, "outlier-detection"], [327, null]], "Outlier Score distribution": [[323, "outlier-score-distribution"]], "Outlier detection by CBLOF": [[8, "outlier-detection-by-cblof"]], "Outlier detection by Isolation forest": [[8, "outlier-detection-by-isolation-forest"]], "Outlier detection by PCA": [[8, "outlier-detection-by-pca"]], "Overfit Comparison": [[317, "overfit-comparison"], [319, "overfit-comparison"], [365, "overfit-comparison"]], "Overfit Detection": [[66, null], [89, "overfit-detection"]], "Overfitting Analysis (Classification)": [[67, null]], "Overfitting Analysis (Regression)": [[68, null]], "Overfitting Characterization": [[365, "overfitting-characterization"]], "Overfitting Slicing in MoDeVa": [[365, "overfitting-slicing-in-modeva"]], "Overfitting and Model Robustness": [[365, "overfitting-and-model-robustness"]], "PCA": [[3, "pca"]], "PCA Plot": [[325, "pca-plot"]], "PCA-based Method": [[327, "pca-based-method"]], "PDP (Partial Dependence Plot)": [[330, "pdp-partial-dependence-plot"], [336, null]], "PFI (Permutation Feature Importance)": [[330, "pfi-permutation-feature-importance"], [337, null]], "Pairwise Interactions": [[355, "pairwise-interactions"]], "Parallel Coordinate Plot": [[360, "parallel-coordinate-plot"]], "Particle Swarm Optimization Search": [[45, null]], "Performance Comparison": [[366, "performance-comparison"]], "Performance Evaluation in MoDeVa": [[366, "performance-evaluation-in-modeva"]], "Performance Metrics (Classification)": [[61, null]], "Performance Metrics (Regression)": [[62, null]], "Performance and Residual Analysis": [[366, null]], "Permutation feature importance": [[86, "permutation-feature-importance"]], "Perturbation for Categorical Variable": [[369, "perturbation-for-categorical-variable"]], "Pipeline": [[54, null], [310, null]], "Post-hoc Explanation": [[312, "post-hoc-explanation"]], "Practical Applications": [[365, "practical-applications"]], "Practical Considerations": [[369, "practical-considerations"]], "Preprocessing": [[109, "preprocessing"]], "Prerequisite": [[107, "prerequisite"]], "Principal Component Analysis": [[323, "principal-component-analysis"]], "Properties": [[309, "properties"]], "Purification Constraints": [[354, "purification-constraints"], [359, "purification-constraints"]], "Purpose of Residual Analysis": [[366, "purpose-of-residual-analysis"]], "Quantile Perturbation with Uniform Noise": [[369, "quantile-perturbation-with-uniform-noise"]], "R-squared Score": [[319, "r-squared-score"]], "RCIT Test": [[326, "rcit-test"]], "RCIT based feature selection": [[4, "rcit-based-feature-selection"]], "Random Search": [[44, null]], "Random forest-based residual clustering analysis (absolute residual)": [[57, "random-forest-based-residual-clustering-analysis-absolute-residual"], [58, "random-forest-based-residual-clustering-analysis-absolute-residual"]], "Random forest-based residual clustering analysis (perturbed residual)": [[57, "random-forest-based-residual-clustering-analysis-perturbed-residual"], [58, "random-forest-based-residual-clustering-analysis-perturbed-residual"]], "Random forest-based residual clustering analysis (prediction interval width)": [[57, "random-forest-based-residual-clustering-analysis-prediction-interval-width"], [58, "random-forest-based-residual-clustering-analysis-prediction-interval-width"]], "Random subsampling": [[6, "random-subsampling"]], "ReLU DNN in MoDeVa": [[360, "relu-dnn-in-modeva"]], "ReLU Neural Network": [[360, null]], "References": [[323, null], [325, "references"], [325, null], [326, "references"], [326, null], [327, "references"], [327, null], [330, "references"], [330, null], [331, "references"], [331, null], [333, null], [334, null], [337, null], [338, null]], "Register H2O Models": [[372, null]], "Register data into MLFlow": [[2, "register-data-into-mlflow"]], "Registry Hub": [[352, null]], "Regression": [[308, "regression"]], "Regression Metrics": [[366, "regression-metrics"]], "Reliability": [[367, null]], "Reliability Analysis": [[70, null], [89, "reliability-analysis"]], "Reliability Analysis (Classification)": [[71, null]], "Reliability Analysis (Regression)": [[72, null]], "Reliability Analysis in MoDeVa": [[367, "reliability-analysis-in-modeva"]], "Reliability Assessment:": [[367, "reliability-assessment"]], "Reliability Comparison": [[317, "reliability-comparison"], [319, "reliability-comparison"], [367, "reliability-comparison"]], "Reliability Diagnostics in MoDeVa": [[367, "reliability-diagnostics-in-modeva"]], "Reliability Diagram Comparison": [[317, "reliability-diagram-comparison"]], "Remediation Strategies for Model Weaknesses Identified by Gap Analysis": [[365, "remediation-strategies-for-model-weaknesses-identified-by-gap-analysis"]], "Remove Features": [[324, "remove-features"]], "Reset preprocessing": [[5, "reset-preprocessing"]], "Reset subsampling by ds.set_active_samples()": [[6, "reset-subsampling-by-ds-set-active-samples"]], "Residual Analysis": [[366, "residual-analysis"]], "Residual Analysis (Classification)": [[57, null]], "Residual Analysis (Regression)": [[58, null]], "Residual Analysis in MoDeVa": [[366, "residual-analysis-in-modeva"]], "Resilience": [[368, null]], "Resilience Analysis": [[74, null], [89, "resilience-analysis"]], "Resilience Analysis (Classification)": [[75, null]], "Resilience Analysis (Regression)": [[76, null]], "Resilience Analysis in MoDeVa": [[368, "resilience-analysis-in-modeva"]], "Resilience Comparison": [[317, "resilience-comparison"], [319, "resilience-comparison"], [368, "resilience-comparison"]], "Resilience Distance": [[317, "resilience-distance"], [319, "resilience-distance"]], "Resilience Performance": [[317, "resilience-performance"], [319, "resilience-performance"]], "Resilience Through Supervised Clustering Analysis": [[368, "resilience-through-supervised-clustering-analysis"]], "Resilience comparison": [[75, "resilience-comparison"], [76, "resilience-comparison"]], "Rest calibration when needed": [[38, "rest-calibration-when-needed"], [39, "rest-calibration-when-needed"], [40, "rest-calibration-when-needed"]], "Retrain model with best hyperparameter": [[43, "retrain-model-with-best-hyperparameter"], [44, "retrain-model-with-best-hyperparameter"], [45, "retrain-model-with-best-hyperparameter"], [46, "retrain-model-with-best-hyperparameter"]], "Robustness": [[369, null]], "Robustness Analysis": [[78, null], [89, "robustness-analysis"]], "Robustness Analysis (Classification)": [[79, null]], "Robustness Analysis (Regression)": [[80, null]], "Robustness Analysis in MoDeVa": [[369, "robustness-analysis-in-modeva"]], "Robustness Comparison": [[317, "robustness-comparison"], [319, "robustness-comparison"], [369, "robustness-comparison"]], "Robustness Performance": [[317, "robustness-performance"], [319, "robustness-performance"]], "Robustness Performance on Worst Samples": [[317, "robustness-performance-on-worst-samples"], [319, "robustness-performance-on-worst-samples"]], "Robustness comparison": [[79, "robustness-comparison"]], "Run Diagnostic Tests": [[372, "run-diagnostic-tests"]], "Run HPO": [[46, "run-hpo"]], "Run PSO search": [[45, "run-pso-search"]], "Run grid search": [[43, "run-grid-search"]], "Run random search": [[44, "run-random-search"]], "Run the pipeline": [[54, "run-the-pipeline"]], "SHAP (SHapley Additive exPlanations)": [[331, "shap-shapley-additive-explanations"], [338, null]], "SHAP Dependence Plot": [[338, "shap-dependence-plot"]], "SHAP Feature importance": [[338, "shap-feature-importance"]], "SHAP Summary plot": [[338, "shap-summary-plot"]], "Save Fitted Models": [[372, "save-fitted-models"]], "Save figures": [[53, "save-figures"]], "Save the pipeline results (optional)": [[54, "save-the-pipeline-results-optional"]], "Scored Model Wrapper": [[375, "scored-model-wrapper"]], "Scripts for building a H2O model": [[29, "scripts-for-building-a-h2o-model"]], "Scripts for building a pyspark model": [[30, "scripts-for-building-a-pyspark-model"]], "Scripts to build a model": [[32, "scripts-to-build-a-model"], [33, "scripts-to-build-a-model"]], "Segmented": [[318, "segmented"]], "Set the data steps": [[5, "set-the-data-steps"]], "Show the available data splits": [[10, "show-the-available-data-splits"]], "Simple Perturbation with Normally Distributed Random Noise": [[369, "simple-perturbation-with-normally-distributed-random-noise"]], "Sklearn Model Wrapper": [[375, "sklearn-model-wrapper"]], "Sliced Performance (Classification)": [[63, null]], "Sliced Performance (Regression)": [[64, null]], "Slicing Generalization Gap": [[365, "slicing-generalization-gap"]], "Slicing fairness analysis": [[83, "slicing-fairness-analysis"]], "Slicing for Fairness Diagnostics": [[364, "slicing-for-fairness-diagnostics"]], "Slicing reliability": [[71, "slicing-reliability"], [72, "slicing-reliability"]], "Slicing robustness analysis": [[79, "slicing-robustness-analysis"], [80, "slicing-robustness-analysis"]], "Special Cases with Limited Depth": [[355, "special-cases-with-limited-depth"]], "Special Features": [[339, "special-features"]], "Split Conformal Prediction": [[367, "split-conformal-prediction"]], "Step 1: Dataset & Model Selection": [[349, "step-1-dataset-model-selection"]], "Step 1: Load and Select Dataset": [[342, "step-1-load-and-select-dataset"], [343, "step-1-load-and-select-dataset"], [344, "step-1-load-and-select-dataset"], [345, "step-1-load-and-select-dataset"], [347, "step-1-load-and-select-dataset"]], "Step 1: Select Dataset & Model": [[348, "step-1-select-dataset-model"]], "Step 1: Select Dataset & Models": [[346, "step-1-select-dataset-models"], [351, "step-1-select-dataset-models"]], "Step 1: Select Dataset, Model, and Search Method": [[350, "step-1-select-dataset-model-and-search-method"]], "Step 1: Select variables and global settings": [[341, "step-1-select-variables-and-global-settings"]], "Step 2: Configure Tuning Parameters": [[350, "step-2-configure-tuning-parameters"]], "Step 2: Configure Visualization Settings": [[343, "step-2-configure-visualization-settings"], [344, "step-2-configure-visualization-settings"]], "Step 2: Detect Weak Features and Segments": [[351, "step-2-detect-weak-features-and-segments"]], "Step 2: Global Explanations": [[347, "step-2-global-explanations"]], "Step 2: Perform Correlation Analysis": [[345, "step-2-perform-correlation-analysis"]], "Step 2: Performance Comparison": [[346, "step-2-performance-comparison"]], "Step 2: Performance Evaluation": [[348, "step-2-performance-evaluation"]], "Step 2: Process Features": [[341, "step-2-process-features"]], "Step 2: Review Dataset Overview": [[342, "step-2-review-dataset-overview"]], "Step 2: Train a Model": [[349, "step-2-train-a-model"]], "Step 3: Adjust Feature Types (If Necessary)": [[343, "step-3-adjust-feature-types-if-necessary"], [344, "step-3-adjust-feature-types-if-necessary"]], "Step 3: Analyze Numerical Features": [[342, "step-3-analyze-numerical-features"]], "Step 3: Apply Principal Component Analysis (PCA)": [[345, "step-3-apply-principal-component-analysis-pca"]], "Step 3: Evaluate and Compare Models": [[349, "step-3-evaluate-and-compare-models"]], "Step 3: Local Explanations": [[347, "step-3-local-explanations"]], "Step 3: Reliability Comparison": [[346, "step-3-reliability-comparison"]], "Step 3: Reliability Testing": [[348, "step-3-reliability-testing"]], "Step 3: Run Tuning": [[350, "step-3-run-tuning"]], "Step 3: Saving Results": [[351, "step-3-saving-results"]], "Step 3: Splitting, Sampling & Registering": [[341, "step-3-splitting-sampling-registering"]], "Step 4: Analyze Categorical Features": [[342, "step-4-analyze-categorical-features"]], "Step 4: Apply UMAP for Advanced Visualization": [[345, "step-4-apply-umap-for-advanced-visualization"]], "Step 4: Register a Model": [[349, "step-4-register-a-model"]], "Step 4: Register and Save the Visualization:": [[343, "step-4-register-and-save-the-visualization"], [344, "step-4-register-and-save-the-visualization"]], "Step 4: Register the Best Model": [[350, "step-4-register-the-best-model"]], "Step 4: Robustness Comparison": [[346, "step-4-robustness-comparison"]], "Step 4: Robustness Testing": [[348, "step-4-robustness-testing"]], "Step 4: Saving Results": [[347, "step-4-saving-results"]], "Step 5: Adjust Data Types (If Necessary)": [[342, "step-5-adjust-data-types-if-necessary"]], "Step 5: Resilience Comparison": [[346, "step-5-resilience-comparison"]], "Step 5: Resilience Testing": [[348, "step-5-resilience-testing"]], "Step 5: Save and Export Results": [[345, "step-5-save-and-export-results"]], "Step 6: Save and Export Results": [[342, "step-6-save-and-export-results"]], "Step 6: Saving Results": [[346, "step-6-saving-results"], [348, "step-6-saving-results"]], "Step-by-Step Process": [[358, "step-by-step-process"]], "Steps in Residual Analysis": [[366, "steps-in-residual-analysis"]], "Strategies for Addressing Model Weaknesses": [[367, "strategies-for-addressing-model-weaknesses"], [368, "strategies-for-addressing-model-weaknesses"], [369, "strategies-for-addressing-model-weaknesses"]], "Subsampling": [[6, null], [328, "subsampling"]], "Subsampling and Data Drift": [[328, null]], "Summary Statistics": [[324, "summary-statistics"]], "Supervised Learning for Residual Analysis": [[366, "supervised-learning-for-residual-analysis"]], "Supervised Machine Learning: Random Forest Clustering": [[367, "supervised-machine-learning-random-forest-clustering"], [369, "supervised-machine-learning-random-forest-clustering"]], "Techniques for Residual Analysis": [[366, "techniques-for-residual-analysis"]], "Test Error:": [[365, "test-error"]], "Test Suite": [[312, null]], "The Waterfall plot": [[338, "the-waterfall-plot"]], "Theoretical Framework": [[365, "theoretical-framework"]], "Threshold Adjustment": [[364, "threshold-adjustment"]], "Track Experiments": [[352, "track-experiments"]], "Tradeoffs Between Performance and Fairness": [[364, "tradeoffs-between-performance-and-fairness"]], "Train all models and show leaderboard": [[49, "train-all-models-and-show-leaderboard"]], "Train and Register Models": [[372, "train-and-register-models"]], "Train model": [[13, "train-model"], [14, "train-model"], [15, "train-model"], [16, "train-model"], [17, "train-model"], [18, "train-model"], [19, "train-model"], [20, "train-model"], [25, "train-model"], [26, "train-model"]], "Train models": [[21, "train-models"], [22, "train-models"]], "Train-Test Split Management": [[109, "train-test-split-management"]], "Training Error:": [[365, "training-error"]], "Training and Leaderboard": [[374, "training-and-leaderboard"]], "Tree Ensemble Models (Classification)": [[25, null]], "Tree Ensemble Models (Regression)": [[26, null]], "Trouble Shooting": [[107, "trouble-shooting"]], "Troubleshooting": [[345, "troubleshooting"], [350, "troubleshooting"]], "Tuning with optuna (Experimental)": [[46, null]], "Two-way ALE": [[332, "two-way-ale"]], "Two-way PDPs": [[336, "two-way-pdps"]], "Umap": [[3, "umap"]], "Underfitting and Overfitting": [[365, null]], "Unfairness mitigation": [[83, "unfairness-mitigation"]], "Univariate (1D) Plots": [[325, "univariate-1d-plots"]], "Unused API Entries": [[377, null]], "Uploading Data": [[352, "uploading-data"]], "Usage": [[332, "usage"], [333, "usage"], [334, "usage"], [335, "usage"], [336, "usage"], [337, "usage"], [338, "usage"]], "Using Modeva": [[315, null]], "Utilities": [[51, null], [312, "utilities"], [313, null]], "Validation Result": [[311, null]], "ValidationResult - Attributes": [[52, null]], "ValidationResult - Visualization": [[53, null]], "View and use outlier detection results": [[8, "view-and-use-outlier-detection-results"]], "Visualize prediction interval": [[40, "visualize-prediction-interval"]], "Visualize the residual against model prediction": [[58, "visualize-the-residual-against-model-prediction"]], "Visualize the residual against model prediction (predict proba)": [[57, "visualize-the-residual-against-model-prediction-predict-proba"]], "Visualize the residual against predictor": [[57, "visualize-the-residual-against-predictor"], [58, "visualize-the-residual-against-predictor"]], "Visualize the residual against response variable": [[57, "visualize-the-residual-against-response-variable"], [58, "visualize-the-residual-against-response-variable"]], "Wasserstein Distance": [[368, "wasserstein-distance"]], "Weakness Comparison": [[370, "weakness-comparison"]], "Weakness Detection": [[370, null]], "Weakness Detection Methods": [[365, "weakness-detection-methods"]], "Weakness Detection in MoDeVa": [[370, "weakness-detection-in-modeva"]], "Weakness Test": [[351, null]], "Weakspot Comparison": [[317, "weakspot-comparison"], [319, "weakspot-comparison"]], "Why Weakness Detection is Important": [[370, "why-weakness-detection-is-important"]], "Workflow": [[341, "workflow"], [342, "workflow"], [343, "workflow"], [344, "workflow"], [345, "workflow"], [346, "workflow"], [347, "workflow"], [348, "workflow"], [349, "workflow"], [350, "workflow"], [351, "workflow"]], "Wrap the PySpark model into Modeva": [[30, "wrap-the-pyspark-model-into-modeva"]], "Wrap the data": [[30, "wrap-the-data"]], "Wrap the data into Modeva": [[29, "wrap-the-data-into-modeva"], [31, "wrap-the-data-into-modeva"], [32, "wrap-the-data-into-modeva"], [33, "wrap-the-data-into-modeva"], [34, "wrap-the-data-into-modeva"], [35, "wrap-the-data-into-modeva"]], "Wrap the model into Modeva": [[29, "wrap-the-model-into-modeva"], [31, "wrap-the-model-into-modeva"], [32, "wrap-the-model-into-modeva"], [33, "wrap-the-model-into-modeva"]], "Wrapping Arbitrary Classifier": [[32, null]], "Wrapping Arbitrary Regressor": [[33, null]], "Wrapping H2O Models": [[29, null]], "Wrapping PySpark Models": [[30, null]], "Wrapping Scored Classifier": [[34, null]], "Wrapping Scored Regressor": [[35, null]], "Wrapping sklearn-style Models": [[31, null]], "XGB-PFI based feature selection": [[4, "xgb-pfi-based-feature-selection"]], "XI Correlation": [[3, "xi-correlation"]], "modeva.DataSet.all_feature_names": [[110, null]], "modeva.DataSet.all_feature_types": [[111, null]], "modeva.DataSet.bin_numerical": [[112, null]], "modeva.DataSet.data": [[113, null]], "modeva.DataSet.data_drift_test": [[114, null]], "modeva.DataSet.delete_extra_data": [[115, null]], "modeva.DataSet.delete_registered_data": [[116, null]], "modeva.DataSet.detect_outlier_cblof": [[117, null]], "modeva.DataSet.detect_outlier_isolation_forest": [[118, null]], "modeva.DataSet.detect_outlier_pca": [[119, null]], "modeva.DataSet.eda_1d": [[120, null]], "modeva.DataSet.eda_2d": [[121, null]], "modeva.DataSet.eda_3d": [[122, null]], "modeva.DataSet.eda_correlation": [[123, null]], "modeva.DataSet.eda_pca": [[124, null]], "modeva.DataSet.eda_umap": [[125, null]], "modeva.DataSet.encode_categorical": [[126, null]], "modeva.DataSet.feature_names": [[127, null]], "modeva.DataSet.feature_names_categorical": [[128, null]], "modeva.DataSet.feature_names_mixed": [[129, null]], "modeva.DataSet.feature_names_numerical": [[130, null]], "modeva.DataSet.feature_select_corr": [[131, null]], "modeva.DataSet.feature_select_rcit": [[132, null]], "modeva.DataSet.feature_select_xgbpfi": [[133, null]], "modeva.DataSet.feature_types": [[134, null]], "modeva.DataSet.get_X_y_data": [[135, null]], "modeva.DataSet.get_data": [[136, null]], "modeva.DataSet.get_data_list": [[137, null]], "modeva.DataSet.get_extra_data_list": [[138, null]], "modeva.DataSet.get_prediction_data": [[139, null]], "modeva.DataSet.get_prediction_proba_data": [[140, null]], "modeva.DataSet.get_preprocessor": [[141, null]], "modeva.DataSet.get_protected_data": [[142, null]], "modeva.DataSet.get_raw_data": [[143, null]], "modeva.DataSet.impute_missing": [[144, null]], "modeva.DataSet.inverse_transform": [[145, null]], "modeva.DataSet.is_splitted": [[146, null]], "modeva.DataSet.list_registered_data": [[147, null]], "modeva.DataSet.load": [[148, null]], "modeva.DataSet.load_csv": [[149, null]], "modeva.DataSet.load_dataframe": [[150, null]], "modeva.DataSet.load_dataframe_train_test": [[151, null]], "modeva.DataSet.load_preprocessing": [[152, null]], "modeva.DataSet.load_registered_data": [[153, null]], "modeva.DataSet.load_spark": [[154, null]], "modeva.DataSet.n_features": [[155, null]], "modeva.DataSet.name": [[156, null]], "modeva.DataSet.prediction": [[157, null]], "modeva.DataSet.preprocess": [[158, null]], "modeva.DataSet.raw_data": [[159, null]], "modeva.DataSet.register": [[160, null]], "modeva.DataSet.reset_preprocess": [[161, null]], "modeva.DataSet.sample_weight": [[162, null]], "modeva.DataSet.save_preprocessing": [[163, null]], "modeva.DataSet.scale_numerical": [[164, null]], "modeva.DataSet.set_active_features": [[165, null]], "modeva.DataSet.set_feature_type": [[166, null]], "modeva.DataSet.set_inactive_features": [[167, null]], "modeva.DataSet.set_prediction": [[168, null]], "modeva.DataSet.set_prediction_proba": [[169, null]], "modeva.DataSet.set_protected_data": [[170, null]], "modeva.DataSet.set_protected_extra_data": [[171, null]], "modeva.DataSet.set_random_split": [[172, null]], "modeva.DataSet.set_raw_extra_data": [[173, null]], "modeva.DataSet.set_sample_weight": [[174, null]], "modeva.DataSet.set_target": [[175, null]], "modeva.DataSet.set_task_type": [[176, null]], "modeva.DataSet.set_test_idx": [[177, null]], "modeva.DataSet.set_train_idx": [[178, null]], "modeva.DataSet.shape": [[179, null]], "modeva.DataSet.subsample_random": [[180, null]], "modeva.DataSet.summary": [[181, null]], "modeva.DataSet.task_type": [[182, null]], "modeva.DataSet.test_prediction": [[183, null]], "modeva.DataSet.test_sample_weight": [[184, null]], "modeva.DataSet.test_x": [[185, null]], "modeva.DataSet.test_y": [[186, null]], "modeva.DataSet.to_df": [[187, null]], "modeva.DataSet.train_prediction": [[188, null]], "modeva.DataSet.train_sample_weight": [[189, null]], "modeva.DataSet.train_x": [[190, null]], "modeva.DataSet.train_y": [[191, null]], "modeva.DataSet.transform": [[192, null]], "modeva.DataSet.x": [[193, null]], "modeva.DataSet.y": [[194, null]], "modeva.ModelZoo.add_model": [[195, null]], "modeva.ModelZoo.dataset": [[196, null]], "modeva.ModelZoo.delete_registered_model": [[197, null]], "modeva.ModelZoo.get_model": [[198, null]], "modeva.ModelZoo.leaderboard": [[199, null]], "modeva.ModelZoo.list_model_names": [[200, null]], "modeva.ModelZoo.list_registered_models": [[201, null]], "modeva.ModelZoo.load_registered_model": [[202, null]], "modeva.ModelZoo.models": [[203, null]], "modeva.ModelZoo.register": [[204, null]], "modeva.ModelZoo.train": [[205, null]], "modeva.ModelZoo.train_all": [[206, null]], "modeva.TestSuite.compare_accuracy_table": [[207, null]], "modeva.TestSuite.compare_fairness": [[208, null]], "modeva.TestSuite.compare_reliability": [[209, null]], "modeva.TestSuite.compare_resilience": [[210, null]], "modeva.TestSuite.compare_robustness": [[211, null]], "modeva.TestSuite.compare_slicing_accuracy": [[212, null]], "modeva.TestSuite.compare_slicing_fairness": [[213, null]], "modeva.TestSuite.compare_slicing_overfit": [[214, null]], "modeva.TestSuite.compare_slicing_reliability": [[215, null]], "modeva.TestSuite.compare_slicing_robustness": [[216, null]], "modeva.TestSuite.delete_registed_test": [[217, null]], "modeva.TestSuite.diagnose_accuracy_table": [[218, null]], "modeva.TestSuite.diagnose_fairness": [[219, null]], "modeva.TestSuite.diagnose_mitigate_unfair_binning": [[220, null]], "modeva.TestSuite.diagnose_mitigate_unfair_thresholding": [[221, null]], "modeva.TestSuite.diagnose_reliability": [[222, null]], "modeva.TestSuite.diagnose_residual_analysis": [[223, null]], "modeva.TestSuite.diagnose_residual_cluster": [[224, null]], "modeva.TestSuite.diagnose_residual_interpret": [[225, null]], "modeva.TestSuite.diagnose_resilience": [[226, null]], "modeva.TestSuite.diagnose_robustness": [[227, null]], "modeva.TestSuite.diagnose_slicing_accuracy": [[228, null]], "modeva.TestSuite.diagnose_slicing_fairness": [[229, null]], "modeva.TestSuite.diagnose_slicing_overfit": [[230, null]], "modeva.TestSuite.diagnose_slicing_reliability": [[231, null]], "modeva.TestSuite.diagnose_slicing_robustness": [[232, null]], "modeva.TestSuite.display_test_results": [[233, null]], "modeva.TestSuite.explain_ale": [[234, null]], "modeva.TestSuite.explain_hstatistic": [[235, null]], "modeva.TestSuite.explain_lime": [[236, null]], "modeva.TestSuite.explain_pdp": [[237, null]], "modeva.TestSuite.explain_pfi": [[238, null]], "modeva.TestSuite.explain_shap": [[239, null]], "modeva.TestSuite.export_report": [[240, null]], "modeva.TestSuite.get_dataset": [[241, null]], "modeva.TestSuite.get_interactions": [[242, null]], "modeva.TestSuite.get_main_effects": [[243, null]], "modeva.TestSuite.get_model": [[244, null]], "modeva.TestSuite.interpret_coef": [[245, null]], "modeva.TestSuite.interpret_effects": [[246, null]], "modeva.TestSuite.interpret_effects_moe_average": [[247, null]], "modeva.TestSuite.interpret_fi": [[248, null]], "modeva.TestSuite.interpret_global_tree": [[249, null]], "modeva.TestSuite.interpret_llm_pc": [[250, null]], "modeva.TestSuite.interpret_llm_profile": [[251, null]], "modeva.TestSuite.interpret_llm_summary": [[252, null]], "modeva.TestSuite.interpret_llm_violin": [[253, null]], "modeva.TestSuite.interpret_local_fi": [[254, null]], "modeva.TestSuite.interpret_local_linear_fi": [[255, null]], "modeva.TestSuite.interpret_local_moe_weights": [[256, null]], "modeva.TestSuite.interpret_local_tree": [[257, null]], "modeva.TestSuite.interpret_moe_cluster_analysis": [[258, null]], "modeva.TestSuite.list": [[259, null]], "modeva.TestSuite.list_registered_tests": [[260, null]], "modeva.TestSuite.load_registered_test": [[261, null]], "modeva.TestSuite.register": [[262, null]], "modeva.TestSuite.set_dataset": [[263, null]], "modeva.TestSuite.set_model": [[264, null]], "modeva.automation.pipeline.Pipeline": [[265, null]], "modeva.models.MoCatBoostClassifier": [[266, null]], "modeva.models.MoCatBoostRegressor": [[267, null]], "modeva.models.MoClassifier": [[268, null]], "modeva.models.MoDecisionTreeClassifier": [[269, null]], "modeva.models.MoDecisionTreeRegressor": [[270, null]], "modeva.models.MoElasticNet": [[271, null]], "modeva.models.MoGAMINetClassifier": [[272, null]], "modeva.models.MoGAMINetRegressor": [[273, null]], "modeva.models.MoGLMTreeBoostClassifier": [[274, null]], "modeva.models.MoGLMTreeBoostRegressor": [[275, null]], "modeva.models.MoGLMTreeClassifier": [[276, null]], "modeva.models.MoGLMTreeRegressor": [[277, null]], "modeva.models.MoGradientBoostingClassifier": [[278, null]], "modeva.models.MoGradientBoostingRegressor": [[279, null]], "modeva.models.MoLGBMClassifier": [[280, null]], "modeva.models.MoLGBMRegressor": [[281, null]], "modeva.models.MoLogisticRegression": [[282, null]], "modeva.models.MoMoEClassifier": [[283, null]], "modeva.models.MoMoERegressor": [[284, null]], "modeva.models.MoNeuralTreeClassifier": [[285, null]], "modeva.models.MoNeuralTreeRegressor": [[286, null]], "modeva.models.MoRandomForestClassifier": [[287, null]], "modeva.models.MoRandomForestRegressor": [[288, null]], "modeva.models.MoReLUDNNClassifier": [[289, null]], "modeva.models.MoReLUDNNRegressor": [[290, null]], "modeva.models.MoRegressor": [[291, null]], "modeva.models.MoSKLearnClassifier": [[292, null]], "modeva.models.MoSKLearnRegressor": [[293, null]], "modeva.models.MoScoredClassifier": [[294, null]], "modeva.models.MoScoredRegressor": [[295, null]], "modeva.models.MoXGBClassifier": [[296, null]], "modeva.models.MoXGBRegressor": [[297, null]], "modeva.models.ModelTuneGridSearch": [[298, null]], "modeva.models.ModelTuneOptuna": [[299, null]], "modeva.models.ModelTunePSO": [[300, null]], "modeva.models.ModelTuneRandomSearch": [[301, null]], "modeva.testsuite.utils.slicing_utils.get_data_info": [[302, null]], "modeva.utils.mlflow.clear_mlflow_home": [[303, null]], "modeva.utils.mlflow.get_mlflow_home": [[304, null]], "modeva.utils.mlflow.set_mlflow_home": [[305, null]], "modeva.utils.results.ValidationResult": [[306, null]], "sphinx_gallery.backreferences": [[94, null]], "sphinx_gallery.block_parser": [[95, null]], "sphinx_gallery.directives": [[96, null]], "sphinx_gallery.docs_resolv": [[97, null]], "sphinx_gallery.downloads": [[98, null]], "sphinx_gallery.gen_gallery": [[99, null]], "sphinx_gallery.gen_rst": [[100, null]], "sphinx_gallery.interactive_example": [[101, null]], "sphinx_gallery.notebook": [[102, null]], "sphinx_gallery.py_source_parser": [[103, null]], "sphinx_gallery.scrapers": [[104, null]], "sphinx_gallery.sorting": [[105, null]], "sphinx_gallery.utils.optipng": [[106, null]]}, "docnames": ["_source/api_ref", "_source/auto_galleries/data/index", "_source/auto_galleries/data/plot_0_data_operations", "_source/auto_galleries/data/plot_1_eda", "_source/auto_galleries/data/plot_2_feature_selection", "_source/auto_galleries/data/plot_3_feature_engineering", "_source/auto_galleries/data/plot_4_subsampling", "_source/auto_galleries/data/plot_5_drift_test", "_source/auto_galleries/data/plot_6_outlier_detection", "_source/auto_galleries/data/plot_7_data_with_prediction", "_source/auto_galleries/data/plot_8_extra_data", "_source/auto_galleries/data/sg_execution_times", "_source/auto_galleries/dev/0_models/index", "_source/auto_galleries/dev/0_models/plot_0_glm_cls", "_source/auto_galleries/dev/0_models/plot_0_glm_reg", "_source/auto_galleries/dev/0_models/plot_1_dt_cls", "_source/auto_galleries/dev/0_models/plot_1_dt_reg", "_source/auto_galleries/dev/0_models/plot_2_reludnn_cls", "_source/auto_galleries/dev/0_models/plot_2_reludnn_reg", "_source/auto_galleries/dev/0_models/plot_3_gaminet_cls", "_source/auto_galleries/dev/0_models/plot_3_gaminet_reg", "_source/auto_galleries/dev/0_models/plot_4_moe_cls", "_source/auto_galleries/dev/0_models/plot_4_moe_reg", "_source/auto_galleries/dev/0_models/plot_5_lineartree_cls", "_source/auto_galleries/dev/0_models/plot_5_lineartree_reg", "_source/auto_galleries/dev/0_models/plot_6_const_tree_cls", "_source/auto_galleries/dev/0_models/plot_6_const_tree_reg", "_source/auto_galleries/dev/0_models/sg_execution_times", "_source/auto_galleries/dev/1_extmodels/index", "_source/auto_galleries/dev/1_extmodels/noplot_3_h2o", "_source/auto_galleries/dev/1_extmodels/noplot_4_spark", "_source/auto_galleries/dev/1_extmodels/plot_0_sklearn", "_source/auto_galleries/dev/1_extmodels/plot_1_arbitrary_cls", "_source/auto_galleries/dev/1_extmodels/plot_1_arbitrary_reg", "_source/auto_galleries/dev/1_extmodels/plot_2_scored_cls", "_source/auto_galleries/dev/1_extmodels/plot_2_scored_reg", "_source/auto_galleries/dev/1_extmodels/sg_execution_times", "_source/auto_galleries/dev/2_calibration/index", "_source/auto_galleries/dev/2_calibration/plot_0_calibrate_proba", "_source/auto_galleries/dev/2_calibration/plot_0_pred_interval_cls", "_source/auto_galleries/dev/2_calibration/plot_0_pred_interval_reg", "_source/auto_galleries/dev/2_calibration/sg_execution_times", "_source/auto_galleries/dev/3_hpo/index", "_source/auto_galleries/dev/3_hpo/plot_0_grid", "_source/auto_galleries/dev/3_hpo/plot_1_random", "_source/auto_galleries/dev/3_hpo/plot_2_pso", "_source/auto_galleries/dev/3_hpo/plot_3_optuna", "_source/auto_galleries/dev/3_hpo/sg_execution_times", "_source/auto_galleries/dev/index", "_source/auto_galleries/dev/plot_0_modelzoo", "_source/auto_galleries/dev/sg_execution_times", "_source/auto_galleries/util/index", "_source/auto_galleries/util/plot_0_valres_attributes", "_source/auto_galleries/util/plot_1_valres_save", "_source/auto_galleries/util/plot_2_pipeline", "_source/auto_galleries/util/sg_execution_times", "_source/auto_galleries/val/0_residual/index", "_source/auto_galleries/val/0_residual/plot_1_residual_cls", "_source/auto_galleries/val/0_residual/plot_1_residual_reg", "_source/auto_galleries/val/0_residual/sg_execution_times", "_source/auto_galleries/val/1_performance/index", "_source/auto_galleries/val/1_performance/plot_0_accuracy_table_cls", "_source/auto_galleries/val/1_performance/plot_0_accuracy_table_reg", "_source/auto_galleries/val/1_performance/plot_1_slice_accuracy_cls", "_source/auto_galleries/val/1_performance/plot_1_slice_accuracy_reg", "_source/auto_galleries/val/1_performance/sg_execution_times", "_source/auto_galleries/val/2_overfitting/index", "_source/auto_galleries/val/2_overfitting/plot_0_slice_overfit_cls", "_source/auto_galleries/val/2_overfitting/plot_1_slice_overfit_reg", "_source/auto_galleries/val/2_overfitting/sg_execution_times", "_source/auto_galleries/val/3_reliability/index", "_source/auto_galleries/val/3_reliability/plot_0_reliability_cls", "_source/auto_galleries/val/3_reliability/plot_1_reliability_reg", "_source/auto_galleries/val/3_reliability/sg_execution_times", "_source/auto_galleries/val/4_resilience/index", "_source/auto_galleries/val/4_resilience/plot_0_resilience_cls", "_source/auto_galleries/val/4_resilience/plot_1_resilience_reg", "_source/auto_galleries/val/4_resilience/sg_execution_times", "_source/auto_galleries/val/5_robustness/index", "_source/auto_galleries/val/5_robustness/plot_0_robustness_cls", "_source/auto_galleries/val/5_robustness/plot_1_robustness_reg", "_source/auto_galleries/val/5_robustness/sg_execution_times", "_source/auto_galleries/val/6_fairness/index", "_source/auto_galleries/val/6_fairness/plot_0_fairness_cls", "_source/auto_galleries/val/6_fairness/sg_execution_times", "_source/auto_galleries/val/7_explainability/index", "_source/auto_galleries/val/7_explainability/plot_0_global_explain", "_source/auto_galleries/val/7_explainability/plot_1_local_explain", "_source/auto_galleries/val/7_explainability/sg_execution_times", "_source/auto_galleries/val/index", "_source/auto_galleries/val/sg_execution_times", "_source/changes", "_source/faq", "_source/galleries", "_source/gen_modules/sphinx_gallery.backreferences", "_source/gen_modules/sphinx_gallery.block_parser", "_source/gen_modules/sphinx_gallery.directives", "_source/gen_modules/sphinx_gallery.docs_resolv", "_source/gen_modules/sphinx_gallery.downloads", "_source/gen_modules/sphinx_gallery.gen_gallery", "_source/gen_modules/sphinx_gallery.gen_rst", "_source/gen_modules/sphinx_gallery.interactive_example", "_source/gen_modules/sphinx_gallery.notebook", "_source/gen_modules/sphinx_gallery.py_source_parser", "_source/gen_modules/sphinx_gallery.scrapers", "_source/gen_modules/sphinx_gallery.sorting", "_source/gen_modules/sphinx_gallery.utils.optipng", "_source/install", "_source/lowcode-gallery", "_source/modules/data", "_source/modules/generated/modeva.DataSet.all_feature_names", "_source/modules/generated/modeva.DataSet.all_feature_types", "_source/modules/generated/modeva.DataSet.bin_numerical", "_source/modules/generated/modeva.DataSet.data", "_source/modules/generated/modeva.DataSet.data_drift_test", "_source/modules/generated/modeva.DataSet.delete_extra_data", "_source/modules/generated/modeva.DataSet.delete_registered_data", "_source/modules/generated/modeva.DataSet.detect_outlier_cblof", "_source/modules/generated/modeva.DataSet.detect_outlier_isolation_forest", "_source/modules/generated/modeva.DataSet.detect_outlier_pca", "_source/modules/generated/modeva.DataSet.eda_1d", "_source/modules/generated/modeva.DataSet.eda_2d", "_source/modules/generated/modeva.DataSet.eda_3d", "_source/modules/generated/modeva.DataSet.eda_correlation", "_source/modules/generated/modeva.DataSet.eda_pca", "_source/modules/generated/modeva.DataSet.eda_umap", "_source/modules/generated/modeva.DataSet.encode_categorical", "_source/modules/generated/modeva.DataSet.feature_names", "_source/modules/generated/modeva.DataSet.feature_names_categorical", "_source/modules/generated/modeva.DataSet.feature_names_mixed", "_source/modules/generated/modeva.DataSet.feature_names_numerical", "_source/modules/generated/modeva.DataSet.feature_select_corr", "_source/modules/generated/modeva.DataSet.feature_select_rcit", "_source/modules/generated/modeva.DataSet.feature_select_xgbpfi", "_source/modules/generated/modeva.DataSet.feature_types", "_source/modules/generated/modeva.DataSet.get_X_y_data", "_source/modules/generated/modeva.DataSet.get_data", "_source/modules/generated/modeva.DataSet.get_data_list", "_source/modules/generated/modeva.DataSet.get_extra_data_list", "_source/modules/generated/modeva.DataSet.get_prediction_data", "_source/modules/generated/modeva.DataSet.get_prediction_proba_data", "_source/modules/generated/modeva.DataSet.get_preprocessor", "_source/modules/generated/modeva.DataSet.get_protected_data", "_source/modules/generated/modeva.DataSet.get_raw_data", "_source/modules/generated/modeva.DataSet.impute_missing", "_source/modules/generated/modeva.DataSet.inverse_transform", "_source/modules/generated/modeva.DataSet.is_splitted", "_source/modules/generated/modeva.DataSet.list_registered_data", "_source/modules/generated/modeva.DataSet.load", "_source/modules/generated/modeva.DataSet.load_csv", "_source/modules/generated/modeva.DataSet.load_dataframe", "_source/modules/generated/modeva.DataSet.load_dataframe_train_test", "_source/modules/generated/modeva.DataSet.load_preprocessing", "_source/modules/generated/modeva.DataSet.load_registered_data", "_source/modules/generated/modeva.DataSet.load_spark", "_source/modules/generated/modeva.DataSet.n_features", "_source/modules/generated/modeva.DataSet.name", "_source/modules/generated/modeva.DataSet.prediction", "_source/modules/generated/modeva.DataSet.preprocess", "_source/modules/generated/modeva.DataSet.raw_data", "_source/modules/generated/modeva.DataSet.register", "_source/modules/generated/modeva.DataSet.reset_preprocess", "_source/modules/generated/modeva.DataSet.sample_weight", "_source/modules/generated/modeva.DataSet.save_preprocessing", "_source/modules/generated/modeva.DataSet.scale_numerical", "_source/modules/generated/modeva.DataSet.set_active_features", "_source/modules/generated/modeva.DataSet.set_feature_type", "_source/modules/generated/modeva.DataSet.set_inactive_features", "_source/modules/generated/modeva.DataSet.set_prediction", "_source/modules/generated/modeva.DataSet.set_prediction_proba", "_source/modules/generated/modeva.DataSet.set_protected_data", "_source/modules/generated/modeva.DataSet.set_protected_extra_data", "_source/modules/generated/modeva.DataSet.set_random_split", "_source/modules/generated/modeva.DataSet.set_raw_extra_data", "_source/modules/generated/modeva.DataSet.set_sample_weight", "_source/modules/generated/modeva.DataSet.set_target", "_source/modules/generated/modeva.DataSet.set_task_type", "_source/modules/generated/modeva.DataSet.set_test_idx", "_source/modules/generated/modeva.DataSet.set_train_idx", "_source/modules/generated/modeva.DataSet.shape", "_source/modules/generated/modeva.DataSet.subsample_random", "_source/modules/generated/modeva.DataSet.summary", "_source/modules/generated/modeva.DataSet.task_type", "_source/modules/generated/modeva.DataSet.test_prediction", "_source/modules/generated/modeva.DataSet.test_sample_weight", "_source/modules/generated/modeva.DataSet.test_x", "_source/modules/generated/modeva.DataSet.test_y", "_source/modules/generated/modeva.DataSet.to_df", "_source/modules/generated/modeva.DataSet.train_prediction", "_source/modules/generated/modeva.DataSet.train_sample_weight", "_source/modules/generated/modeva.DataSet.train_x", "_source/modules/generated/modeva.DataSet.train_y", "_source/modules/generated/modeva.DataSet.transform", "_source/modules/generated/modeva.DataSet.x", "_source/modules/generated/modeva.DataSet.y", "_source/modules/generated/modeva.ModelZoo.add_model", "_source/modules/generated/modeva.ModelZoo.dataset", "_source/modules/generated/modeva.ModelZoo.delete_registered_model", "_source/modules/generated/modeva.ModelZoo.get_model", "_source/modules/generated/modeva.ModelZoo.leaderboard", "_source/modules/generated/modeva.ModelZoo.list_model_names", "_source/modules/generated/modeva.ModelZoo.list_registered_models", "_source/modules/generated/modeva.ModelZoo.load_registered_model", "_source/modules/generated/modeva.ModelZoo.models", "_source/modules/generated/modeva.ModelZoo.register", "_source/modules/generated/modeva.ModelZoo.train", "_source/modules/generated/modeva.ModelZoo.train_all", "_source/modules/generated/modeva.TestSuite.compare_accuracy_table", "_source/modules/generated/modeva.TestSuite.compare_fairness", "_source/modules/generated/modeva.TestSuite.compare_reliability", "_source/modules/generated/modeva.TestSuite.compare_resilience", "_source/modules/generated/modeva.TestSuite.compare_robustness", "_source/modules/generated/modeva.TestSuite.compare_slicing_accuracy", "_source/modules/generated/modeva.TestSuite.compare_slicing_fairness", "_source/modules/generated/modeva.TestSuite.compare_slicing_overfit", "_source/modules/generated/modeva.TestSuite.compare_slicing_reliability", "_source/modules/generated/modeva.TestSuite.compare_slicing_robustness", "_source/modules/generated/modeva.TestSuite.delete_registed_test", "_source/modules/generated/modeva.TestSuite.diagnose_accuracy_table", "_source/modules/generated/modeva.TestSuite.diagnose_fairness", "_source/modules/generated/modeva.TestSuite.diagnose_mitigate_unfair_binning", "_source/modules/generated/modeva.TestSuite.diagnose_mitigate_unfair_thresholding", "_source/modules/generated/modeva.TestSuite.diagnose_reliability", "_source/modules/generated/modeva.TestSuite.diagnose_residual_analysis", "_source/modules/generated/modeva.TestSuite.diagnose_residual_cluster", "_source/modules/generated/modeva.TestSuite.diagnose_residual_interpret", "_source/modules/generated/modeva.TestSuite.diagnose_resilience", "_source/modules/generated/modeva.TestSuite.diagnose_robustness", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_accuracy", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_fairness", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_overfit", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_reliability", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_robustness", "_source/modules/generated/modeva.TestSuite.display_test_results", "_source/modules/generated/modeva.TestSuite.explain_ale", "_source/modules/generated/modeva.TestSuite.explain_hstatistic", "_source/modules/generated/modeva.TestSuite.explain_lime", "_source/modules/generated/modeva.TestSuite.explain_pdp", "_source/modules/generated/modeva.TestSuite.explain_pfi", "_source/modules/generated/modeva.TestSuite.explain_shap", "_source/modules/generated/modeva.TestSuite.export_report", "_source/modules/generated/modeva.TestSuite.get_dataset", "_source/modules/generated/modeva.TestSuite.get_interactions", "_source/modules/generated/modeva.TestSuite.get_main_effects", "_source/modules/generated/modeva.TestSuite.get_model", "_source/modules/generated/modeva.TestSuite.interpret_coef", "_source/modules/generated/modeva.TestSuite.interpret_effects", "_source/modules/generated/modeva.TestSuite.interpret_effects_moe_average", "_source/modules/generated/modeva.TestSuite.interpret_fi", "_source/modules/generated/modeva.TestSuite.interpret_global_tree", "_source/modules/generated/modeva.TestSuite.interpret_llm_pc", "_source/modules/generated/modeva.TestSuite.interpret_llm_profile", "_source/modules/generated/modeva.TestSuite.interpret_llm_summary", "_source/modules/generated/modeva.TestSuite.interpret_llm_violin", "_source/modules/generated/modeva.TestSuite.interpret_local_fi", "_source/modules/generated/modeva.TestSuite.interpret_local_linear_fi", "_source/modules/generated/modeva.TestSuite.interpret_local_moe_weights", "_source/modules/generated/modeva.TestSuite.interpret_local_tree", "_source/modules/generated/modeva.TestSuite.interpret_moe_cluster_analysis", "_source/modules/generated/modeva.TestSuite.list", "_source/modules/generated/modeva.TestSuite.list_registered_tests", "_source/modules/generated/modeva.TestSuite.load_registered_test", "_source/modules/generated/modeva.TestSuite.register", "_source/modules/generated/modeva.TestSuite.set_dataset", "_source/modules/generated/modeva.TestSuite.set_model", "_source/modules/generated/modeva.automation.pipeline.Pipeline", "_source/modules/generated/modeva.models.MoCatBoostClassifier", "_source/modules/generated/modeva.models.MoCatBoostRegressor", "_source/modules/generated/modeva.models.MoClassifier", "_source/modules/generated/modeva.models.MoDecisionTreeClassifier", "_source/modules/generated/modeva.models.MoDecisionTreeRegressor", "_source/modules/generated/modeva.models.MoElasticNet", "_source/modules/generated/modeva.models.MoGAMINetClassifier", "_source/modules/generated/modeva.models.MoGAMINetRegressor", "_source/modules/generated/modeva.models.MoGLMTreeBoostClassifier", "_source/modules/generated/modeva.models.MoGLMTreeBoostRegressor", "_source/modules/generated/modeva.models.MoGLMTreeClassifier", "_source/modules/generated/modeva.models.MoGLMTreeRegressor", "_source/modules/generated/modeva.models.MoGradientBoostingClassifier", "_source/modules/generated/modeva.models.MoGradientBoostingRegressor", "_source/modules/generated/modeva.models.MoLGBMClassifier", "_source/modules/generated/modeva.models.MoLGBMRegressor", "_source/modules/generated/modeva.models.MoLogisticRegression", "_source/modules/generated/modeva.models.MoMoEClassifier", "_source/modules/generated/modeva.models.MoMoERegressor", "_source/modules/generated/modeva.models.MoNeuralTreeClassifier", "_source/modules/generated/modeva.models.MoNeuralTreeRegressor", "_source/modules/generated/modeva.models.MoRandomForestClassifier", "_source/modules/generated/modeva.models.MoRandomForestRegressor", "_source/modules/generated/modeva.models.MoReLUDNNClassifier", "_source/modules/generated/modeva.models.MoReLUDNNRegressor", "_source/modules/generated/modeva.models.MoRegressor", "_source/modules/generated/modeva.models.MoSKLearnClassifier", "_source/modules/generated/modeva.models.MoSKLearnRegressor", "_source/modules/generated/modeva.models.MoScoredClassifier", "_source/modules/generated/modeva.models.MoScoredRegressor", "_source/modules/generated/modeva.models.MoXGBClassifier", "_source/modules/generated/modeva.models.MoXGBRegressor", "_source/modules/generated/modeva.models.ModelTuneGridSearch", "_source/modules/generated/modeva.models.ModelTuneOptuna", "_source/modules/generated/modeva.models.ModelTunePSO", "_source/modules/generated/modeva.models.ModelTuneRandomSearch", "_source/modules/generated/modeva.testsuite.utils.slicing_utils.get_data_info", "_source/modules/generated/modeva.utils.mlflow.clear_mlflow_home", "_source/modules/generated/modeva.utils.mlflow.get_mlflow_home", "_source/modules/generated/modeva.utils.mlflow.set_mlflow_home", "_source/modules/generated/modeva.utils.results.ValidationResult", "_source/modules/hpo", "_source/modules/models", "_source/modules/modelzoo", "_source/modules/pipeline", "_source/modules/results", "_source/modules/testsuite", "_source/modules/utilities", "_source/modules/wrappers", "_source/usage", "_source/user_guide/compare", "_source/user_guide/compare/compare_classification", "_source/user_guide/compare/compare_fairness", "_source/user_guide/compare/compare_regression", "_source/user_guide/data", "_source/user_guide/data/data_basic_operations", "_source/user_guide/data/data_quality_drift", "_source/user_guide/data/data_quality_outlier", "_source/user_guide/data/data_summary", "_source/user_guide/data/eda", "_source/user_guide/data/feature_select", "_source/user_guide/data/outlier_detect", "_source/user_guide/data/subsample", "_source/user_guide/explain", "_source/user_guide/explain/Global", "_source/user_guide/explain/Local", "_source/user_guide/explain/ale", "_source/user_guide/explain/hstats", "_source/user_guide/explain/ice", "_source/user_guide/explain/lime", "_source/user_guide/explain/pdp", "_source/user_guide/explain/pfi", "_source/user_guide/explain/shap", "_source/user_guide/introduction", "_source/user_guide/low_code", "_source/user_guide/low_code/data_process", "_source/user_guide/low_code/data_summary", "_source/user_guide/low_code/eda_2d", "_source/user_guide/low_code/eda_3d", "_source/user_guide/low_code/eda_multivariate", "_source/user_guide/low_code/model_compare", "_source/user_guide/low_code/model_explainability", "_source/user_guide/low_code/model_test", "_source/user_guide/low_code/model_train", "_source/user_guide/low_code/model_tune", "_source/user_guide/low_code/model_weakness", "_source/user_guide/low_code/registry_hub", "_source/user_guide/models", "_source/user_guide/models/gaminet", "_source/user_guide/models/gbdt", "_source/user_guide/models/gblt", "_source/user_guide/models/glm", "_source/user_guide/models/moe", "_source/user_guide/models/neuraltree", "_source/user_guide/models/reludnn", "_source/user_guide/models/tree", "_source/user_guide/modelwrapping", "_source/user_guide/testing", "_source/user_guide/testing/fairness", "_source/user_guide/testing/overfit", "_source/user_guide/testing/performance", "_source/user_guide/testing/reliability", "_source/user_guide/testing/resilience", "_source/user_guide/testing/robustness", "_source/user_guide/testing/weakspot", "_source/user_guide/train", "_source/user_guide/wrapping/h2o", "_source/user_guide/wrapping/hpo", "_source/user_guide/wrapping/modelzoo", "_source/user_guide/wrapping/wrappers", "index", "sg_api_usage", "sg_execution_times"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2}, "filenames": ["_source/api_ref.rst", "_source/auto_galleries/data/index.rst", "_source/auto_galleries/data/plot_0_data_operations.rst", "_source/auto_galleries/data/plot_1_eda.rst", "_source/auto_galleries/data/plot_2_feature_selection.rst", "_source/auto_galleries/data/plot_3_feature_engineering.rst", "_source/auto_galleries/data/plot_4_subsampling.rst", "_source/auto_galleries/data/plot_5_drift_test.rst", "_source/auto_galleries/data/plot_6_outlier_detection.rst", "_source/auto_galleries/data/plot_7_data_with_prediction.rst", "_source/auto_galleries/data/plot_8_extra_data.rst", "_source/auto_galleries/data/sg_execution_times.rst", "_source/auto_galleries/dev/0_models/index.rst", "_source/auto_galleries/dev/0_models/plot_0_glm_cls.rst", "_source/auto_galleries/dev/0_models/plot_0_glm_reg.rst", "_source/auto_galleries/dev/0_models/plot_1_dt_cls.rst", "_source/auto_galleries/dev/0_models/plot_1_dt_reg.rst", "_source/auto_galleries/dev/0_models/plot_2_reludnn_cls.rst", "_source/auto_galleries/dev/0_models/plot_2_reludnn_reg.rst", "_source/auto_galleries/dev/0_models/plot_3_gaminet_cls.rst", "_source/auto_galleries/dev/0_models/plot_3_gaminet_reg.rst", "_source/auto_galleries/dev/0_models/plot_4_moe_cls.rst", "_source/auto_galleries/dev/0_models/plot_4_moe_reg.rst", "_source/auto_galleries/dev/0_models/plot_5_lineartree_cls.rst", "_source/auto_galleries/dev/0_models/plot_5_lineartree_reg.rst", "_source/auto_galleries/dev/0_models/plot_6_const_tree_cls.rst", "_source/auto_galleries/dev/0_models/plot_6_const_tree_reg.rst", "_source/auto_galleries/dev/0_models/sg_execution_times.rst", "_source/auto_galleries/dev/1_extmodels/index.rst", "_source/auto_galleries/dev/1_extmodels/noplot_3_h2o.rst", "_source/auto_galleries/dev/1_extmodels/noplot_4_spark.rst", "_source/auto_galleries/dev/1_extmodels/plot_0_sklearn.rst", "_source/auto_galleries/dev/1_extmodels/plot_1_arbitrary_cls.rst", "_source/auto_galleries/dev/1_extmodels/plot_1_arbitrary_reg.rst", "_source/auto_galleries/dev/1_extmodels/plot_2_scored_cls.rst", "_source/auto_galleries/dev/1_extmodels/plot_2_scored_reg.rst", "_source/auto_galleries/dev/1_extmodels/sg_execution_times.rst", "_source/auto_galleries/dev/2_calibration/index.rst", "_source/auto_galleries/dev/2_calibration/plot_0_calibrate_proba.rst", "_source/auto_galleries/dev/2_calibration/plot_0_pred_interval_cls.rst", "_source/auto_galleries/dev/2_calibration/plot_0_pred_interval_reg.rst", "_source/auto_galleries/dev/2_calibration/sg_execution_times.rst", "_source/auto_galleries/dev/3_hpo/index.rst", "_source/auto_galleries/dev/3_hpo/plot_0_grid.rst", "_source/auto_galleries/dev/3_hpo/plot_1_random.rst", "_source/auto_galleries/dev/3_hpo/plot_2_pso.rst", "_source/auto_galleries/dev/3_hpo/plot_3_optuna.rst", "_source/auto_galleries/dev/3_hpo/sg_execution_times.rst", "_source/auto_galleries/dev/index.rst", "_source/auto_galleries/dev/plot_0_modelzoo.rst", "_source/auto_galleries/dev/sg_execution_times.rst", "_source/auto_galleries/util/index.rst", "_source/auto_galleries/util/plot_0_valres_attributes.rst", "_source/auto_galleries/util/plot_1_valres_save.rst", "_source/auto_galleries/util/plot_2_pipeline.rst", "_source/auto_galleries/util/sg_execution_times.rst", "_source/auto_galleries/val/0_residual/index.rst", "_source/auto_galleries/val/0_residual/plot_1_residual_cls.rst", "_source/auto_galleries/val/0_residual/plot_1_residual_reg.rst", "_source/auto_galleries/val/0_residual/sg_execution_times.rst", "_source/auto_galleries/val/1_performance/index.rst", "_source/auto_galleries/val/1_performance/plot_0_accuracy_table_cls.rst", "_source/auto_galleries/val/1_performance/plot_0_accuracy_table_reg.rst", "_source/auto_galleries/val/1_performance/plot_1_slice_accuracy_cls.rst", "_source/auto_galleries/val/1_performance/plot_1_slice_accuracy_reg.rst", "_source/auto_galleries/val/1_performance/sg_execution_times.rst", "_source/auto_galleries/val/2_overfitting/index.rst", "_source/auto_galleries/val/2_overfitting/plot_0_slice_overfit_cls.rst", "_source/auto_galleries/val/2_overfitting/plot_1_slice_overfit_reg.rst", "_source/auto_galleries/val/2_overfitting/sg_execution_times.rst", "_source/auto_galleries/val/3_reliability/index.rst", "_source/auto_galleries/val/3_reliability/plot_0_reliability_cls.rst", "_source/auto_galleries/val/3_reliability/plot_1_reliability_reg.rst", "_source/auto_galleries/val/3_reliability/sg_execution_times.rst", "_source/auto_galleries/val/4_resilience/index.rst", "_source/auto_galleries/val/4_resilience/plot_0_resilience_cls.rst", "_source/auto_galleries/val/4_resilience/plot_1_resilience_reg.rst", "_source/auto_galleries/val/4_resilience/sg_execution_times.rst", "_source/auto_galleries/val/5_robustness/index.rst", "_source/auto_galleries/val/5_robustness/plot_0_robustness_cls.rst", "_source/auto_galleries/val/5_robustness/plot_1_robustness_reg.rst", "_source/auto_galleries/val/5_robustness/sg_execution_times.rst", "_source/auto_galleries/val/6_fairness/index.rst", "_source/auto_galleries/val/6_fairness/plot_0_fairness_cls.rst", "_source/auto_galleries/val/6_fairness/sg_execution_times.rst", "_source/auto_galleries/val/7_explainability/index.rst", "_source/auto_galleries/val/7_explainability/plot_0_global_explain.rst", "_source/auto_galleries/val/7_explainability/plot_1_local_explain.rst", "_source/auto_galleries/val/7_explainability/sg_execution_times.rst", "_source/auto_galleries/val/index.rst", "_source/auto_galleries/val/sg_execution_times.rst", "_source/changes.rst", "_source/faq.rst", "_source/galleries.rst", "_source/gen_modules/sphinx_gallery.backreferences.rst", "_source/gen_modules/sphinx_gallery.block_parser.rst", "_source/gen_modules/sphinx_gallery.directives.rst", "_source/gen_modules/sphinx_gallery.docs_resolv.rst", "_source/gen_modules/sphinx_gallery.downloads.rst", "_source/gen_modules/sphinx_gallery.gen_gallery.rst", "_source/gen_modules/sphinx_gallery.gen_rst.rst", "_source/gen_modules/sphinx_gallery.interactive_example.rst", "_source/gen_modules/sphinx_gallery.notebook.rst", "_source/gen_modules/sphinx_gallery.py_source_parser.rst", "_source/gen_modules/sphinx_gallery.scrapers.rst", "_source/gen_modules/sphinx_gallery.sorting.rst", "_source/gen_modules/sphinx_gallery.utils.optipng.rst", "_source/install.rst", "_source/lowcode-gallery.rst", "_source/modules/data.rst", "_source/modules/generated/modeva.DataSet.all_feature_names.rst", "_source/modules/generated/modeva.DataSet.all_feature_types.rst", "_source/modules/generated/modeva.DataSet.bin_numerical.rst", "_source/modules/generated/modeva.DataSet.data.rst", "_source/modules/generated/modeva.DataSet.data_drift_test.rst", "_source/modules/generated/modeva.DataSet.delete_extra_data.rst", "_source/modules/generated/modeva.DataSet.delete_registered_data.rst", "_source/modules/generated/modeva.DataSet.detect_outlier_cblof.rst", "_source/modules/generated/modeva.DataSet.detect_outlier_isolation_forest.rst", "_source/modules/generated/modeva.DataSet.detect_outlier_pca.rst", "_source/modules/generated/modeva.DataSet.eda_1d.rst", "_source/modules/generated/modeva.DataSet.eda_2d.rst", "_source/modules/generated/modeva.DataSet.eda_3d.rst", "_source/modules/generated/modeva.DataSet.eda_correlation.rst", "_source/modules/generated/modeva.DataSet.eda_pca.rst", "_source/modules/generated/modeva.DataSet.eda_umap.rst", "_source/modules/generated/modeva.DataSet.encode_categorical.rst", "_source/modules/generated/modeva.DataSet.feature_names.rst", "_source/modules/generated/modeva.DataSet.feature_names_categorical.rst", "_source/modules/generated/modeva.DataSet.feature_names_mixed.rst", "_source/modules/generated/modeva.DataSet.feature_names_numerical.rst", "_source/modules/generated/modeva.DataSet.feature_select_corr.rst", "_source/modules/generated/modeva.DataSet.feature_select_rcit.rst", "_source/modules/generated/modeva.DataSet.feature_select_xgbpfi.rst", "_source/modules/generated/modeva.DataSet.feature_types.rst", "_source/modules/generated/modeva.DataSet.get_X_y_data.rst", "_source/modules/generated/modeva.DataSet.get_data.rst", "_source/modules/generated/modeva.DataSet.get_data_list.rst", "_source/modules/generated/modeva.DataSet.get_extra_data_list.rst", "_source/modules/generated/modeva.DataSet.get_prediction_data.rst", "_source/modules/generated/modeva.DataSet.get_prediction_proba_data.rst", "_source/modules/generated/modeva.DataSet.get_preprocessor.rst", "_source/modules/generated/modeva.DataSet.get_protected_data.rst", "_source/modules/generated/modeva.DataSet.get_raw_data.rst", "_source/modules/generated/modeva.DataSet.impute_missing.rst", "_source/modules/generated/modeva.DataSet.inverse_transform.rst", "_source/modules/generated/modeva.DataSet.is_splitted.rst", "_source/modules/generated/modeva.DataSet.list_registered_data.rst", "_source/modules/generated/modeva.DataSet.load.rst", "_source/modules/generated/modeva.DataSet.load_csv.rst", "_source/modules/generated/modeva.DataSet.load_dataframe.rst", "_source/modules/generated/modeva.DataSet.load_dataframe_train_test.rst", "_source/modules/generated/modeva.DataSet.load_preprocessing.rst", "_source/modules/generated/modeva.DataSet.load_registered_data.rst", "_source/modules/generated/modeva.DataSet.load_spark.rst", "_source/modules/generated/modeva.DataSet.n_features.rst", "_source/modules/generated/modeva.DataSet.name.rst", "_source/modules/generated/modeva.DataSet.prediction.rst", "_source/modules/generated/modeva.DataSet.preprocess.rst", "_source/modules/generated/modeva.DataSet.raw_data.rst", "_source/modules/generated/modeva.DataSet.register.rst", "_source/modules/generated/modeva.DataSet.reset_preprocess.rst", "_source/modules/generated/modeva.DataSet.sample_weight.rst", "_source/modules/generated/modeva.DataSet.save_preprocessing.rst", "_source/modules/generated/modeva.DataSet.scale_numerical.rst", "_source/modules/generated/modeva.DataSet.set_active_features.rst", "_source/modules/generated/modeva.DataSet.set_feature_type.rst", "_source/modules/generated/modeva.DataSet.set_inactive_features.rst", "_source/modules/generated/modeva.DataSet.set_prediction.rst", "_source/modules/generated/modeva.DataSet.set_prediction_proba.rst", "_source/modules/generated/modeva.DataSet.set_protected_data.rst", "_source/modules/generated/modeva.DataSet.set_protected_extra_data.rst", "_source/modules/generated/modeva.DataSet.set_random_split.rst", "_source/modules/generated/modeva.DataSet.set_raw_extra_data.rst", "_source/modules/generated/modeva.DataSet.set_sample_weight.rst", "_source/modules/generated/modeva.DataSet.set_target.rst", "_source/modules/generated/modeva.DataSet.set_task_type.rst", "_source/modules/generated/modeva.DataSet.set_test_idx.rst", "_source/modules/generated/modeva.DataSet.set_train_idx.rst", "_source/modules/generated/modeva.DataSet.shape.rst", "_source/modules/generated/modeva.DataSet.subsample_random.rst", "_source/modules/generated/modeva.DataSet.summary.rst", "_source/modules/generated/modeva.DataSet.task_type.rst", "_source/modules/generated/modeva.DataSet.test_prediction.rst", "_source/modules/generated/modeva.DataSet.test_sample_weight.rst", "_source/modules/generated/modeva.DataSet.test_x.rst", "_source/modules/generated/modeva.DataSet.test_y.rst", "_source/modules/generated/modeva.DataSet.to_df.rst", "_source/modules/generated/modeva.DataSet.train_prediction.rst", "_source/modules/generated/modeva.DataSet.train_sample_weight.rst", "_source/modules/generated/modeva.DataSet.train_x.rst", "_source/modules/generated/modeva.DataSet.train_y.rst", "_source/modules/generated/modeva.DataSet.transform.rst", "_source/modules/generated/modeva.DataSet.x.rst", "_source/modules/generated/modeva.DataSet.y.rst", "_source/modules/generated/modeva.ModelZoo.add_model.rst", "_source/modules/generated/modeva.ModelZoo.dataset.rst", "_source/modules/generated/modeva.ModelZoo.delete_registered_model.rst", "_source/modules/generated/modeva.ModelZoo.get_model.rst", "_source/modules/generated/modeva.ModelZoo.leaderboard.rst", "_source/modules/generated/modeva.ModelZoo.list_model_names.rst", "_source/modules/generated/modeva.ModelZoo.list_registered_models.rst", "_source/modules/generated/modeva.ModelZoo.load_registered_model.rst", "_source/modules/generated/modeva.ModelZoo.models.rst", "_source/modules/generated/modeva.ModelZoo.register.rst", "_source/modules/generated/modeva.ModelZoo.train.rst", "_source/modules/generated/modeva.ModelZoo.train_all.rst", "_source/modules/generated/modeva.TestSuite.compare_accuracy_table.rst", "_source/modules/generated/modeva.TestSuite.compare_fairness.rst", "_source/modules/generated/modeva.TestSuite.compare_reliability.rst", "_source/modules/generated/modeva.TestSuite.compare_resilience.rst", "_source/modules/generated/modeva.TestSuite.compare_robustness.rst", "_source/modules/generated/modeva.TestSuite.compare_slicing_accuracy.rst", "_source/modules/generated/modeva.TestSuite.compare_slicing_fairness.rst", "_source/modules/generated/modeva.TestSuite.compare_slicing_overfit.rst", "_source/modules/generated/modeva.TestSuite.compare_slicing_reliability.rst", "_source/modules/generated/modeva.TestSuite.compare_slicing_robustness.rst", "_source/modules/generated/modeva.TestSuite.delete_registed_test.rst", "_source/modules/generated/modeva.TestSuite.diagnose_accuracy_table.rst", "_source/modules/generated/modeva.TestSuite.diagnose_fairness.rst", "_source/modules/generated/modeva.TestSuite.diagnose_mitigate_unfair_binning.rst", "_source/modules/generated/modeva.TestSuite.diagnose_mitigate_unfair_thresholding.rst", "_source/modules/generated/modeva.TestSuite.diagnose_reliability.rst", "_source/modules/generated/modeva.TestSuite.diagnose_residual_analysis.rst", "_source/modules/generated/modeva.TestSuite.diagnose_residual_cluster.rst", "_source/modules/generated/modeva.TestSuite.diagnose_residual_interpret.rst", "_source/modules/generated/modeva.TestSuite.diagnose_resilience.rst", "_source/modules/generated/modeva.TestSuite.diagnose_robustness.rst", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_accuracy.rst", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_fairness.rst", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_overfit.rst", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_reliability.rst", "_source/modules/generated/modeva.TestSuite.diagnose_slicing_robustness.rst", "_source/modules/generated/modeva.TestSuite.display_test_results.rst", "_source/modules/generated/modeva.TestSuite.explain_ale.rst", "_source/modules/generated/modeva.TestSuite.explain_hstatistic.rst", "_source/modules/generated/modeva.TestSuite.explain_lime.rst", "_source/modules/generated/modeva.TestSuite.explain_pdp.rst", "_source/modules/generated/modeva.TestSuite.explain_pfi.rst", "_source/modules/generated/modeva.TestSuite.explain_shap.rst", "_source/modules/generated/modeva.TestSuite.export_report.rst", "_source/modules/generated/modeva.TestSuite.get_dataset.rst", "_source/modules/generated/modeva.TestSuite.get_interactions.rst", "_source/modules/generated/modeva.TestSuite.get_main_effects.rst", "_source/modules/generated/modeva.TestSuite.get_model.rst", "_source/modules/generated/modeva.TestSuite.interpret_coef.rst", "_source/modules/generated/modeva.TestSuite.interpret_effects.rst", "_source/modules/generated/modeva.TestSuite.interpret_effects_moe_average.rst", "_source/modules/generated/modeva.TestSuite.interpret_fi.rst", "_source/modules/generated/modeva.TestSuite.interpret_global_tree.rst", "_source/modules/generated/modeva.TestSuite.interpret_llm_pc.rst", "_source/modules/generated/modeva.TestSuite.interpret_llm_profile.rst", "_source/modules/generated/modeva.TestSuite.interpret_llm_summary.rst", "_source/modules/generated/modeva.TestSuite.interpret_llm_violin.rst", "_source/modules/generated/modeva.TestSuite.interpret_local_fi.rst", "_source/modules/generated/modeva.TestSuite.interpret_local_linear_fi.rst", "_source/modules/generated/modeva.TestSuite.interpret_local_moe_weights.rst", "_source/modules/generated/modeva.TestSuite.interpret_local_tree.rst", "_source/modules/generated/modeva.TestSuite.interpret_moe_cluster_analysis.rst", "_source/modules/generated/modeva.TestSuite.list.rst", "_source/modules/generated/modeva.TestSuite.list_registered_tests.rst", "_source/modules/generated/modeva.TestSuite.load_registered_test.rst", "_source/modules/generated/modeva.TestSuite.register.rst", "_source/modules/generated/modeva.TestSuite.set_dataset.rst", "_source/modules/generated/modeva.TestSuite.set_model.rst", "_source/modules/generated/modeva.automation.pipeline.Pipeline.rst", "_source/modules/generated/modeva.models.MoCatBoostClassifier.rst", "_source/modules/generated/modeva.models.MoCatBoostRegressor.rst", "_source/modules/generated/modeva.models.MoClassifier.rst", "_source/modules/generated/modeva.models.MoDecisionTreeClassifier.rst", "_source/modules/generated/modeva.models.MoDecisionTreeRegressor.rst", "_source/modules/generated/modeva.models.MoElasticNet.rst", "_source/modules/generated/modeva.models.MoGAMINetClassifier.rst", "_source/modules/generated/modeva.models.MoGAMINetRegressor.rst", "_source/modules/generated/modeva.models.MoGLMTreeBoostClassifier.rst", "_source/modules/generated/modeva.models.MoGLMTreeBoostRegressor.rst", "_source/modules/generated/modeva.models.MoGLMTreeClassifier.rst", "_source/modules/generated/modeva.models.MoGLMTreeRegressor.rst", "_source/modules/generated/modeva.models.MoGradientBoostingClassifier.rst", "_source/modules/generated/modeva.models.MoGradientBoostingRegressor.rst", "_source/modules/generated/modeva.models.MoLGBMClassifier.rst", "_source/modules/generated/modeva.models.MoLGBMRegressor.rst", "_source/modules/generated/modeva.models.MoLogisticRegression.rst", "_source/modules/generated/modeva.models.MoMoEClassifier.rst", "_source/modules/generated/modeva.models.MoMoERegressor.rst", "_source/modules/generated/modeva.models.MoNeuralTreeClassifier.rst", "_source/modules/generated/modeva.models.MoNeuralTreeRegressor.rst", "_source/modules/generated/modeva.models.MoRandomForestClassifier.rst", "_source/modules/generated/modeva.models.MoRandomForestRegressor.rst", "_source/modules/generated/modeva.models.MoReLUDNNClassifier.rst", "_source/modules/generated/modeva.models.MoReLUDNNRegressor.rst", "_source/modules/generated/modeva.models.MoRegressor.rst", "_source/modules/generated/modeva.models.MoSKLearnClassifier.rst", "_source/modules/generated/modeva.models.MoSKLearnRegressor.rst", "_source/modules/generated/modeva.models.MoScoredClassifier.rst", "_source/modules/generated/modeva.models.MoScoredRegressor.rst", "_source/modules/generated/modeva.models.MoXGBClassifier.rst", "_source/modules/generated/modeva.models.MoXGBRegressor.rst", "_source/modules/generated/modeva.models.ModelTuneGridSearch.rst", "_source/modules/generated/modeva.models.ModelTuneOptuna.rst", "_source/modules/generated/modeva.models.ModelTunePSO.rst", "_source/modules/generated/modeva.models.ModelTuneRandomSearch.rst", "_source/modules/generated/modeva.testsuite.utils.slicing_utils.get_data_info.rst", "_source/modules/generated/modeva.utils.mlflow.clear_mlflow_home.rst", "_source/modules/generated/modeva.utils.mlflow.get_mlflow_home.rst", "_source/modules/generated/modeva.utils.mlflow.set_mlflow_home.rst", "_source/modules/generated/modeva.utils.results.ValidationResult.rst", "_source/modules/hpo.rst", "_source/modules/models.rst", "_source/modules/modelzoo.rst", "_source/modules/pipeline.rst", "_source/modules/results.rst", "_source/modules/testsuite.rst", "_source/modules/utilities.rst", "_source/modules/wrappers.rst", "_source/usage.rst", "_source/user_guide/compare.rst", "_source/user_guide/compare/compare_classification.rst", "_source/user_guide/compare/compare_fairness.rst", "_source/user_guide/compare/compare_regression.rst", "_source/user_guide/data.rst", "_source/user_guide/data/data_basic_operations.rst", "_source/user_guide/data/data_quality_drift.rst", "_source/user_guide/data/data_quality_outlier.rst", "_source/user_guide/data/data_summary.rst", "_source/user_guide/data/eda.rst", "_source/user_guide/data/feature_select.rst", "_source/user_guide/data/outlier_detect.rst", "_source/user_guide/data/subsample.rst", "_source/user_guide/explain.rst", "_source/user_guide/explain/Global.rst", "_source/user_guide/explain/Local.rst", "_source/user_guide/explain/ale.rst", "_source/user_guide/explain/hstats.rst", "_source/user_guide/explain/ice.rst", "_source/user_guide/explain/lime.rst", "_source/user_guide/explain/pdp.rst", "_source/user_guide/explain/pfi.rst", "_source/user_guide/explain/shap.rst", "_source/user_guide/introduction.rst", "_source/user_guide/low_code.rst", "_source/user_guide/low_code/data_process.rst", "_source/user_guide/low_code/data_summary.rst", "_source/user_guide/low_code/eda_2d.rst", "_source/user_guide/low_code/eda_3d.rst", "_source/user_guide/low_code/eda_multivariate.rst", "_source/user_guide/low_code/model_compare.rst", "_source/user_guide/low_code/model_explainability.rst", "_source/user_guide/low_code/model_test.rst", "_source/user_guide/low_code/model_train.rst", "_source/user_guide/low_code/model_tune.rst", "_source/user_guide/low_code/model_weakness.rst", "_source/user_guide/low_code/registry_hub.rst", "_source/user_guide/models.rst", "_source/user_guide/models/gaminet.rst", "_source/user_guide/models/gbdt.rst", "_source/user_guide/models/gblt.rst", "_source/user_guide/models/glm.rst", "_source/user_guide/models/moe.rst", "_source/user_guide/models/neuraltree.rst", "_source/user_guide/models/reludnn.rst", "_source/user_guide/models/tree.rst", "_source/user_guide/modelwrapping.rst", "_source/user_guide/testing.rst", "_source/user_guide/testing/fairness.rst", "_source/user_guide/testing/overfit.rst", "_source/user_guide/testing/performance.rst", "_source/user_guide/testing/reliability.rst", "_source/user_guide/testing/resilience.rst", "_source/user_guide/testing/robustness.rst", "_source/user_guide/testing/weakspot.rst", "_source/user_guide/train.rst", "_source/user_guide/wrapping/h2o.rst", "_source/user_guide/wrapping/hpo.rst", "_source/user_guide/wrapping/modelzoo.rst", "_source/user_guide/wrapping/wrappers.rst", "index.rst", "sg_api_usage.rst", "sg_execution_times.rst"], "indexentries": {"active_interaction_index_ (modeva.models.mogaminetclassifier attribute)": [[272, "modeva.models.MoGAMINetClassifier.active_interaction_index_", false]], "active_interaction_index_ (modeva.models.mogaminetregressor attribute)": [[273, "modeva.models.MoGAMINetRegressor.active_interaction_index_", false]], "active_main_effect_index_ (modeva.models.mogaminetclassifier attribute)": [[272, "modeva.models.MoGAMINetClassifier.active_main_effect_index_", false]], "active_main_effect_index_ (modeva.models.mogaminetregressor attribute)": [[273, "modeva.models.MoGAMINetRegressor.active_main_effect_index_", false]], "add_model() (modeva.modelzoo method)": [[195, "modeva.ModelZoo.add_model", false]], "add_step() (modeva.automation.pipeline.pipeline method)": [[265, "modeva.automation.pipeline.Pipeline.add_step", false]], "all_feature_names (modeva.dataset property)": [[110, "modeva.DataSet.all_feature_names", false]], "all_feature_types (modeva.dataset property)": [[111, "modeva.DataSet.all_feature_types", false]], "bin_numerical() (modeva.dataset method)": [[112, "modeva.DataSet.bin_numerical", false]], "calibrate_interval() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.mocatboostregressor method)": [[267, "modeva.models.MoCatBoostRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.modecisiontreeregressor method)": [[270, "modeva.models.MoDecisionTreeRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moelasticnet method)": [[271, "modeva.models.MoElasticNet.calibrate_interval", false]], "calibrate_interval() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.mogaminetregressor method)": [[273, "modeva.models.MoGAMINetRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.moglmtreeboostregressor method)": [[275, "modeva.models.MoGLMTreeBoostRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.moglmtreeregressor method)": [[277, "modeva.models.MoGLMTreeRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.mogradientboostingregressor method)": [[279, "modeva.models.MoGradientBoostingRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.molgbmregressor method)": [[281, "modeva.models.MoLGBMRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.calibrate_interval", false]], "calibrate_interval() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.momoeregressor method)": [[284, "modeva.models.MoMoERegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.moneuraltreeregressor method)": [[286, "modeva.models.MoNeuralTreeRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.morandomforestregressor method)": [[288, "modeva.models.MoRandomForestRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moregressor method)": [[291, "modeva.models.MoRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.moreludnnregressor method)": [[290, "modeva.models.MoReLUDNNRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.moscoredregressor method)": [[295, "modeva.models.MoScoredRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.mosklearnregressor method)": [[293, "modeva.models.MoSKLearnRegressor.calibrate_interval", false]], "calibrate_interval() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.calibrate_interval", false]], "calibrate_interval() (modeva.models.moxgbregressor method)": [[297, "modeva.models.MoXGBRegressor.calibrate_interval", false]], "calibrate_proba() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.calibrate_proba", false]], "calibrate_proba() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.calibrate_proba", false]], "calibrate_proba() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.calibrate_proba", false]], "clear_mlflow_home() (in module modeva.utils.mlflow)": [[303, "modeva.utils.mlflow.clear_mlflow_home", false]], "compare_accuracy_table() (modeva.testsuite method)": [[207, "modeva.TestSuite.compare_accuracy_table", false]], "compare_fairness() (modeva.testsuite method)": [[208, "modeva.TestSuite.compare_fairness", false]], "compare_reliability() (modeva.testsuite method)": [[209, "modeva.TestSuite.compare_reliability", false]], "compare_resilience() (modeva.testsuite method)": [[210, "modeva.TestSuite.compare_resilience", false]], "compare_robustness() (modeva.testsuite method)": [[211, "modeva.TestSuite.compare_robustness", false]], "compare_slicing_accuracy() (modeva.testsuite method)": [[212, "modeva.TestSuite.compare_slicing_accuracy", false]], "compare_slicing_fairness() (modeva.testsuite method)": [[213, "modeva.TestSuite.compare_slicing_fairness", false]], "compare_slicing_overfit() (modeva.testsuite method)": [[214, "modeva.TestSuite.compare_slicing_overfit", false]], "compare_slicing_reliability() (modeva.testsuite method)": [[215, "modeva.TestSuite.compare_slicing_reliability", false]], "compare_slicing_robustness() (modeva.testsuite method)": [[216, "modeva.TestSuite.compare_slicing_robustness", false]], "data (modeva.dataset property)": [[113, "modeva.DataSet.data", false]], "data (modeva.utils.results.validationresult attribute)": [[306, "modeva.utils.results.ValidationResult.data", false]], "data_drift_test() (modeva.dataset method)": [[114, "modeva.DataSet.data_drift_test", false]], "dataset (modeva.modelzoo property)": [[196, "modeva.ModelZoo.dataset", false]], "decision_function() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.decision_function", false]], "decision_function() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.decision_function", false]], "decision_function() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.decision_function", false]], "decision_function() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.decision_function", false]], "decision_function() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.decision_function", false]], "decision_function() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.decision_function", false]], "decision_function() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.decision_function", false]], "decision_function() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.decision_function", false]], "decision_function() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.decision_function", false]], "decision_function() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.decision_function", false]], "decision_function() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.decision_function", false]], "decision_function() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.decision_function", false]], "decision_function() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.decision_function", false]], "decision_function() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.decision_function", false]], "decision_function() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.decision_function", false]], "decision_function() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.decision_function", false]], "delete_extra_data() (modeva.dataset method)": [[115, "modeva.DataSet.delete_extra_data", false]], "delete_registed_test() (modeva.testsuite method)": [[217, "modeva.TestSuite.delete_registed_test", false]], "delete_registered_data() (modeva.dataset method)": [[116, "modeva.DataSet.delete_registered_data", false]], "delete_registered_model() (modeva.modelzoo method)": [[197, "modeva.ModelZoo.delete_registered_model", false]], "detect_outlier_cblof() (modeva.dataset method)": [[117, "modeva.DataSet.detect_outlier_cblof", false]], "detect_outlier_isolation_forest() (modeva.dataset method)": [[118, "modeva.DataSet.detect_outlier_isolation_forest", false]], "detect_outlier_pca() (modeva.dataset method)": [[119, "modeva.DataSet.detect_outlier_pca", false]], "diagnose_accuracy_table() (modeva.testsuite method)": [[218, "modeva.TestSuite.diagnose_accuracy_table", false]], "diagnose_fairness() (modeva.testsuite method)": [[219, "modeva.TestSuite.diagnose_fairness", false]], "diagnose_mitigate_unfair_binning() (modeva.testsuite method)": [[220, "modeva.TestSuite.diagnose_mitigate_unfair_binning", false]], "diagnose_mitigate_unfair_thresholding() (modeva.testsuite method)": [[221, "modeva.TestSuite.diagnose_mitigate_unfair_thresholding", false]], "diagnose_reliability() (modeva.testsuite method)": [[222, "modeva.TestSuite.diagnose_reliability", false]], "diagnose_residual_analysis() (modeva.testsuite method)": [[223, "modeva.TestSuite.diagnose_residual_analysis", false]], "diagnose_residual_cluster() (modeva.testsuite method)": [[224, "modeva.TestSuite.diagnose_residual_cluster", false]], "diagnose_residual_interpret() (modeva.testsuite method)": [[225, "modeva.TestSuite.diagnose_residual_interpret", false]], "diagnose_resilience() (modeva.testsuite method)": [[226, "modeva.TestSuite.diagnose_resilience", false]], "diagnose_robustness() (modeva.testsuite method)": [[227, "modeva.TestSuite.diagnose_robustness", false]], "diagnose_slicing_accuracy() (modeva.testsuite method)": [[228, "modeva.TestSuite.diagnose_slicing_accuracy", false]], "diagnose_slicing_fairness() (modeva.testsuite method)": [[229, "modeva.TestSuite.diagnose_slicing_fairness", false]], "diagnose_slicing_overfit() (modeva.testsuite method)": [[230, "modeva.TestSuite.diagnose_slicing_overfit", false]], "diagnose_slicing_reliability() (modeva.testsuite method)": [[231, "modeva.TestSuite.diagnose_slicing_reliability", false]], "diagnose_slicing_robustness() (modeva.testsuite method)": [[232, "modeva.TestSuite.diagnose_slicing_robustness", false]], "display_test_results() (modeva.testsuite method)": [[233, "modeva.TestSuite.display_test_results", false]], "eda_1d() (modeva.dataset method)": [[120, "modeva.DataSet.eda_1d", false]], "eda_2d() (modeva.dataset method)": [[121, "modeva.DataSet.eda_2d", false]], "eda_3d() (modeva.dataset method)": [[122, "modeva.DataSet.eda_3d", false]], "eda_correlation() (modeva.dataset method)": [[123, "modeva.DataSet.eda_correlation", false]], "eda_pca() (modeva.dataset method)": [[124, "modeva.DataSet.eda_pca", false]], "eda_umap() (modeva.dataset method)": [[125, "modeva.DataSet.eda_umap", false]], "encode_categorical() (modeva.dataset method)": [[126, "modeva.DataSet.encode_categorical", false]], "estimators_ (modeva.models.moglmtreeboostclassifier attribute)": [[274, "modeva.models.MoGLMTreeBoostClassifier.estimators_", false]], "estimators_ (modeva.models.moglmtreeboostregressor attribute)": [[275, "modeva.models.MoGLMTreeBoostRegressor.estimators_", false]], "explain_ale() (modeva.testsuite method)": [[234, "modeva.TestSuite.explain_ale", false]], "explain_hstatistic() (modeva.testsuite method)": [[235, "modeva.TestSuite.explain_hstatistic", false]], "explain_lime() (modeva.testsuite method)": [[236, "modeva.TestSuite.explain_lime", false]], "explain_pdp() (modeva.testsuite method)": [[237, "modeva.TestSuite.explain_pdp", false]], "explain_pfi() (modeva.testsuite method)": [[238, "modeva.TestSuite.explain_pfi", false]], "explain_shap() (modeva.testsuite method)": [[239, "modeva.TestSuite.explain_shap", false]], "export_report() (modeva.testsuite method)": [[240, "modeva.TestSuite.export_report", false]], "feature_names (modeva.dataset property)": [[127, "modeva.DataSet.feature_names", false]], "feature_names_categorical (modeva.dataset property)": [[128, "modeva.DataSet.feature_names_categorical", false]], "feature_names_mixed (modeva.dataset property)": [[129, "modeva.DataSet.feature_names_mixed", false]], "feature_names_numerical (modeva.dataset property)": [[130, "modeva.DataSet.feature_names_numerical", false]], "feature_select_corr() (modeva.dataset method)": [[131, "modeva.DataSet.feature_select_corr", false]], "feature_select_rcit() (modeva.dataset method)": [[132, "modeva.DataSet.feature_select_rcit", false]], "feature_select_xgbpfi() (modeva.dataset method)": [[133, "modeva.DataSet.feature_select_xgbpfi", false]], "feature_types (modeva.dataset property)": [[134, "modeva.DataSet.feature_types", false]], "fit() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.fit", false]], "fit() (modeva.models.mocatboostregressor method)": [[267, "modeva.models.MoCatBoostRegressor.fit", false]], "fit() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.fit", false]], "fit() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.fit", false]], "fit() (modeva.models.modecisiontreeregressor method)": [[270, "modeva.models.MoDecisionTreeRegressor.fit", false]], "fit() (modeva.models.moelasticnet method)": [[271, "modeva.models.MoElasticNet.fit", false]], "fit() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.fit", false]], "fit() (modeva.models.mogaminetregressor method)": [[273, "modeva.models.MoGAMINetRegressor.fit", false]], "fit() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.fit", false]], "fit() (modeva.models.moglmtreeboostregressor method)": [[275, "modeva.models.MoGLMTreeBoostRegressor.fit", false]], "fit() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.fit", false]], "fit() (modeva.models.mogradientboostingregressor method)": [[279, "modeva.models.MoGradientBoostingRegressor.fit", false]], "fit() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.fit", false]], "fit() (modeva.models.molgbmregressor method)": [[281, "modeva.models.MoLGBMRegressor.fit", false]], "fit() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.fit", false]], "fit() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.fit", false]], "fit() (modeva.models.momoeregressor method)": [[284, "modeva.models.MoMoERegressor.fit", false]], "fit() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.fit", false]], "fit() (modeva.models.morandomforestregressor method)": [[288, "modeva.models.MoRandomForestRegressor.fit", false]], "fit() (modeva.models.moregressor method)": [[291, "modeva.models.MoRegressor.fit", false]], "fit() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.fit", false]], "fit() (modeva.models.moreludnnregressor method)": [[290, "modeva.models.MoReLUDNNRegressor.fit", false]], "fit() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.fit", false]], "fit() (modeva.models.mosklearnregressor method)": [[293, "modeva.models.MoSKLearnRegressor.fit", false]], "fit() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.fit", false]], "fit() (modeva.models.moxgbregressor method)": [[297, "modeva.models.MoXGBRegressor.fit", false]], "func (modeva.utils.results.validationresult attribute)": [[306, "modeva.utils.results.ValidationResult.func", false]], "get_data() (modeva.dataset method)": [[136, "modeva.DataSet.get_data", false]], "get_data_info() (in module modeva.testsuite.utils.slicing_utils)": [[302, "modeva.testsuite.utils.slicing_utils.get_data_info", false]], "get_data_list() (modeva.dataset method)": [[137, "modeva.DataSet.get_data_list", false]], "get_dataset() (modeva.testsuite method)": [[241, "modeva.TestSuite.get_dataset", false]], "get_extra_data_list() (modeva.dataset method)": [[138, "modeva.DataSet.get_extra_data_list", false]], "get_figure_names() (modeva.utils.results.validationresult method)": [[306, "modeva.utils.results.ValidationResult.get_figure_names", false]], "get_interactions() (modeva.testsuite method)": [[242, "modeva.TestSuite.get_interactions", false]], "get_main_effects() (modeva.testsuite method)": [[243, "modeva.TestSuite.get_main_effects", false]], "get_mlflow_home() (in module modeva.utils.mlflow)": [[304, "modeva.utils.mlflow.get_mlflow_home", false]], "get_model() (modeva.modelzoo method)": [[198, "modeva.ModelZoo.get_model", false]], "get_model() (modeva.testsuite method)": [[244, "modeva.TestSuite.get_model", false]], "get_params() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.get_params", false]], "get_params() (modeva.models.mocatboostregressor method)": [[267, "modeva.models.MoCatBoostRegressor.get_params", false]], "get_params() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.get_params", false]], "get_params() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.get_params", false]], "get_params() (modeva.models.modecisiontreeregressor method)": [[270, "modeva.models.MoDecisionTreeRegressor.get_params", false]], "get_params() (modeva.models.moelasticnet method)": [[271, "modeva.models.MoElasticNet.get_params", false]], "get_params() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.get_params", false]], "get_params() (modeva.models.mogaminetregressor method)": [[273, "modeva.models.MoGAMINetRegressor.get_params", false]], "get_params() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.get_params", false]], "get_params() (modeva.models.moglmtreeboostregressor method)": [[275, "modeva.models.MoGLMTreeBoostRegressor.get_params", false]], "get_params() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.get_params", false]], "get_params() (modeva.models.moglmtreeregressor method)": [[277, "modeva.models.MoGLMTreeRegressor.get_params", false]], "get_params() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.get_params", false]], "get_params() (modeva.models.mogradientboostingregressor method)": [[279, "modeva.models.MoGradientBoostingRegressor.get_params", false]], "get_params() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.get_params", false]], "get_params() (modeva.models.molgbmregressor method)": [[281, "modeva.models.MoLGBMRegressor.get_params", false]], "get_params() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.get_params", false]], "get_params() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.get_params", false]], "get_params() (modeva.models.momoeregressor method)": [[284, "modeva.models.MoMoERegressor.get_params", false]], "get_params() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.get_params", false]], "get_params() (modeva.models.moneuraltreeregressor method)": [[286, "modeva.models.MoNeuralTreeRegressor.get_params", false]], "get_params() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.get_params", false]], "get_params() (modeva.models.morandomforestregressor method)": [[288, "modeva.models.MoRandomForestRegressor.get_params", false]], "get_params() (modeva.models.moregressor method)": [[291, "modeva.models.MoRegressor.get_params", false]], "get_params() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.get_params", false]], "get_params() (modeva.models.moreludnnregressor method)": [[290, "modeva.models.MoReLUDNNRegressor.get_params", false]], "get_params() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.get_params", false]], "get_params() (modeva.models.moscoredregressor method)": [[295, "modeva.models.MoScoredRegressor.get_params", false]], "get_params() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.get_params", false]], "get_params() (modeva.models.mosklearnregressor method)": [[293, "modeva.models.MoSKLearnRegressor.get_params", false]], "get_params() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.get_params", false]], "get_params() (modeva.models.moxgbregressor method)": [[297, "modeva.models.MoXGBRegressor.get_params", false]], "get_prediction_data() (modeva.dataset method)": [[139, "modeva.DataSet.get_prediction_data", false]], "get_prediction_proba_data() (modeva.dataset method)": [[140, "modeva.DataSet.get_prediction_proba_data", false]], "get_preprocessor() (modeva.dataset method)": [[141, "modeva.DataSet.get_preprocessor", false]], "get_protected_data() (modeva.dataset method)": [[142, "modeva.DataSet.get_protected_data", false]], "get_raw_data() (modeva.dataset method)": [[143, "modeva.DataSet.get_raw_data", false]], "get_x_y_data() (modeva.dataset method)": [[135, "modeva.DataSet.get_X_y_data", false]], "impute_missing() (modeva.dataset method)": [[144, "modeva.DataSet.impute_missing", false]], "inputs (modeva.utils.results.validationresult attribute)": [[306, "modeva.utils.results.ValidationResult.inputs", false]], "interaction_list_ (modeva.models.mogaminetclassifier attribute)": [[272, "modeva.models.MoGAMINetClassifier.interaction_list_", false]], "interaction_list_ (modeva.models.mogaminetregressor attribute)": [[273, "modeva.models.MoGAMINetRegressor.interaction_list_", false]], "interaction_val_loss_ (modeva.models.mogaminetclassifier attribute)": [[272, "modeva.models.MoGAMINetClassifier.interaction_val_loss_", false]], "interaction_val_loss_ (modeva.models.mogaminetregressor attribute)": [[273, "modeva.models.MoGAMINetRegressor.interaction_val_loss_", false]], "interpret_coef() (modeva.testsuite method)": [[245, "modeva.TestSuite.interpret_coef", false]], "interpret_effects() (modeva.testsuite method)": [[246, "modeva.TestSuite.interpret_effects", false]], "interpret_effects_moe_average() (modeva.testsuite method)": [[247, "modeva.TestSuite.interpret_effects_moe_average", false]], "interpret_fi() (modeva.testsuite method)": [[248, "modeva.TestSuite.interpret_fi", false]], "interpret_global_tree() (modeva.testsuite method)": [[249, "modeva.TestSuite.interpret_global_tree", false]], "interpret_llm_pc() (modeva.testsuite method)": [[250, "modeva.TestSuite.interpret_llm_pc", false]], "interpret_llm_profile() (modeva.testsuite method)": [[251, "modeva.TestSuite.interpret_llm_profile", false]], "interpret_llm_summary() (modeva.testsuite method)": [[252, "modeva.TestSuite.interpret_llm_summary", false]], "interpret_llm_violin() (modeva.testsuite method)": [[253, "modeva.TestSuite.interpret_llm_violin", false]], "interpret_local_fi() (modeva.testsuite method)": [[254, "modeva.TestSuite.interpret_local_fi", false]], "interpret_local_linear_fi() (modeva.testsuite method)": [[255, "modeva.TestSuite.interpret_local_linear_fi", false]], "interpret_local_moe_weights() (modeva.testsuite method)": [[256, "modeva.TestSuite.interpret_local_moe_weights", false]], "interpret_local_tree() (modeva.testsuite method)": [[257, "modeva.TestSuite.interpret_local_tree", false]], "interpret_moe_cluster_analysis() (modeva.testsuite method)": [[258, "modeva.TestSuite.interpret_moe_cluster_analysis", false]], "inverse_transform() (modeva.dataset method)": [[145, "modeva.DataSet.inverse_transform", false]], "is_splitted() (modeva.dataset method)": [[146, "modeva.DataSet.is_splitted", false]], "key (modeva.utils.results.validationresult attribute)": [[306, "modeva.utils.results.ValidationResult.key", false]], "leaderboard() (modeva.modelzoo method)": [[199, "modeva.ModelZoo.leaderboard", false]], "leaf_estimators_ (modeva.models.moglmtreeclassifier attribute)": [[276, "modeva.models.MoGLMTreeClassifier.leaf_estimators_", false]], "list() (modeva.testsuite class method)": [[259, "modeva.TestSuite.list", false]], "list_model_names() (modeva.modelzoo method)": [[200, "modeva.ModelZoo.list_model_names", false]], "list_registered_data() (modeva.dataset method)": [[147, "modeva.DataSet.list_registered_data", false]], "list_registered_models() (modeva.modelzoo method)": [[201, "modeva.ModelZoo.list_registered_models", false]], "list_registered_tests() (modeva.testsuite method)": [[260, "modeva.TestSuite.list_registered_tests", false]], "load() (modeva.dataset method)": [[148, "modeva.DataSet.load", false]], "load() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.load", false]], "load() (modeva.models.mocatboostregressor method)": [[267, "modeva.models.MoCatBoostRegressor.load", false]], "load() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.load", false]], "load() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.load", false]], "load() (modeva.models.modecisiontreeregressor method)": [[270, "modeva.models.MoDecisionTreeRegressor.load", false]], "load() (modeva.models.moelasticnet method)": [[271, "modeva.models.MoElasticNet.load", false]], "load() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.load", false]], "load() (modeva.models.mogaminetregressor method)": [[273, "modeva.models.MoGAMINetRegressor.load", false]], "load() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.load", false]], "load() (modeva.models.moglmtreeboostregressor method)": [[275, "modeva.models.MoGLMTreeBoostRegressor.load", false]], "load() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.load", false]], "load() (modeva.models.moglmtreeregressor method)": [[277, "modeva.models.MoGLMTreeRegressor.load", false]], "load() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.load", false]], "load() (modeva.models.mogradientboostingregressor method)": [[279, "modeva.models.MoGradientBoostingRegressor.load", false]], "load() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.load", false]], "load() (modeva.models.molgbmregressor method)": [[281, "modeva.models.MoLGBMRegressor.load", false]], "load() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.load", false]], "load() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.load", false]], "load() (modeva.models.momoeregressor method)": [[284, "modeva.models.MoMoERegressor.load", false]], "load() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.load", false]], "load() (modeva.models.moneuraltreeregressor method)": [[286, "modeva.models.MoNeuralTreeRegressor.load", false]], "load() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.load", false]], "load() (modeva.models.morandomforestregressor method)": [[288, "modeva.models.MoRandomForestRegressor.load", false]], "load() (modeva.models.moregressor method)": [[291, "modeva.models.MoRegressor.load", false]], "load() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.load", false]], "load() (modeva.models.moreludnnregressor method)": [[290, "modeva.models.MoReLUDNNRegressor.load", false]], "load() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.load", false]], "load() (modeva.models.moscoredregressor method)": [[295, "modeva.models.MoScoredRegressor.load", false]], "load() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.load", false]], "load() (modeva.models.mosklearnregressor method)": [[293, "modeva.models.MoSKLearnRegressor.load", false]], "load() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.load", false]], "load() (modeva.models.moxgbregressor method)": [[297, "modeva.models.MoXGBRegressor.load", false]], "load_csv() (modeva.dataset method)": [[149, "modeva.DataSet.load_csv", false]], "load_dataframe() (modeva.dataset method)": [[150, "modeva.DataSet.load_dataframe", false]], "load_dataframe_train_test() (modeva.dataset method)": [[151, "modeva.DataSet.load_dataframe_train_test", false]], "load_preprocessing() (modeva.dataset method)": [[152, "modeva.DataSet.load_preprocessing", false]], "load_registered_data() (modeva.dataset method)": [[153, "modeva.DataSet.load_registered_data", false]], "load_registered_model() (modeva.modelzoo method)": [[202, "modeva.ModelZoo.load_registered_model", false]], "load_registered_test() (modeva.testsuite method)": [[261, "modeva.TestSuite.load_registered_test", false]], "load_spark() (modeva.dataset method)": [[154, "modeva.DataSet.load_spark", false]], "main_effect_val_loss_ (modeva.models.mogaminetclassifier attribute)": [[272, "modeva.models.MoGAMINetClassifier.main_effect_val_loss_", false]], "main_effect_val_loss_ (modeva.models.mogaminetregressor attribute)": [[273, "modeva.models.MoGAMINetRegressor.main_effect_val_loss_", false]], "mocatboostclassifier (class in modeva.models)": [[266, "modeva.models.MoCatBoostClassifier", false]], "mocatboostregressor (class in modeva.models)": [[267, "modeva.models.MoCatBoostRegressor", false]], "moclassifier (class in modeva.models)": [[268, "modeva.models.MoClassifier", false]], "modecisiontreeclassifier (class in modeva.models)": [[269, "modeva.models.MoDecisionTreeClassifier", false]], "modecisiontreeregressor (class in modeva.models)": [[270, "modeva.models.MoDecisionTreeRegressor", false]], "model (modeva.utils.results.validationresult attribute)": [[306, "modeva.utils.results.ValidationResult.model", false]], "models (modeva.modelzoo property)": [[203, "modeva.ModelZoo.models", false]], "modeltunegridsearch (class in modeva.models)": [[298, "modeva.models.ModelTuneGridSearch", false]], "modeltuneoptuna (class in modeva.models)": [[299, "modeva.models.ModelTuneOptuna", false]], "modeltunepso (class in modeva.models)": [[300, "modeva.models.ModelTunePSO", false]], "modeltunerandomsearch (class in modeva.models)": [[301, "modeva.models.ModelTuneRandomSearch", false]], "module": [[102, "module-notebook", false]], "moelasticnet (class in modeva.models)": [[271, "modeva.models.MoElasticNet", false]], "mogaminetclassifier (class in modeva.models)": [[272, "modeva.models.MoGAMINetClassifier", false]], "mogaminetregressor (class in modeva.models)": [[273, "modeva.models.MoGAMINetRegressor", false]], "moglmtreeboostclassifier (class in modeva.models)": [[274, "modeva.models.MoGLMTreeBoostClassifier", false]], "moglmtreeboostregressor (class in modeva.models)": [[275, "modeva.models.MoGLMTreeBoostRegressor", false]], "moglmtreeclassifier (class in modeva.models)": [[276, "modeva.models.MoGLMTreeClassifier", false]], "moglmtreeregressor (class in modeva.models)": [[277, "modeva.models.MoGLMTreeRegressor", false]], "mogradientboostingclassifier (class in modeva.models)": [[278, "modeva.models.MoGradientBoostingClassifier", false]], "mogradientboostingregressor (class in modeva.models)": [[279, "modeva.models.MoGradientBoostingRegressor", false]], "molgbmclassifier (class in modeva.models)": [[280, "modeva.models.MoLGBMClassifier", false]], "molgbmregressor (class in modeva.models)": [[281, "modeva.models.MoLGBMRegressor", false]], "mologisticregression (class in modeva.models)": [[282, "modeva.models.MoLogisticRegression", false]], "momoeclassifier (class in modeva.models)": [[283, "modeva.models.MoMoEClassifier", false]], "momoeregressor (class in modeva.models)": [[284, "modeva.models.MoMoERegressor", false]], "moneuraltreeclassifier (class in modeva.models)": [[285, "modeva.models.MoNeuralTreeClassifier", false]], "moneuraltreeregressor (class in modeva.models)": [[286, "modeva.models.MoNeuralTreeRegressor", false]], "morandomforestclassifier (class in modeva.models)": [[287, "modeva.models.MoRandomForestClassifier", false]], "morandomforestregressor (class in modeva.models)": [[288, "modeva.models.MoRandomForestRegressor", false]], "moregressor (class in modeva.models)": [[291, "modeva.models.MoRegressor", false]], "moreludnnclassifier (class in modeva.models)": [[289, "modeva.models.MoReLUDNNClassifier", false]], "moreludnnregressor (class in modeva.models)": [[290, "modeva.models.MoReLUDNNRegressor", false]], "moscoredclassifier (class in modeva.models)": [[294, "modeva.models.MoScoredClassifier", false]], "moscoredregressor (class in modeva.models)": [[295, "modeva.models.MoScoredRegressor", false]], "mosklearnclassifier (class in modeva.models)": [[292, "modeva.models.MoSKLearnClassifier", false]], "mosklearnregressor (class in modeva.models)": [[293, "modeva.models.MoSKLearnRegressor", false]], "moxgbclassifier (class in modeva.models)": [[296, "modeva.models.MoXGBClassifier", false]], "moxgbregressor (class in modeva.models)": [[297, "modeva.models.MoXGBRegressor", false]], "n_features (modeva.dataset property)": [[155, "modeva.DataSet.n_features", false]], "n_features_in_ (modeva.models.moglmtreeboostclassifier attribute)": [[274, "modeva.models.MoGLMTreeBoostClassifier.n_features_in_", false]], "n_features_in_ (modeva.models.moglmtreeboostregressor attribute)": [[275, "modeva.models.MoGLMTreeBoostRegressor.n_features_in_", false]], "n_interactions_ (modeva.models.mogaminetclassifier attribute)": [[272, "modeva.models.MoGAMINetClassifier.n_interactions_", false]], "n_interactions_ (modeva.models.mogaminetregressor attribute)": [[273, "modeva.models.MoGAMINetRegressor.n_interactions_", false]], "name (modeva.dataset property)": [[156, "modeva.DataSet.name", false]], "net_ (modeva.models.mogaminetclassifier attribute)": [[272, "modeva.models.MoGAMINetClassifier.net_", false]], "net_ (modeva.models.mogaminetregressor attribute)": [[273, "modeva.models.MoGAMINetRegressor.net_", false]], "net_ (modeva.models.moneuraltreeclassifier attribute)": [[285, "modeva.models.MoNeuralTreeClassifier.net_", false]], "net_ (modeva.models.moneuraltreeregressor attribute)": [[286, "modeva.models.MoNeuralTreeRegressor.net_", false]], "net_ (modeva.models.moreludnnclassifier attribute)": [[289, "modeva.models.MoReLUDNNClassifier.net_", false]], "net_ (modeva.models.moreludnnregressor attribute)": [[290, "modeva.models.MoReLUDNNRegressor.net_", false]], "notebook": [[102, "module-notebook", false]], "options (modeva.utils.results.validationresult attribute)": [[306, "modeva.utils.results.ValidationResult.options", false]], "optipng() (in module sphinx_gallery.utils)": [[106, "sphinx_gallery.utils.optipng", false]], "pipeline (class in modeva.automation.pipeline)": [[265, "modeva.automation.pipeline.Pipeline", false]], "plot() (modeva.utils.results.validationresult method)": [[306, "modeva.utils.results.ValidationResult.plot", false]], "plot_save() (modeva.utils.results.validationresult method)": [[306, "modeva.utils.results.ValidationResult.plot_save", false]], "predict() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.predict", false]], "predict() (modeva.models.mocatboostregressor method)": [[267, "modeva.models.MoCatBoostRegressor.predict", false]], "predict() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.predict", false]], "predict() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.predict", false]], "predict() (modeva.models.modecisiontreeregressor method)": [[270, "modeva.models.MoDecisionTreeRegressor.predict", false]], "predict() (modeva.models.moelasticnet method)": [[271, "modeva.models.MoElasticNet.predict", false]], "predict() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.predict", false]], "predict() (modeva.models.mogaminetregressor method)": [[273, "modeva.models.MoGAMINetRegressor.predict", false]], "predict() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.predict", false]], "predict() (modeva.models.moglmtreeboostregressor method)": [[275, "modeva.models.MoGLMTreeBoostRegressor.predict", false]], "predict() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.predict", false]], "predict() (modeva.models.moglmtreeregressor method)": [[277, "modeva.models.MoGLMTreeRegressor.predict", false]], "predict() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.predict", false]], "predict() (modeva.models.mogradientboostingregressor method)": [[279, "modeva.models.MoGradientBoostingRegressor.predict", false]], "predict() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.predict", false]], "predict() (modeva.models.molgbmregressor method)": [[281, "modeva.models.MoLGBMRegressor.predict", false]], "predict() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.predict", false]], "predict() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.predict", false]], "predict() (modeva.models.momoeregressor method)": [[284, "modeva.models.MoMoERegressor.predict", false]], "predict() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.predict", false]], "predict() (modeva.models.moneuraltreeregressor method)": [[286, "modeva.models.MoNeuralTreeRegressor.predict", false]], "predict() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.predict", false]], "predict() (modeva.models.morandomforestregressor method)": [[288, "modeva.models.MoRandomForestRegressor.predict", false]], "predict() (modeva.models.moregressor method)": [[291, "modeva.models.MoRegressor.predict", false]], "predict() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.predict", false]], "predict() (modeva.models.moreludnnregressor method)": [[290, "modeva.models.MoReLUDNNRegressor.predict", false]], "predict() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.predict", false]], "predict() (modeva.models.moscoredregressor method)": [[295, "modeva.models.MoScoredRegressor.predict", false]], "predict() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.predict", false]], "predict() (modeva.models.mosklearnregressor method)": [[293, "modeva.models.MoSKLearnRegressor.predict", false]], "predict() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.predict", false]], "predict() (modeva.models.moxgbregressor method)": [[297, "modeva.models.MoXGBRegressor.predict", false]], "predict_interval() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.predict_interval", false]], "predict_interval() (modeva.models.mocatboostregressor method)": [[267, "modeva.models.MoCatBoostRegressor.predict_interval", false]], "predict_interval() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.predict_interval", false]], "predict_interval() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.predict_interval", false]], "predict_interval() (modeva.models.modecisiontreeregressor method)": [[270, "modeva.models.MoDecisionTreeRegressor.predict_interval", false]], "predict_interval() (modeva.models.moelasticnet method)": [[271, "modeva.models.MoElasticNet.predict_interval", false]], "predict_interval() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.predict_interval", false]], "predict_interval() (modeva.models.mogaminetregressor method)": [[273, "modeva.models.MoGAMINetRegressor.predict_interval", false]], "predict_interval() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.predict_interval", false]], "predict_interval() (modeva.models.moglmtreeboostregressor method)": [[275, "modeva.models.MoGLMTreeBoostRegressor.predict_interval", false]], "predict_interval() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.predict_interval", false]], "predict_interval() (modeva.models.moglmtreeregressor method)": [[277, "modeva.models.MoGLMTreeRegressor.predict_interval", false]], "predict_interval() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.predict_interval", false]], "predict_interval() (modeva.models.mogradientboostingregressor method)": [[279, "modeva.models.MoGradientBoostingRegressor.predict_interval", false]], "predict_interval() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.predict_interval", false]], "predict_interval() (modeva.models.molgbmregressor method)": [[281, "modeva.models.MoLGBMRegressor.predict_interval", false]], "predict_interval() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.predict_interval", false]], "predict_interval() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.predict_interval", false]], "predict_interval() (modeva.models.momoeregressor method)": [[284, "modeva.models.MoMoERegressor.predict_interval", false]], "predict_interval() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.predict_interval", false]], "predict_interval() (modeva.models.moneuraltreeregressor method)": [[286, "modeva.models.MoNeuralTreeRegressor.predict_interval", false]], "predict_interval() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.predict_interval", false]], "predict_interval() (modeva.models.morandomforestregressor method)": [[288, "modeva.models.MoRandomForestRegressor.predict_interval", false]], "predict_interval() (modeva.models.moregressor method)": [[291, "modeva.models.MoRegressor.predict_interval", false]], "predict_interval() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.predict_interval", false]], "predict_interval() (modeva.models.moreludnnregressor method)": [[290, "modeva.models.MoReLUDNNRegressor.predict_interval", false]], "predict_interval() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.predict_interval", false]], "predict_interval() (modeva.models.moscoredregressor method)": [[295, "modeva.models.MoScoredRegressor.predict_interval", false]], "predict_interval() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.predict_interval", false]], "predict_interval() (modeva.models.mosklearnregressor method)": [[293, "modeva.models.MoSKLearnRegressor.predict_interval", false]], "predict_interval() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.predict_interval", false]], "predict_interval() (modeva.models.moxgbregressor method)": [[297, "modeva.models.MoXGBRegressor.predict_interval", false]], "predict_proba() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.predict_proba", false]], "predict_proba() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.predict_proba", false]], "predict_proba() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.predict_proba", false]], "predict_proba() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.predict_proba", false]], "predict_proba() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.predict_proba", false]], "predict_proba() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.predict_proba", false]], "predict_proba() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.predict_proba", false]], "predict_proba() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.predict_proba", false]], "predict_proba() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.predict_proba", false]], "predict_proba() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.predict_proba", false]], "predict_proba() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.predict_proba", false]], "predict_proba() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.predict_proba", false]], "predict_proba() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.predict_proba", false]], "predict_proba() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.predict_proba", false]], "predict_proba() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.predict_proba", false]], "predict_proba() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.predict_proba", false]], "prediction (modeva.dataset property)": [[157, "modeva.DataSet.prediction", false]], "preprocess() (modeva.dataset method)": [[158, "modeva.DataSet.preprocess", false]], "raw_data (modeva.dataset property)": [[159, "modeva.DataSet.raw_data", false]], "register() (modeva.dataset method)": [[160, "modeva.DataSet.register", false]], "register() (modeva.modelzoo method)": [[204, "modeva.ModelZoo.register", false]], "register() (modeva.testsuite method)": [[262, "modeva.TestSuite.register", false]], "reset_preprocess() (modeva.dataset method)": [[161, "modeva.DataSet.reset_preprocess", false]], "run() (modeva.automation.pipeline.pipeline method)": [[265, "modeva.automation.pipeline.Pipeline.run", false]], "run() (modeva.models.modeltunegridsearch method)": [[298, "modeva.models.ModelTuneGridSearch.run", false]], "run() (modeva.models.modeltuneoptuna method)": [[299, "modeva.models.ModelTuneOptuna.run", false]], "run() (modeva.models.modeltunepso method)": [[300, "modeva.models.ModelTunePSO.run", false]], "run() (modeva.models.modeltunerandomsearch method)": [[301, "modeva.models.ModelTuneRandomSearch.run", false]], "sample_weight (modeva.dataset property)": [[162, "modeva.DataSet.sample_weight", false]], "save() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.save", false]], "save() (modeva.models.mocatboostregressor method)": [[267, "modeva.models.MoCatBoostRegressor.save", false]], "save() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.save", false]], "save() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.save", false]], "save() (modeva.models.modecisiontreeregressor method)": [[270, "modeva.models.MoDecisionTreeRegressor.save", false]], "save() (modeva.models.moelasticnet method)": [[271, "modeva.models.MoElasticNet.save", false]], "save() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.save", false]], "save() (modeva.models.mogaminetregressor method)": [[273, "modeva.models.MoGAMINetRegressor.save", false]], "save() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.save", false]], "save() (modeva.models.moglmtreeboostregressor method)": [[275, "modeva.models.MoGLMTreeBoostRegressor.save", false]], "save() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.save", false]], "save() (modeva.models.moglmtreeregressor method)": [[277, "modeva.models.MoGLMTreeRegressor.save", false]], "save() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.save", false]], "save() (modeva.models.mogradientboostingregressor method)": [[279, "modeva.models.MoGradientBoostingRegressor.save", false]], "save() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.save", false]], "save() (modeva.models.molgbmregressor method)": [[281, "modeva.models.MoLGBMRegressor.save", false]], "save() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.save", false]], "save() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.save", false]], "save() (modeva.models.momoeregressor method)": [[284, "modeva.models.MoMoERegressor.save", false]], "save() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.save", false]], "save() (modeva.models.moneuraltreeregressor method)": [[286, "modeva.models.MoNeuralTreeRegressor.save", false]], "save() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.save", false]], "save() (modeva.models.morandomforestregressor method)": [[288, "modeva.models.MoRandomForestRegressor.save", false]], "save() (modeva.models.moregressor method)": [[291, "modeva.models.MoRegressor.save", false]], "save() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.save", false]], "save() (modeva.models.moreludnnregressor method)": [[290, "modeva.models.MoReLUDNNRegressor.save", false]], "save() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.save", false]], "save() (modeva.models.moscoredregressor method)": [[295, "modeva.models.MoScoredRegressor.save", false]], "save() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.save", false]], "save() (modeva.models.mosklearnregressor method)": [[293, "modeva.models.MoSKLearnRegressor.save", false]], "save() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.save", false]], "save() (modeva.models.moxgbregressor method)": [[297, "modeva.models.MoXGBRegressor.save", false]], "save_preprocessing() (modeva.dataset method)": [[163, "modeva.DataSet.save_preprocessing", false]], "scale_numerical() (modeva.dataset method)": [[164, "modeva.DataSet.scale_numerical", false]], "set_active_features() (modeva.dataset method)": [[165, "modeva.DataSet.set_active_features", false]], "set_dataset() (modeva.testsuite method)": [[263, "modeva.TestSuite.set_dataset", false]], "set_feature_type() (modeva.dataset method)": [[166, "modeva.DataSet.set_feature_type", false]], "set_inactive_features() (modeva.dataset method)": [[167, "modeva.DataSet.set_inactive_features", false]], "set_mlflow_home() (in module modeva.utils.mlflow)": [[305, "modeva.utils.mlflow.set_mlflow_home", false]], "set_model() (modeva.testsuite method)": [[264, "modeva.TestSuite.set_model", false]], "set_params() (modeva.models.mocatboostclassifier method)": [[266, "modeva.models.MoCatBoostClassifier.set_params", false]], "set_params() (modeva.models.mocatboostregressor method)": [[267, "modeva.models.MoCatBoostRegressor.set_params", false]], "set_params() (modeva.models.moclassifier method)": [[268, "modeva.models.MoClassifier.set_params", false]], "set_params() (modeva.models.modecisiontreeclassifier method)": [[269, "modeva.models.MoDecisionTreeClassifier.set_params", false]], "set_params() (modeva.models.modecisiontreeregressor method)": [[270, "modeva.models.MoDecisionTreeRegressor.set_params", false]], "set_params() (modeva.models.moelasticnet method)": [[271, "modeva.models.MoElasticNet.set_params", false]], "set_params() (modeva.models.mogaminetclassifier method)": [[272, "modeva.models.MoGAMINetClassifier.set_params", false]], "set_params() (modeva.models.mogaminetregressor method)": [[273, "modeva.models.MoGAMINetRegressor.set_params", false]], "set_params() (modeva.models.moglmtreeboostclassifier method)": [[274, "modeva.models.MoGLMTreeBoostClassifier.set_params", false]], "set_params() (modeva.models.moglmtreeboostregressor method)": [[275, "modeva.models.MoGLMTreeBoostRegressor.set_params", false]], "set_params() (modeva.models.moglmtreeclassifier method)": [[276, "modeva.models.MoGLMTreeClassifier.set_params", false]], "set_params() (modeva.models.moglmtreeregressor method)": [[277, "modeva.models.MoGLMTreeRegressor.set_params", false]], "set_params() (modeva.models.mogradientboostingclassifier method)": [[278, "modeva.models.MoGradientBoostingClassifier.set_params", false]], "set_params() (modeva.models.mogradientboostingregressor method)": [[279, "modeva.models.MoGradientBoostingRegressor.set_params", false]], "set_params() (modeva.models.molgbmclassifier method)": [[280, "modeva.models.MoLGBMClassifier.set_params", false]], "set_params() (modeva.models.molgbmregressor method)": [[281, "modeva.models.MoLGBMRegressor.set_params", false]], "set_params() (modeva.models.mologisticregression method)": [[282, "modeva.models.MoLogisticRegression.set_params", false]], "set_params() (modeva.models.momoeclassifier method)": [[283, "modeva.models.MoMoEClassifier.set_params", false]], "set_params() (modeva.models.momoeregressor method)": [[284, "modeva.models.MoMoERegressor.set_params", false]], "set_params() (modeva.models.moneuraltreeclassifier method)": [[285, "modeva.models.MoNeuralTreeClassifier.set_params", false]], "set_params() (modeva.models.moneuraltreeregressor method)": [[286, "modeva.models.MoNeuralTreeRegressor.set_params", false]], "set_params() (modeva.models.morandomforestclassifier method)": [[287, "modeva.models.MoRandomForestClassifier.set_params", false]], "set_params() (modeva.models.morandomforestregressor method)": [[288, "modeva.models.MoRandomForestRegressor.set_params", false]], "set_params() (modeva.models.moregressor method)": [[291, "modeva.models.MoRegressor.set_params", false]], "set_params() (modeva.models.moreludnnclassifier method)": [[289, "modeva.models.MoReLUDNNClassifier.set_params", false]], "set_params() (modeva.models.moreludnnregressor method)": [[290, "modeva.models.MoReLUDNNRegressor.set_params", false]], "set_params() (modeva.models.moscoredclassifier method)": [[294, "modeva.models.MoScoredClassifier.set_params", false]], "set_params() (modeva.models.moscoredregressor method)": [[295, "modeva.models.MoScoredRegressor.set_params", false]], "set_params() (modeva.models.mosklearnclassifier method)": [[292, "modeva.models.MoSKLearnClassifier.set_params", false]], "set_params() (modeva.models.mosklearnregressor method)": [[293, "modeva.models.MoSKLearnRegressor.set_params", false]], "set_params() (modeva.models.moxgbclassifier method)": [[296, "modeva.models.MoXGBClassifier.set_params", false]], "set_params() (modeva.models.moxgbregressor method)": [[297, "modeva.models.MoXGBRegressor.set_params", false]], "set_prediction() (modeva.dataset method)": [[168, "modeva.DataSet.set_prediction", false]], "set_prediction_proba() (modeva.dataset method)": [[169, "modeva.DataSet.set_prediction_proba", false]], "set_protected_data() (modeva.dataset method)": [[170, "modeva.DataSet.set_protected_data", false]], "set_protected_extra_data() (modeva.dataset method)": [[171, "modeva.DataSet.set_protected_extra_data", false]], "set_random_split() (modeva.dataset method)": [[172, "modeva.DataSet.set_random_split", false]], "set_raw_extra_data() (modeva.dataset method)": [[173, "modeva.DataSet.set_raw_extra_data", false]], "set_sample_weight() (modeva.dataset method)": [[174, "modeva.DataSet.set_sample_weight", false]], "set_target() (modeva.dataset method)": [[175, "modeva.DataSet.set_target", false]], "set_task_type() (modeva.dataset method)": [[176, "modeva.DataSet.set_task_type", false]], "set_test_idx() (modeva.dataset method)": [[177, "modeva.DataSet.set_test_idx", false]], "set_train_idx() (modeva.dataset method)": [[178, "modeva.DataSet.set_train_idx", false]], "shape (modeva.dataset property)": [[179, "modeva.DataSet.shape", false]], "subsample_random() (modeva.dataset method)": [[180, "modeva.DataSet.subsample_random", false]], "summary() (modeva.dataset method)": [[181, "modeva.DataSet.summary", false]], "table (modeva.utils.results.validationresult attribute)": [[306, "modeva.utils.results.ValidationResult.table", false]], "task_type (modeva.dataset property)": [[182, "modeva.DataSet.task_type", false]], "test_prediction (modeva.dataset property)": [[183, "modeva.DataSet.test_prediction", false]], "test_sample_weight (modeva.dataset property)": [[184, "modeva.DataSet.test_sample_weight", false]], "test_x (modeva.dataset property)": [[185, "modeva.DataSet.test_x", false]], "test_y (modeva.dataset property)": [[186, "modeva.DataSet.test_y", false]], "time_cost_ (modeva.models.mogaminetclassifier attribute)": [[272, "modeva.models.MoGAMINetClassifier.time_cost_", false]], "time_cost_ (modeva.models.mogaminetregressor attribute)": [[273, "modeva.models.MoGAMINetRegressor.time_cost_", false]], "to_df() (modeva.dataset method)": [[187, "modeva.DataSet.to_df", false]], "train() (modeva.modelzoo method)": [[205, "modeva.ModelZoo.train", false]], "train_all() (modeva.modelzoo method)": [[206, "modeva.ModelZoo.train_all", false]], "train_epoch_loss_ (modeva.models.moreludnnclassifier attribute)": [[289, "modeva.models.MoReLUDNNClassifier.train_epoch_loss_", false]], "train_epoch_loss_ (modeva.models.moreludnnregressor attribute)": [[290, "modeva.models.MoReLUDNNRegressor.train_epoch_loss_", false]], "train_prediction (modeva.dataset property)": [[188, "modeva.DataSet.train_prediction", false]], "train_sample_weight (modeva.dataset property)": [[189, "modeva.DataSet.train_sample_weight", false]], "train_x (modeva.dataset property)": [[190, "modeva.DataSet.train_x", false]], "train_y (modeva.dataset property)": [[191, "modeva.DataSet.train_y", false]], "transform() (modeva.dataset method)": [[192, "modeva.DataSet.transform", false]], "tree_ (modeva.models.moglmtreeclassifier attribute)": [[276, "modeva.models.MoGLMTreeClassifier.tree_", false]], "tree_ (modeva.models.moglmtreeregressor attribute)": [[277, "modeva.models.MoGLMTreeRegressor.tree_", false]], "validation_epoch_loss_ (modeva.models.moreludnnclassifier attribute)": [[289, "modeva.models.MoReLUDNNClassifier.validation_epoch_loss_", false]], "validation_epoch_loss_ (modeva.models.moreludnnregressor attribute)": [[290, "modeva.models.MoReLUDNNRegressor.validation_epoch_loss_", false]], "validationresult (class in modeva.utils.results)": [[306, "modeva.utils.results.ValidationResult", false]], "value (modeva.utils.results.validationresult attribute)": [[306, "modeva.utils.results.ValidationResult.value", false]], "x (modeva.dataset property)": [[193, "modeva.DataSet.x", false]], "y (modeva.dataset property)": [[194, "modeva.DataSet.y", false]]}, "objects": {"": [[102, 5, 0, "-", "notebook"]], "modeva.DataSet": [[110, 0, 1, "", "all_feature_names"], [111, 0, 1, "", "all_feature_types"], [112, 1, 1, "", "bin_numerical"], [113, 0, 1, "", "data"], [114, 1, 1, "", "data_drift_test"], [115, 1, 1, "", "delete_extra_data"], [116, 1, 1, "", "delete_registered_data"], [117, 1, 1, "", "detect_outlier_cblof"], [118, 1, 1, "", "detect_outlier_isolation_forest"], [119, 1, 1, "", "detect_outlier_pca"], [120, 1, 1, "", "eda_1d"], [121, 1, 1, "", "eda_2d"], [122, 1, 1, "", "eda_3d"], [123, 1, 1, "", "eda_correlation"], [124, 1, 1, "", "eda_pca"], [125, 1, 1, "", "eda_umap"], [126, 1, 1, "", "encode_categorical"], [127, 0, 1, "", "feature_names"], [128, 0, 1, "", "feature_names_categorical"], [129, 0, 1, "", "feature_names_mixed"], [130, 0, 1, "", "feature_names_numerical"], [131, 1, 1, "", "feature_select_corr"], [132, 1, 1, "", "feature_select_rcit"], [133, 1, 1, "", "feature_select_xgbpfi"], [134, 0, 1, "", "feature_types"], [135, 1, 1, "", "get_X_y_data"], [136, 1, 1, "", "get_data"], [137, 1, 1, "", "get_data_list"], [138, 1, 1, "", "get_extra_data_list"], [139, 1, 1, "", "get_prediction_data"], [140, 1, 1, "", "get_prediction_proba_data"], [141, 1, 1, "", "get_preprocessor"], [142, 1, 1, "", "get_protected_data"], [143, 1, 1, "", "get_raw_data"], [144, 1, 1, "", "impute_missing"], [145, 1, 1, "", "inverse_transform"], [146, 1, 1, "", "is_splitted"], [147, 1, 1, "", "list_registered_data"], [148, 1, 1, "", "load"], [149, 1, 1, "", "load_csv"], [150, 1, 1, "", "load_dataframe"], [151, 1, 1, "", "load_dataframe_train_test"], [152, 1, 1, "", "load_preprocessing"], [153, 1, 1, "", "load_registered_data"], [154, 1, 1, "", "load_spark"], [155, 0, 1, "", "n_features"], [156, 0, 1, "", "name"], [157, 0, 1, "", "prediction"], [158, 1, 1, "", "preprocess"], [159, 0, 1, "", "raw_data"], [160, 1, 1, "", "register"], [161, 1, 1, "", "reset_preprocess"], [162, 0, 1, "", "sample_weight"], [163, 1, 1, "", "save_preprocessing"], [164, 1, 1, "", "scale_numerical"], [165, 1, 1, "", "set_active_features"], [166, 1, 1, "", "set_feature_type"], [167, 1, 1, "", "set_inactive_features"], [168, 1, 1, "", "set_prediction"], [169, 1, 1, "", "set_prediction_proba"], [170, 1, 1, "", "set_protected_data"], [171, 1, 1, "", "set_protected_extra_data"], [172, 1, 1, "", "set_random_split"], [173, 1, 1, "", "set_raw_extra_data"], [174, 1, 1, "", "set_sample_weight"], [175, 1, 1, "", "set_target"], [176, 1, 1, "", "set_task_type"], [177, 1, 1, "", "set_test_idx"], [178, 1, 1, "", "set_train_idx"], [179, 0, 1, "", "shape"], [180, 1, 1, "", "subsample_random"], [181, 1, 1, "", "summary"], [182, 0, 1, "", "task_type"], [183, 0, 1, "", "test_prediction"], [184, 0, 1, "", "test_sample_weight"], [185, 0, 1, "", "test_x"], [186, 0, 1, "", "test_y"], [187, 1, 1, "", "to_df"], [188, 0, 1, "", "train_prediction"], [189, 0, 1, "", "train_sample_weight"], [190, 0, 1, "", "train_x"], [191, 0, 1, "", "train_y"], [192, 1, 1, "", "transform"], [193, 0, 1, "", "x"], [194, 0, 1, "", "y"]], "modeva.ModelZoo": [[195, 1, 1, "", "add_model"], [196, 0, 1, "", "dataset"], [197, 1, 1, "", "delete_registered_model"], [198, 1, 1, "", "get_model"], [199, 1, 1, "", "leaderboard"], [200, 1, 1, "", "list_model_names"], [201, 1, 1, "", "list_registered_models"], [202, 1, 1, "", "load_registered_model"], [203, 0, 1, "", "models"], [204, 1, 1, "", "register"], [205, 1, 1, "", "train"], [206, 1, 1, "", "train_all"]], "modeva.TestSuite": [[207, 1, 1, "", "compare_accuracy_table"], [208, 1, 1, "", "compare_fairness"], [209, 1, 1, "", "compare_reliability"], [210, 1, 1, "", "compare_resilience"], [211, 1, 1, "", "compare_robustness"], [212, 1, 1, "", "compare_slicing_accuracy"], [213, 1, 1, "", "compare_slicing_fairness"], [214, 1, 1, "", "compare_slicing_overfit"], [215, 1, 1, "", "compare_slicing_reliability"], [216, 1, 1, "", "compare_slicing_robustness"], [217, 1, 1, "", "delete_registed_test"], [218, 1, 1, "", "diagnose_accuracy_table"], [219, 1, 1, "", "diagnose_fairness"], [220, 1, 1, "", "diagnose_mitigate_unfair_binning"], [221, 1, 1, "", "diagnose_mitigate_unfair_thresholding"], [222, 1, 1, "", "diagnose_reliability"], [223, 1, 1, "", "diagnose_residual_analysis"], [224, 1, 1, "", "diagnose_residual_cluster"], [225, 1, 1, "", "diagnose_residual_interpret"], [226, 1, 1, "", "diagnose_resilience"], [227, 1, 1, "", "diagnose_robustness"], [228, 1, 1, "", "diagnose_slicing_accuracy"], [229, 1, 1, "", "diagnose_slicing_fairness"], [230, 1, 1, "", "diagnose_slicing_overfit"], [231, 1, 1, "", "diagnose_slicing_reliability"], [232, 1, 1, "", "diagnose_slicing_robustness"], [233, 1, 1, "", "display_test_results"], [234, 1, 1, "", "explain_ale"], [235, 1, 1, "", "explain_hstatistic"], [236, 1, 1, "", "explain_lime"], [237, 1, 1, "", "explain_pdp"], [238, 1, 1, "", "explain_pfi"], [239, 1, 1, "", "explain_shap"], [240, 1, 1, "", "export_report"], [241, 1, 1, "", "get_dataset"], [242, 1, 1, "", "get_interactions"], [243, 1, 1, "", "get_main_effects"], [244, 1, 1, "", "get_model"], [245, 1, 1, "", "interpret_coef"], [246, 1, 1, "", "interpret_effects"], [247, 1, 1, "", "interpret_effects_moe_average"], [248, 1, 1, "", "interpret_fi"], [249, 1, 1, "", "interpret_global_tree"], [250, 1, 1, "", "interpret_llm_pc"], [251, 1, 1, "", "interpret_llm_profile"], [252, 1, 1, "", "interpret_llm_summary"], [253, 1, 1, "", "interpret_llm_violin"], [254, 1, 1, "", "interpret_local_fi"], [255, 1, 1, "", "interpret_local_linear_fi"], [256, 1, 1, "", "interpret_local_moe_weights"], [257, 1, 1, "", "interpret_local_tree"], [258, 1, 1, "", "interpret_moe_cluster_analysis"], [259, 1, 1, "", "list"], [260, 1, 1, "", "list_registered_tests"], [261, 1, 1, "", "load_registered_test"], [262, 1, 1, "", "register"], [263, 1, 1, "", "set_dataset"], [264, 1, 1, "", "set_model"]], "modeva.automation.pipeline": [[265, 2, 1, "", "Pipeline"]], "modeva.automation.pipeline.Pipeline": [[265, 1, 1, "", "add_step"], [265, 1, 1, "", "run"]], "modeva.models": [[266, 2, 1, "", "MoCatBoostClassifier"], [267, 2, 1, "", "MoCatBoostRegressor"], [268, 2, 1, "", "MoClassifier"], [269, 2, 1, "", "MoDecisionTreeClassifier"], [270, 2, 1, "", "MoDecisionTreeRegressor"], [271, 2, 1, "", "MoElasticNet"], [272, 2, 1, "", "MoGAMINetClassifier"], [273, 2, 1, "", "MoGAMINetRegressor"], [274, 2, 1, "", "MoGLMTreeBoostClassifier"], [275, 2, 1, "", "MoGLMTreeBoostRegressor"], [276, 2, 1, "", "MoGLMTreeClassifier"], [277, 2, 1, "", "MoGLMTreeRegressor"], [278, 2, 1, "", "MoGradientBoostingClassifier"], [279, 2, 1, "", "MoGradientBoostingRegressor"], [280, 2, 1, "", "MoLGBMClassifier"], [281, 2, 1, "", "MoLGBMRegressor"], [282, 2, 1, "", "MoLogisticRegression"], [283, 2, 1, "", "MoMoEClassifier"], [284, 2, 1, "", "MoMoERegressor"], [285, 2, 1, "", "MoNeuralTreeClassifier"], [286, 2, 1, "", "MoNeuralTreeRegressor"], [287, 2, 1, "", "MoRandomForestClassifier"], [288, 2, 1, "", "MoRandomForestRegressor"], [289, 2, 1, "", "MoReLUDNNClassifier"], [290, 2, 1, "", "MoReLUDNNRegressor"], [291, 2, 1, "", "MoRegressor"], [292, 2, 1, "", "MoSKLearnClassifier"], [293, 2, 1, "", "MoSKLearnRegressor"], [294, 2, 1, "", "MoScoredClassifier"], [295, 2, 1, "", "MoScoredRegressor"], [296, 2, 1, "", "MoXGBClassifier"], [297, 2, 1, "", "MoXGBRegressor"], [298, 2, 1, "", "ModelTuneGridSearch"], [299, 2, 1, "", "ModelTuneOptuna"], [300, 2, 1, "", "ModelTunePSO"], [301, 2, 1, "", "ModelTuneRandomSearch"]], "modeva.models.MoCatBoostClassifier": [[266, 1, 1, "", "calibrate_interval"], [266, 1, 1, "", "calibrate_proba"], [266, 1, 1, "", "decision_function"], [266, 1, 1, "", "fit"], [266, 1, 1, "", "get_params"], [266, 1, 1, "", "load"], [266, 1, 1, "", "predict"], [266, 1, 1, "", "predict_interval"], [266, 1, 1, "", "predict_proba"], [266, 1, 1, "", "save"], [266, 1, 1, "", "set_params"]], "modeva.models.MoCatBoostRegressor": [[267, 1, 1, "", "calibrate_interval"], [267, 1, 1, "", "fit"], [267, 1, 1, "", "get_params"], [267, 1, 1, "", "load"], [267, 1, 1, "", "predict"], [267, 1, 1, "", "predict_interval"], [267, 1, 1, "", "save"], [267, 1, 1, "", "set_params"]], "modeva.models.MoClassifier": [[268, 1, 1, "", "calibrate_interval"], [268, 1, 1, "", "calibrate_proba"], [268, 1, 1, "", "decision_function"], [268, 1, 1, "", "fit"], [268, 1, 1, "", "get_params"], [268, 1, 1, "", "load"], [268, 1, 1, "", "predict"], [268, 1, 1, "", "predict_interval"], [268, 1, 1, "", "predict_proba"], [268, 1, 1, "", "save"], [268, 1, 1, "", "set_params"]], "modeva.models.MoDecisionTreeClassifier": [[269, 1, 1, "", "calibrate_interval"], [269, 1, 1, "", "calibrate_proba"], [269, 1, 1, "", "decision_function"], [269, 1, 1, "", "fit"], [269, 1, 1, "", "get_params"], [269, 1, 1, "", "load"], [269, 1, 1, "", "predict"], [269, 1, 1, "", "predict_interval"], [269, 1, 1, "", "predict_proba"], [269, 1, 1, "", "save"], [269, 1, 1, "", "set_params"]], "modeva.models.MoDecisionTreeRegressor": [[270, 1, 1, "", "calibrate_interval"], [270, 1, 1, "", "fit"], [270, 1, 1, "", "get_params"], [270, 1, 1, "", "load"], [270, 1, 1, "", "predict"], [270, 1, 1, "", "predict_interval"], [270, 1, 1, "", "save"], [270, 1, 1, "", "set_params"]], "modeva.models.MoElasticNet": [[271, 1, 1, "", "calibrate_interval"], [271, 1, 1, "", "fit"], [271, 1, 1, "", "get_params"], [271, 1, 1, "", "load"], [271, 1, 1, "", "predict"], [271, 1, 1, "", "predict_interval"], [271, 1, 1, "", "save"], [271, 1, 1, "", "set_params"]], "modeva.models.MoGAMINetClassifier": [[272, 3, 1, "", "active_interaction_index_"], [272, 3, 1, "", "active_main_effect_index_"], [272, 1, 1, "", "calibrate_interval"], [272, 1, 1, "", "calibrate_proba"], [272, 1, 1, "", "decision_function"], [272, 1, 1, "", "fit"], [272, 1, 1, "", "get_params"], [272, 3, 1, "", "interaction_list_"], [272, 3, 1, "", "interaction_val_loss_"], [272, 1, 1, "", "load"], [272, 3, 1, "", "main_effect_val_loss_"], [272, 3, 1, "", "n_interactions_"], [272, 3, 1, "", "net_"], [272, 1, 1, "", "predict"], [272, 1, 1, "", "predict_interval"], [272, 1, 1, "", "predict_proba"], [272, 1, 1, "", "save"], [272, 1, 1, "", "set_params"], [272, 3, 1, "", "time_cost_"]], "modeva.models.MoGAMINetRegressor": [[273, 3, 1, "", "active_interaction_index_"], [273, 3, 1, "", "active_main_effect_index_"], [273, 1, 1, "", "calibrate_interval"], [273, 1, 1, "", "fit"], [273, 1, 1, "", "get_params"], [273, 3, 1, "", "interaction_list_"], [273, 3, 1, "", "interaction_val_loss_"], [273, 1, 1, "", "load"], [273, 3, 1, "", "main_effect_val_loss_"], [273, 3, 1, "", "n_interactions_"], [273, 3, 1, "", "net_"], [273, 1, 1, "", "predict"], [273, 1, 1, "", "predict_interval"], [273, 1, 1, "", "save"], [273, 1, 1, "", "set_params"], [273, 3, 1, "", "time_cost_"]], "modeva.models.MoGLMTreeBoostClassifier": [[274, 1, 1, "", "calibrate_interval"], [274, 1, 1, "", "calibrate_proba"], [274, 1, 1, "", "decision_function"], [274, 3, 1, "", "estimators_"], [274, 1, 1, "", "fit"], [274, 1, 1, "", "get_params"], [274, 1, 1, "", "load"], [274, 3, 1, "", "n_features_in_"], [274, 1, 1, "", "predict"], [274, 1, 1, "", "predict_interval"], [274, 1, 1, "", "predict_proba"], [274, 1, 1, "", "save"], [274, 1, 1, "", "set_params"]], "modeva.models.MoGLMTreeBoostRegressor": [[275, 1, 1, "", "calibrate_interval"], [275, 3, 1, "", "estimators_"], [275, 1, 1, "", "fit"], [275, 1, 1, "", "get_params"], [275, 1, 1, "", "load"], [275, 3, 1, "", "n_features_in_"], [275, 1, 1, "", "predict"], [275, 1, 1, "", "predict_interval"], [275, 1, 1, "", "save"], [275, 1, 1, "", "set_params"]], "modeva.models.MoGLMTreeClassifier": [[276, 1, 1, "", "calibrate_interval"], [276, 1, 1, "", "calibrate_proba"], [276, 1, 1, "", "decision_function"], [276, 1, 1, "", "get_params"], [276, 3, 1, "", "leaf_estimators_"], [276, 1, 1, "", "load"], [276, 1, 1, "", "predict"], [276, 1, 1, "", "predict_interval"], [276, 1, 1, "", "predict_proba"], [276, 1, 1, "", "save"], [276, 1, 1, "", "set_params"], [276, 3, 1, "", "tree_"]], "modeva.models.MoGLMTreeRegressor": [[277, 1, 1, "", "calibrate_interval"], [277, 1, 1, "", "get_params"], [277, 1, 1, "", "load"], [277, 1, 1, "", "predict"], [277, 1, 1, "", "predict_interval"], [277, 1, 1, "", "save"], [277, 1, 1, "", "set_params"], [277, 3, 1, "", "tree_"]], "modeva.models.MoGradientBoostingClassifier": [[278, 1, 1, "", "calibrate_interval"], [278, 1, 1, "", "calibrate_proba"], [278, 1, 1, "", "decision_function"], [278, 1, 1, "", "fit"], [278, 1, 1, "", "get_params"], [278, 1, 1, "", "load"], [278, 1, 1, "", "predict"], [278, 1, 1, "", "predict_interval"], [278, 1, 1, "", "predict_proba"], [278, 1, 1, "", "save"], [278, 1, 1, "", "set_params"]], "modeva.models.MoGradientBoostingRegressor": [[279, 1, 1, "", "calibrate_interval"], [279, 1, 1, "", "fit"], [279, 1, 1, "", "get_params"], [279, 1, 1, "", "load"], [279, 1, 1, "", "predict"], [279, 1, 1, "", "predict_interval"], [279, 1, 1, "", "save"], [279, 1, 1, "", "set_params"]], "modeva.models.MoLGBMClassifier": [[280, 1, 1, "", "calibrate_interval"], [280, 1, 1, "", "calibrate_proba"], [280, 1, 1, "", "decision_function"], [280, 1, 1, "", "fit"], [280, 1, 1, "", "get_params"], [280, 1, 1, "", "load"], [280, 1, 1, "", "predict"], [280, 1, 1, "", "predict_interval"], [280, 1, 1, "", "predict_proba"], [280, 1, 1, "", "save"], [280, 1, 1, "", "set_params"]], "modeva.models.MoLGBMRegressor": [[281, 1, 1, "", "calibrate_interval"], [281, 1, 1, "", "fit"], [281, 1, 1, "", "get_params"], [281, 1, 1, "", "load"], [281, 1, 1, "", "predict"], [281, 1, 1, "", "predict_interval"], [281, 1, 1, "", "save"], [281, 1, 1, "", "set_params"]], "modeva.models.MoLogisticRegression": [[282, 1, 1, "", "calibrate_interval"], [282, 1, 1, "", "calibrate_proba"], [282, 1, 1, "", "decision_function"], [282, 1, 1, "", "fit"], [282, 1, 1, "", "get_params"], [282, 1, 1, "", "load"], [282, 1, 1, "", "predict"], [282, 1, 1, "", "predict_interval"], [282, 1, 1, "", "predict_proba"], [282, 1, 1, "", "save"], [282, 1, 1, "", "set_params"]], "modeva.models.MoMoEClassifier": [[283, 1, 1, "", "calibrate_interval"], [283, 1, 1, "", "calibrate_proba"], [283, 1, 1, "", "decision_function"], [283, 1, 1, "", "fit"], [283, 1, 1, "", "get_params"], [283, 1, 1, "", "load"], [283, 1, 1, "", "predict"], [283, 1, 1, "", "predict_interval"], [283, 1, 1, "", "predict_proba"], [283, 1, 1, "", "save"], [283, 1, 1, "", "set_params"]], "modeva.models.MoMoERegressor": [[284, 1, 1, "", "calibrate_interval"], [284, 1, 1, "", "fit"], [284, 1, 1, "", "get_params"], [284, 1, 1, "", "load"], [284, 1, 1, "", "predict"], [284, 1, 1, "", "predict_interval"], [284, 1, 1, "", "save"], [284, 1, 1, "", "set_params"]], "modeva.models.MoNeuralTreeClassifier": [[285, 1, 1, "", "calibrate_interval"], [285, 1, 1, "", "calibrate_proba"], [285, 1, 1, "", "decision_function"], [285, 1, 1, "", "get_params"], [285, 1, 1, "", "load"], [285, 3, 1, "", "net_"], [285, 1, 1, "", "predict"], [285, 1, 1, "", "predict_interval"], [285, 1, 1, "", "predict_proba"], [285, 1, 1, "", "save"], [285, 1, 1, "", "set_params"]], "modeva.models.MoNeuralTreeRegressor": [[286, 1, 1, "", "calibrate_interval"], [286, 1, 1, "", "get_params"], [286, 1, 1, "", "load"], [286, 3, 1, "", "net_"], [286, 1, 1, "", "predict"], [286, 1, 1, "", "predict_interval"], [286, 1, 1, "", "save"], [286, 1, 1, "", "set_params"]], "modeva.models.MoRandomForestClassifier": [[287, 1, 1, "", "calibrate_interval"], [287, 1, 1, "", "calibrate_proba"], [287, 1, 1, "", "decision_function"], [287, 1, 1, "", "fit"], [287, 1, 1, "", "get_params"], [287, 1, 1, "", "load"], [287, 1, 1, "", "predict"], [287, 1, 1, "", "predict_interval"], [287, 1, 1, "", "predict_proba"], [287, 1, 1, "", "save"], [287, 1, 1, "", "set_params"]], "modeva.models.MoRandomForestRegressor": [[288, 1, 1, "", "calibrate_interval"], [288, 1, 1, "", "fit"], [288, 1, 1, "", "get_params"], [288, 1, 1, "", "load"], [288, 1, 1, "", "predict"], [288, 1, 1, "", "predict_interval"], [288, 1, 1, "", "save"], [288, 1, 1, "", "set_params"]], "modeva.models.MoReLUDNNClassifier": [[289, 1, 1, "", "calibrate_interval"], [289, 1, 1, "", "calibrate_proba"], [289, 1, 1, "", "decision_function"], [289, 1, 1, "", "fit"], [289, 1, 1, "", "get_params"], [289, 1, 1, "", "load"], [289, 3, 1, "", "net_"], [289, 1, 1, "", "predict"], [289, 1, 1, "", "predict_interval"], [289, 1, 1, "", "predict_proba"], [289, 1, 1, "", "save"], [289, 1, 1, "", "set_params"], [289, 3, 1, "", "train_epoch_loss_"], [289, 3, 1, "", "validation_epoch_loss_"]], "modeva.models.MoReLUDNNRegressor": [[290, 1, 1, "", "calibrate_interval"], [290, 1, 1, "", "fit"], [290, 1, 1, "", "get_params"], [290, 1, 1, "", "load"], [290, 3, 1, "", "net_"], [290, 1, 1, "", "predict"], [290, 1, 1, "", "predict_interval"], [290, 1, 1, "", "save"], [290, 1, 1, "", "set_params"], [290, 3, 1, "", "train_epoch_loss_"], [290, 3, 1, "", "validation_epoch_loss_"]], "modeva.models.MoRegressor": [[291, 1, 1, "", "calibrate_interval"], [291, 1, 1, "", "fit"], [291, 1, 1, "", "get_params"], [291, 1, 1, "", "load"], [291, 1, 1, "", "predict"], [291, 1, 1, "", "predict_interval"], [291, 1, 1, "", "save"], [291, 1, 1, "", "set_params"]], "modeva.models.MoSKLearnClassifier": [[292, 1, 1, "", "calibrate_interval"], [292, 1, 1, "", "calibrate_proba"], [292, 1, 1, "", "decision_function"], [292, 1, 1, "", "fit"], [292, 1, 1, "", "get_params"], [292, 1, 1, "", "load"], [292, 1, 1, "", "predict"], [292, 1, 1, "", "predict_interval"], [292, 1, 1, "", "predict_proba"], [292, 1, 1, "", "save"], [292, 1, 1, "", "set_params"]], "modeva.models.MoSKLearnRegressor": [[293, 1, 1, "", "calibrate_interval"], [293, 1, 1, "", "fit"], [293, 1, 1, "", "get_params"], [293, 1, 1, "", "load"], [293, 1, 1, "", "predict"], [293, 1, 1, "", "predict_interval"], [293, 1, 1, "", "save"], [293, 1, 1, "", "set_params"]], "modeva.models.MoScoredClassifier": [[294, 1, 1, "", "calibrate_interval"], [294, 1, 1, "", "calibrate_proba"], [294, 1, 1, "", "decision_function"], [294, 1, 1, "", "get_params"], [294, 1, 1, "", "load"], [294, 1, 1, "", "predict"], [294, 1, 1, "", "predict_interval"], [294, 1, 1, "", "predict_proba"], [294, 1, 1, "", "save"], [294, 1, 1, "", "set_params"]], "modeva.models.MoScoredRegressor": [[295, 1, 1, "", "calibrate_interval"], [295, 1, 1, "", "get_params"], [295, 1, 1, "", "load"], [295, 1, 1, "", "predict"], [295, 1, 1, "", "predict_interval"], [295, 1, 1, "", "save"], [295, 1, 1, "", "set_params"]], "modeva.models.MoXGBClassifier": [[296, 1, 1, "", "calibrate_interval"], [296, 1, 1, "", "calibrate_proba"], [296, 1, 1, "", "decision_function"], [296, 1, 1, "", "fit"], [296, 1, 1, "", "get_params"], [296, 1, 1, "", "load"], [296, 1, 1, "", "predict"], [296, 1, 1, "", "predict_interval"], [296, 1, 1, "", "predict_proba"], [296, 1, 1, "", "save"], [296, 1, 1, "", "set_params"]], "modeva.models.MoXGBRegressor": [[297, 1, 1, "", "calibrate_interval"], [297, 1, 1, "", "fit"], [297, 1, 1, "", "get_params"], [297, 1, 1, "", "load"], [297, 1, 1, "", "predict"], [297, 1, 1, "", "predict_interval"], [297, 1, 1, "", "save"], [297, 1, 1, "", "set_params"]], "modeva.models.ModelTuneGridSearch": [[298, 1, 1, "", "run"]], "modeva.models.ModelTuneOptuna": [[299, 1, 1, "", "run"]], "modeva.models.ModelTunePSO": [[300, 1, 1, "", "run"]], "modeva.models.ModelTuneRandomSearch": [[301, 1, 1, "", "run"]], "modeva.testsuite.utils.slicing_utils": [[302, 4, 1, "", "get_data_info"]], "modeva.utils.mlflow": [[303, 4, 1, "", "clear_mlflow_home"], [304, 4, 1, "", "get_mlflow_home"], [305, 4, 1, "", "set_mlflow_home"]], "modeva.utils.results": [[306, 2, 1, "", "ValidationResult"]], "modeva.utils.results.ValidationResult": [[306, 3, 1, "", "data"], [306, 3, 1, "", "func"], [306, 1, 1, "", "get_figure_names"], [306, 3, 1, "", "inputs"], [306, 3, 1, "", "key"], [306, 3, 1, "", "model"], [306, 3, 1, "", "options"], [306, 1, 1, "", "plot"], [306, 1, 1, "", "plot_save"], [306, 3, 1, "", "table"], [306, 3, 1, "", "value"]], "sphinx_gallery.utils": [[106, 4, 1, "", "optipng"]]}, "objnames": {"0": ["py", "property", "Python property"], "1": ["py", "method", "Python method"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "module", "Python module"]}, "objtypes": {"0": "py:property", "1": "py:method", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:module"}, "terms": {"": [5, 49, 112, 123, 131, 135, 136, 139, 140, 142, 143, 207, 212, 213, 214, 215, 216, 218, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 245, 246, 248, 249, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 317, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 334, 336, 337, 338, 342, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373], "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 107, 112, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 144, 164, 172, 180, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 247, 254, 255, 256, 257, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 317, 318, 319, 322, 323, 325, 326, 331, 332, 333, 335, 336, 338, 341, 343, 344, 346, 348, 350, 351, 354, 355, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 378], "00": [8, 9, 10, 21, 22, 25, 27, 35, 47, 49, 59, 63, 64, 67, 68, 71, 72, 79, 80, 83, 378], "000": [36, 72, 317, 352, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 378], "0000": [8, 9, 10, 17, 23, 24, 45, 52, 67, 71, 79, 83], "000000": [2, 3, 5], "00000002e": 25, "000028": 5, "000043": [2, 5], "0001": [14, 23, 24, 44, 46, 272, 273, 285, 286], "0002": [20, 23, 24, 46, 52, 67, 360], "00021112504082323335": 52, "000213": 13, "0003": [24, 57, 68, 86], "0004": [23, 43], "000434": [2, 3, 5], "0004342": 2, "000488": 322, "0005": 86, "00065090e": 25, "0007": [23, 24, 52], "0007069232358482019": 52, "0008": 23, "000806": 15, "0008e": 23, "0009": [20, 44], "000e": 10, "001": [23, 24, 25, 26, 43, 45, 46, 49, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 272, 273, 285, 286, 289, 290, 360, 373], "0010": [23, 24, 86], "0012": 23, "0013": [19, 44, 46], "001398e": 333, "0014": 34, "00162004": 40, "0017": 43, "00178131": 25, "0019": [23, 43], "0020": [52, 68], "002041522022738862": 52, "0021": 68, "00214606": 25, "0022": [23, 35], "0023": 25, "0024": 24, "0025": 24, "0025790630388779416": 52, "00259": 24, "0026": [20, 23, 24, 52], "00260": 24, "00262": 24, "00263": 24, "00267": 24, "00268": 24, "0027": 20, "00272": 24, "00278": 24, "0028": 34, "00286": 24, "00287": 24, "00289": 24, "0029": [20, 86], "00291": 24, "00292": 24, "00293": 24, "00295": 24, "00297": 24, "0030": [23, 26], "00302": 24, "00307": 24, "0031": 86, "003126e": 333, "00315": 24, "0033984293947358856": 52, "0034": [23, 52], "00340": 24, "003448": 15, "00347": 24, "00354": 24, "00354041": 25, "0036": [24, 86], "00369": 24, "00371": 24, "003728": 15, "0038": 24, "00380": 24, "00382": 323, "00387936": 25, "00388": 24, "0039": [19, 24, 25, 38], "0040": 24, "004039": 13, "0041": 18, "0042": [18, 23, 24, 43], "00420": 24, "0043": [18, 24], "0044": [18, 24], "00441816": 25, "00444": 24, "0045": [18, 24, 46], "0046": 18, "0047": [18, 24, 46], "00471474": 25, "0048": [18, 24], "0049": [18, 24, 34, 46], "00490": 24, "0050": [18, 24, 34], "0051": [18, 24, 67], "0052": [18, 24, 86], "0053": [18, 24], "0054": 18, "0055": [18, 24], "005583": 13, "0056": 18, "00568": 24, "0057": [18, 26, 38], "00578035e": 21, "0058": 18, "0059": 18, "0060": 18, "006083": 15, "0061": [18, 34, 35], "0062": [18, 35], "0063": 18, "0065": [18, 365], "0066": 18, "0067": [24, 35], "00676261": 25, "0069": [18, 46], "0070": 18, "0071": 23, "0072": 18, "0073": 43, "0075": 18, "0076": 18, "007705": 14, "007752": 13, "0078": 34, "0079": [18, 23], "0080": [18, 80], "0081": [18, 46], "00813082": 25, "00817011": 25, "0082": [23, 68], "008289": 15, "0083": 86, "00835": 24, "0084": [26, 67], "0085": [18, 23, 25], "0086": 23, "00866784": 8, "0087": 23, "00876838": 8, "0088": 18, "00881300e": 25, "00889805": 25, "0090": [18, 19], "0091": 19, "0093": 25, "00935902": 25, "0094": 18, "0095": [18, 19, 25], "009701": 9, "009832": 14, "0099": 18, "00996485": 25, "01": [4, 10, 14, 21, 22, 23, 25, 27, 34, 36, 41, 43, 45, 46, 47, 49, 83, 272, 273, 300, 357, 369, 378], "0100": 18, "0101": 23, "0105": 18, "01055193": 25, "0107": 22, "01075141": 25, "0110": 18, "011016": 13, "01136341": 25, "0115": [18, 44], "01159481": 8, "0116": 86, "01185624": 25, "0120": 18, "0121": 46, "01217": 24, "0124": [18, 67], "0125": 18, "0126": 23, "012624": 14, "01265278": 25, "0128": 18, "01286074": 25, "0129": 18, "01298327": 8, "013": [58, 59, 378], "0130": 68, "0134": 18, "0135": [18, 43], "01355191": 25, "01358633": 25, "0136e": 18, "0137": 18, "01371426": 25, "01398571": 25, "0140": 18, "0142": 18, "0143": [18, 43], "0145": 18, "0146": 18, "0148": 18, "0149": [23, 46], "0150": 18, "0151": [18, 43], "0152": 18, "0154": [18, 34, 46], "0155": 18, "0156": 18, "0157": 18, "0158": 18, "0160": 18, "0161": 18, "0162": 18, "0163": 18, "0164": [18, 23, 68], "01641528": 25, "0165": 18, "01658904": 25, "0166": [18, 34], "0168": 18, "0169": [18, 68], "0170": 18, "01700743": 25, "017097": 14, "0171": 18, "0172": [18, 43], "0173": [18, 24], "0174": 68, "0175": [18, 46], "017541e": 333, "0176": 67, "0177": [18, 68], "01777708": 8, "0178": 68, "0179": 46, "0180": 18, "0181": [18, 67], "01815329": 25, "0182": 18, "0183": 18, "01830676": 40, "0184": 18, "0185": 18, "0188": 67, "01883298": 25, "0189": 18, "01901355": 25, "0191": [18, 68], "0194": 18, "0196": 46, "0197": [18, 68], "0198": 80, "0198504": 25, "02": [10, 11, 27, 34, 36, 41, 43, 49, 63, 65, 68, 72, 83, 333, 369, 378], "0201": 18, "0202": 68, "0204": 68, "020537e": 333, "0206": [18, 68], "02073921": 25, "0211": [18, 22, 46], "021241": 16, "021339": 16, "0215": 18, "0218": 18, "02180920e": 25, "022": [79, 81, 378], "02204623": 25, "0221": 18, "02214641": 25, "0222": [45, 68], "0223": 44, "0224": [22, 44], "022405e": 333, "0225": 18, "02270906": 25, "02299061": 25, "0233": 18, "0235": [21, 62], "02353739": 8, "023606": 3, "0237": 68, "0238": 18, "02418091": 25, "0242": 21, "0244": [18, 68], "0247": 18, "02474484": 25, "0248": [18, 68], "0250": [23, 34], "0251": 67, "0252": 18, "0254": [35, 45], "02541088": 25, "0255": [18, 68], "0257": 80, "0258": 18, "0261": 18, "0262": 68, "0263": 18, "0264": 80, "02643381": 25, "0265": 18, "0267": 44, "0268": [18, 68], "0269": 34, "026928": 14, "0271": [18, 67], "0278": 18, "0284": 18, "0287": 67, "0287415": 25, "028757": 5, "02922558": 25, "029384": [2, 5], "02953576": 25, "0296": 23, "03": [2, 11, 18, 24, 27, 43, 49, 55, 63, 77, 79, 88, 333, 378], "030": [44, 47, 378], "0300": 18, "03026423": 25, "0303": 8, "0306": 43, "03081845": 25, "0310": 43, "0311": 35, "03114211": 25, "0312": [18, 83], "03135314e": 22, "0317": 67, "0318": 23, "0319": 67, "0324": [34, 68], "0325": 67, "03263528": 17, "03267184": 25, "0328": 34, "03286639": 25, "0334": 24, "0336": [67, 68], "0337": 67, "0341": 43, "03414900e": 25, "0342": 43, "0343": 18, "0345": 44, "034555e": 333, "0345931": 25, "0349187": 25, "035233": 3, "0353": 71, "0355": 31, "03566952": 25, "03576016": 25, "0358": 24, "0366": 44, "0367": 20, "0368": 24, "036867": 3, "0369": 68, "0371": 35, "0372": 18, "0376": [20, 68], "0377": 23, "0381": 68, "0387": [23, 68], "03888": [331, 338], "03964159": 25, "0397": 68, "0398": [68, 71], "04": [8, 11, 18, 21, 43, 49, 65, 72, 333, 338, 378], "04027566": 25, "04028322": 25, "04034364": 25, "0408": 68, "0411": 68, "0414": 18, "0417": [57, 68], "041787": [2, 5], "04199568": 25, "0421": 35, "0423": [58, 62], "0423956": 25, "0425": 34, "04257239": 25, "04270729": 25, "0430": 68, "04318783": 25, "04341139": 25, "04367255e": 25, "0439": 35, "04415915e": 25, "0443": 68, "0444": 24, "0448": 86, "04500528": 25, "0451": 24, "0452": 68, "0454": 68, "045e": 10, "0466": 68, "0467": [34, 80], "04677684": 25, "04687064": 25, "0471": [18, 31], "0473": 45, "0474": 68, "047750": 16, "0478": 17, "04787676": 25, "0479": 62, "0481": 43, "0488": 58, "04900599": 25, "04949369": 25, "04975605": 25, "0498": 68, "05": [11, 18, 23, 24, 34, 43, 46, 49, 63, 65, 73, 81, 289, 290, 343, 344, 378], "0501": 45, "0505": 68, "0506": 45, "05087281": 25, "0509": 45, "0516": 67, "05168332976549405": 52, "0517": 52, "0519": [34, 68], "0520": 68, "05253822": 25, "052885": 9, "0530": 18, "0531": 45, "0532": [23, 44], "0534514": 25, "05348493": 8, "0536": 68, "0537": 71, "0538": 80, "0540": 52, "05400321268524999": 52, "05408157": 25, "05424298": 25, "0543": 83, "0544": 34, "0546": 24, "0547": 24, "0548": 43, "0549": 68, "05490845": 25, "0550": 46, "055148": 9, "05536766": 25, "0556": 45, "0557": 43, "0559": 45, "05596207": 8, "05606344": 8, "0563": [35, 43], "056328": 3, "05644409": 25, "0566": 45, "0567": 45, "0577": 45, "0578": 45, "05781800e": 22, "0578455": 25, "0579": 45, "05801912": 25, "0582": 43, "05822533": 25, "0586": 31, "0588013": 25, "0590748": 25, "0591": [23, 68], "0594": 45, "0598": 45, "0599": [62, 68], "06": [18, 49, 55, 63, 132, 333, 378], "0601": 23, "0602": 68, "0606": 45, "06129566246677624": 52, "0613": [52, 80], "0614": 43, "061519": 3, "06170845": 8, "0618": 45, "0619": 68, "062": [76, 77, 378], "0623": 68, "0626": 67, "06263672": 8, "062784e": 333, "0633": 18, "0636": 18, "0639": 68, "0644": [44, 80], "0647": 35, "06531028": 25, "06555223": 25, "0656": 68, "0659": 80, "066": [40, 41, 378], "0660": 68, "0661": 68, "0664": 45, "0667": 80, "0668": 45, "0669": 68, "0673": 45, "067656": 9, "0677": 46, "06773650231647646": 46, "06786967": 25, "0682": 68, "0683": 45, "0684": 61, "0688": 45, "0689": 34, "069200": 3, "06939929": 8, "0695": [44, 45, 68], "0697": [35, 68], "07": [34, 49, 63, 88, 333, 338, 378], "07045835": 25, "0707": 34, "07084209": 25, "0713": 45, "07145943": 25, "071514": [2, 5], "0717": 45, "0720": [45, 57], "0722": 68, "072233": 49, "0724": 21, "07256868277920407": 52, "0726": 52, "0727": 68, "0728": 45, "0728663": 25, "072997": 49, "0730": 45, "0734": 44, "0737": 35, "073938": [2, 5], "0740": 45, "07412234": 25, "0744": 45, "07458042": 25, "0746": 18, "074631": 3, "07463474": 25, "0748": 80, "0749": 18, "07496113": 25, "0752": 45, "07552771": 18, "07558263": 25, "0758": [45, 68], "0760": [44, 45], "0762": 35, "0763": 45, "0764496": 25, "0765": 67, "07686822": 25, "07697435": 8, "0770": 68, "0772": 18, "0773e": 18, "0774": [45, 68], "0776": 44, "07869662": 17, "0788": 68, "0789": 44, "0790": 18, "0790521": 25, "0793": 23, "07944137": 8, "079543": [2, 5], "08": [68, 69, 333, 378], "080": [24, 27, 378], "0801": [45, 68], "080281": 9, "0805": 68, "0806": 46, "08114306": 25, "0812": [44, 68], "08127522": 25, "0820": [34, 80], "0822": 45, "083151": 9, "0833": 23, "08340998": 8, "0836": 68, "08417148": 8, "0842": 45, "0849": 35, "0852": 68, "0854": 45, "0856": 71, "08572601": 25, "0860": 68, "0860051": 8, "0862": 68, "086518": 9, "0876": 44, "0877": 58, "0879": 17, "0880": 67, "0884": [17, 68], "0886037": 17, "08875921": 25, "08920078": 25, "08939452": 8, "0896": 10, "0897": 67, "09": [71, 73, 333, 378], "0900": 68, "0902": [62, 68], "0905": 68, "0906": 45, "0909": 45, "0913": 45, "09141124": 17, "0919": 68, "0920": 67, "0921": 22, "09213148": 8, "0926": 68, "092995": 49, "0930": 68, "093091": 9, "0931": 80, "09315457": 8, "0932": 23, "0934e": 34, "094": 378, "0940": 21, "0942": 68, "0944": 80, "0960": 44, "0962": 80, "0963": 45, "0972": 68, "09737877": 25, "097382": 9, "0977724": 25, "09817635": 25, "0982": 67, "09821501": 25, "0985": 35, "0989": 18, "09906073": 25, "0991": 68, "09918538": 25, "099335": 3, "0_model": 378, "0_residu": 378, "1": [2, 3, 4, 5, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 29, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 107, 112, 117, 118, 119, 123, 125, 133, 164, 180, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 237, 239, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 318, 322, 323, 325, 326, 328, 330, 331, 364], "10": [2, 3, 4, 5, 9, 10, 11, 17, 18, 21, 22, 23, 24, 25, 26, 34, 35, 43, 44, 45, 46, 49, 52, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 81, 83, 86, 107, 112, 114, 117, 120, 133, 180, 210, 211, 212, 213, 214, 215, 216, 220, 224, 226, 227, 228, 229, 230, 231, 232, 235, 238, 272, 273, 276, 277, 283, 284, 285, 286, 289, 290, 299, 300, 301, 317, 319, 321, 322, 323, 327, 328, 332, 333, 334, 335, 336, 341, 352, 354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369, 370, 373, 378], "100": [9, 10, 17, 18, 23, 24, 25, 26, 43, 45, 46, 49, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 118, 125, 224, 225, 226, 247, 272, 273, 274, 275, 300, 326, 332, 334, 336, 338, 350, 354, 355, 356, 358, 359, 364, 365, 366, 367, 368, 369, 370, 373], "1000": [3, 6, 7, 10, 14, 23, 24, 44, 52, 79, 122, 164, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 272, 273, 285, 286, 289, 290, 328, 373], "10000": [3, 5, 34, 35, 52, 272, 273, 322], "100000": 2, "1000000": [3, 5, 63, 370], "10004": 6, "1001": 21, "10020": 6, "10027": 6, "1003": 35, "10034": 6, "10039": 6, "1004": 80, "10054": 6, "10063": 6, "10074": 6, "10080": 6, "10087": 6, "10091232": 25, "100e": 10, "101": 67, "1010": 68, "1011": 35, "1013": 6, "10134": 6, "1015": 35, "1016": 35, "10160": 6, "1017": 8, "1018": 6, "10181518e": 22, "1019": 35, "10202": 6, "10218": 6, "1024": 68, "10276521e": 22, "10279": 6, "10284346": 25, "10287": 6, "10294": 6, "10295": 6, "103": [6, 9], "10310": 6, "10323": 6, "10331": 6, "10344": 6, "10369": 6, "10388": 6, "104": [63, 67, 71], "10444": 6, "10448": 6, "1045": 10, "10452": 6, "10459": 6, "10469937": 17, "10471": 6, "10481": 6, "10487": 6, "1049": 35, "105": 68, "1051": 80, "105361": 5, "1054": 58, "10544": 6, "10549": 6, "105570": 360, "10561": 6, "10564": 6, "1057": 6, "10571": 6, "10572": 6, "10585": 3, "1059": 330, "10594": 6, "106133": 3, "10623": 6, "10639": 6, "10659": 6, "1066": 68, "10666": 6, "10667": 6, "10674": 6, "10685": 6, "10698844e": 22, "1071": 17, "10711": 6, "1072": 68, "10722": 6, "10723": 6, "1073": 68, "10743": [6, 9], "10759": 6, "1076": 68, "10769": 6, "1077": 68, "1078": [6, 68], "1079": 68, "108": 71, "1081": 68, "10818": 6, "10820": 6, "10829": 6, "10849": 6, "10855": 6, "1086": [6, 330], "10861737": 25, "10869": 6, "1087": 80, "10870": 6, "10875": 6, "10876": 6, "10880": 6, "1090": 34, "10941": 6, "10947": 6, "10954": 6, "10977": 6, "1098": 68, "10989": 6, "1099": [8, 68], "11": [3, 5, 9, 17, 18, 22, 23, 24, 25, 27, 34, 43, 44, 45, 49, 63, 64, 67, 68, 71, 72, 79, 80, 83, 107, 333, 335, 378], "110": [10, 68], "1100": [21, 68], "110027e": 333, "11003": 6, "11008": 6, "1101": 68, "11018": 6, "1102": 34, "11022302e": 22, "1103": [6, 68], "1104": 68, "11058": 6, "1107": 64, "11086": 6, "1109": [323, 327], "110928": 49, "1110": [9, 68], "11109": 6, "11113": 6, "111206": 9, "11126": 6, "11153": 6, "11159": 6, "11185": 6, "11192": 6, "112": [9, 68], "11229": 6, "1123": 68, "1124": 6, "11243": 6, "1125": [63, 67, 68, 71, 79], "11257": 6, "113": [18, 58], "11304": 6, "1131": 68, "1132": 68, "11339": 6, "1134": 71, "11356": 6, "1137": 34, "113943": [2, 5], "1139433": 2, "11398": 6, "11399": 6, "1141": 68, "11413": 6, "11415": 6, "1143": 6, "11445087e": 21, "1145": [6, 22], "11454": 6, "1146": 68, "11469": 6, "11473": 6, "11476": 6, "1149": 68, "11493": 6, "11499": 6, "115": 9, "11510": 6, "11541": 6, "11559": 6, "1156": 23, "11563613": 25, "1157": 45, "11570": 6, "11573": 6, "11588": 6, "11589": 6, "116": [123, 325], "1160": 9, "1161": 68, "1162": 68, "1163": 18, "1164": [17, 68], "11644": 6, "1165": 68, "1166": [9, 68], "11673": 6, "1168": 9, "11689": 6, "11690": 6, "117": 58, "1170": 68, "11704": 6, "1171": [9, 68], "1172": 6, "11725": 6, "1173": 68, "1175": [9, 68], "11754": 6, "11765": 6, "11769": 6, "1178": 68, "118": [23, 27, 378], "1181": 64, "1182": [6, 68], "11835": 6, "118367": 3, "1186": 68, "11862": 6, "1187": 6, "11879": 6, "1188": [67, 71, 79], "11885": 6, "11888": 3, "1189": 330, "119": [9, 10], "1191": [67, 79], "1193": 68, "1194": 6, "11944": 6, "1195": 6, "11952": 6, "1196": 34, "11962": 6, "1196592": 8, "1197": 63, "11972": 6, "1199": [35, 68], "11991488": 8, "11997": 6, "12": [5, 6, 8, 9, 10, 17, 18, 23, 24, 25, 43, 44, 45, 49, 52, 63, 64, 67, 68, 71, 72, 79, 80, 83, 107, 333], "120": [10, 58, 68], "1200": 79, "120000": 2, "12004": 6, "1201": 68, "1202": 326, "12023": 6, "12043": 6, "12047": 6, "12051": 6, "12052": 6, "12056": 6, "12060": 6, "1207": 68, "12071": 6, "12080": 6, "12087": 6, "1209": 80, "121": 68, "121012": 49, "12105": 6, "12119": 6, "1212": 68, "12122": 6, "1213": 80, "12135": 6, "1214": 67, "12141": 6, "122": 68, "1220": 68, "12200": 6, "12214548": 8, "1222": 23, "12237": 6, "12244993": 25, "1225": 8, "12252": 6, "12260411": 25, "1229": 68, "123": 57, "12302": 6, "1232": 330, "12325": 6, "12330": 6, "12338": 6, "1234": [29, 30], "12390": 6, "12392": 6, "124": [6, 10, 57], "12409": 6, "1241": 68, "1242532": 25, "12434": 6, "1245": 8, "12467": 6, "12470": 6, "12490": 6, "12493": 6, "1250": 67, "125000": 25, "1252": 64, "125214": 9, "1255": 68, "12559": 6, "12567": 6, "1257": 24, "1258": 68, "12587": 6, "12592": 6, "126": [63, 67], "12601156e": 21, "12622": 6, "12624014": 25, "1263": [64, 68], "12634": 9, "12640": 6, "12658": 6, "126704": 49, "12674": 6, "1268": 68, "12692": 6, "12693": 6, "127": 6, "1270": 34, "12716": 6, "12718679": 25, "12735": 6, "12754": 6, "12759": 6, "1276": 44, "1276295": 25, "12788": 6, "128": 71, "1280": 68, "12805": 6, "12806": 6, "12815": 6, "12817": 6, "1282": [64, 67, 68], "12846": 6, "12863": 6, "1287": [68, 80], "12870": 6, "12881": 6, "12899": 6, "129": 80, "1290": [6, 68], "12914": 6, "12920": 6, "12925": 6, "12929": 6, "129473": 8, "12971": 6, "129740": 5, "129745": 3, "1298": 6, "12982": 6, "12983": 6, "12989": 6, "13": [5, 8, 9, 10, 17, 18, 23, 24, 25, 27, 43, 44, 45, 49, 63, 64, 67, 68, 71, 79, 80, 323, 333, 378], "1301": 80, "13013": 6, "13021": 6, "1303": [6, 34, 68], "13032": 6, "130323": 49, "13036": 6, "13044491": 18, "1305": [57, 68], "13050": 6, "13055": 6, "13068": 6, "130687": 49, "1307": 23, "13071": 6, "13073": 6, "13080": 6, "1309": 68, "130937": 49, "130939": 49, "130998": 49, "131": [58, 71], "1310": 6, "131044": 49, "1311": [19, 25], "131115": 49, "13112096": 25, "1313": 68, "13132": 6, "1314": 68, "13199": 6, "132": 63, "13214": 6, "1322": 80, "13221": 6, "132260": [2, 5], "1326": [23, 68], "13269": 6, "1327": 64, "13273": 6, "1328": 6, "13281": 6, "13283": 6, "13296": 6, "133016": 49, "13323": 6, "13324": 6, "133381": 49, "1334": [6, 25], "1336": 21, "1336e": 34, "1339": 18, "13407": 6, "13425": 6, "1343": [8, 9, 10, 67], "13436": 6, "13451": 6, "13464": 6, "13465": 6, "13471": 6, "13481": 6, "1349": 68, "13496": 6, "13497": 6, "135": [67, 68], "13504": 6, "1351": 19, "1352": 46, "135229": 15, "13531": 6, "13538": 6, "1354": [52, 68], "13541995570654827": 52, "13559": 6, "13564104": 25, "1358": 6, "13586": 6, "13587": 6, "13606": 6, "13619": 6, "1362": 6, "1363": 34, "13638": 6, "1364e": 46, "13658": 6, "13659": 3, "1365e": 46, "13663": 6, "13664": 6, "13670": 6, "13673": 6, "13682": 6, "13694044": 8, "137": [9, 63], "13709": 6, "137371": 49, "13739": 6, "1374": 57, "13745": 6, "1375": [44, 46], "1375133": 8, "13759": 6, "13769586": 8, "13771": 6, "13774": 6, "13780": 6, "13782": 6, "1379": [45, 57], "13792": 6, "13796": 6, "138": [57, 63, 68], "13805": 6, "13810": 6, "13818": 6, "13827": 6, "1383343": 2, "13835849": 25, "1384": 57, "138412": 9, "13850": 6, "13863": 6, "13875": 6, "13877": 6, "13889": 322, "138957": 15, "1389656": 2, "139": 63, "1391": 80, "1392": 6, "13931": 6, "13934": 6, "1394": 9, "13940": 6, "13954": 6, "13965": 6, "139691e": 333, "13973": 6, "13975": 67, "13976": 6, "1398": 49, "1399": [64, 68], "14": [3, 5, 8, 9, 10, 17, 18, 23, 24, 25, 43, 44, 45, 49, 63, 64, 67, 68, 69, 71, 79, 80, 83, 333, 378], "140": [52, 63], "140000": [3, 5], "1402": 46, "14030": 3, "14035251191539191": 52, "1404": 52, "14045": 6, "14055": 6, "14069": 6, "14071": 6, "14077": 6, "14088": 6, "141": 63, "14107": 6, "1412": 18, "14125": 6, "14139967": 25, "14149": 6, "14162": 6, "14183": 6, "142": [6, 63], "14232": 6, "14237": 6, "14243": 6, "14257": 6, "14260": 6, "1427": 6, "14280": 6, "142926": [13, 49], "14303": 6, "14317": 49, "143186": 49, "14333": 6, "14357": 6, "1436": 80, "1437": 68, "1438": [62, 68], "144": [53, 55, 378], "1442": 9, "14427": 6, "14429": 6, "1443": [68, 323], "14430": 6, "14454": 6, "14464": 6, "14481": 6, "14499": 6, "145": [57, 62, 65, 68, 378], "145000": 25, "14514": 6, "14519": 6, "14520": 6, "1454": 9, "1456": 9, "14562": 6, "14566": 6, "1457": [9, 57], "1458": 9, "14599": 6, "146": [8, 10], "1460": 6, "14615": 6, "14617": 6, "14645936": 8, "14664": 6, "1468": 64, "1469": 6, "14695": 6, "146964": [13, 49], "146996": [2, 5], "147": 8, "1471": 323, "14716": 6, "14724": 6, "14726": 6, "1474": 68, "14747": 6, "14756": 6, "14772": 6, "1478": 68, "14787": 6, "14794": 6, "148": 8, "1480": 6, "14818567": 25, "14829": 6, "14833": 6, "1484": 34, "1485": 34, "14855": 6, "14858": 6, "14873": 6, "14877": 6, "14892": 6, "149": 8, "1490": 68, "14901": 6, "1491": 67, "14919": 6, "1493": 68, "14935775": 25, "1495": 6, "1497": 68, "14972": 6, "14973": 6, "15": [2, 5, 8, 9, 13, 14, 17, 18, 22, 23, 24, 25, 43, 44, 45, 46, 52, 63, 67, 68, 71, 79, 80, 125, 331, 333, 338, 357, 378], "150": [8, 58], "150000": [2, 5], "1501": 68, "15015": 6, "15028": 6, "15038": 6, "1504": 68, "15050": 6, "1507": 68, "15075029": 25, "1508": [64, 68], "15083517": 8, "15091": 6, "15094": 6, "151": 8, "15100": 6, "151090": 3, "1511": 80, "15121": 6, "1514": 68, "1515": [10, 34], "1517": 68, "15192": 6, "15198": 6, "152": 8, "15203": 6, "1521": 57, "15210": 6, "15220": 6, "15228": 6, "15231": 6, "15244": 6, "15257": 6, "15260": 9, "15280": 6, "15282": 6, "15297": 6, "153": 8, "1531": 68, "1532": [34, 68], "15322": 6, "15333": 6, "15366": 6, "15388": 6, "154": [6, 8], "15417": 6, "1543": 6, "15462": 6, "15470": 6, "15472": 6, "15479": 6, "155": [8, 71], "155000": 25, "15501": 6, "1551": [35, 80], "15510": 6, "15517": 6, "15524": 6, "15532": 6, "15538": 6, "15545": 6, "1555": 68, "15556": 67, "155640": [2, 5], "15565": 6, "15579": 6, "1558": 71, "15585": 6, "15587": 6, "156": [6, 8], "15615": 6, "1562": 31, "156307": [2, 5], "15647769": 25, "1565": 64, "15668": 6, "15670": 6, "156719": 5, "15673": 6, "1569": 68, "15696866": 8, "1571": 83, "15725": 6, "15729": 6, "1573": 68, "15738": 6, "15745": 6, "1576": 68, "15767": 6, "15772": 6, "15781": 6, "15793": 6, "15796": 6, "158": 8, "1581": 68, "15812": 6, "1582": 68, "15827": 6, "1583": [6, 68], "1585": 68, "15857": 67, "1586": [6, 68], "158681e": 333, "1587": [64, 68], "15873": 6, "1588": 67, "15888": 6, "1589": 72, "15894": 6, "159": 6, "15904": 6, "15908": 6, "15910": 6, "15917467": 8, "15930": 6, "15945": 6, "1595": 35, "15953": 6, "15964": 3, "15966": 6, "1597": 68, "15984": 6, "1599": 34, "15991107": 25, "15998": 6, "16": [3, 5, 6, 8, 9, 10, 17, 18, 22, 23, 24, 25, 34, 44, 45, 63, 64, 67, 68, 71, 79, 80, 333, 352], "1603": [6, 68], "1604": 34, "16042": 6, "16085": 6, "161": [8, 18], "1612": 64, "16144": 6, "16158": 6, "16160": 6, "16196": 6, "16199": 6, "162": 8, "162097": 49, "16220": 6, "1623": 68, "1624": 6, "16272": 6, "16275": 6, "16285": 6, "16294": 6, "16313": 6, "1632": [64, 68], "16325": 6, "16330575e": 21, "1635372": 25, "16367": 6, "1638": 68, "1640": 80, "1641": [323, 327], "1642": [8, 9, 10], "16425": 6, "1645": [6, 8], "16452": 6, "1646": 68, "1647": 6, "16474": 6, "16478": 6, "16491": 6, "165": 8, "1650": [43, 323, 327], "16501650e": 22, "16508": 6, "16518": 6, "16524": 6, "16532": 6, "16556": 6, "1658": [43, 61, 68], "16584": 6, "166": [10, 68], "16600": 6, "16621": 6, "166214e": 333, "16633565": 8, "16642": 6, "16665": 6, "1667": 10, "167": 8, "1672": 34, "167233": 3, "1672709": 17, "167295": 5, "16733": 6, "1674": 43, "167484": 3, "167502": 5, "16767": 6, "16770": 6, "168": 83, "1680": 68, "16819": 6, "1684": [64, 68], "16842": 6, "1686": 43, "16890": 6, "16892": 6, "169": 8, "1690": 44, "16901": 6, "16902": 6, "16904": 6, "16906": 6, "16941222": 8, "16948": 6, "16960": 6, "16997403": 25, "17": [3, 5, 9, 10, 17, 18, 22, 23, 24, 25, 44, 45, 49, 63, 67, 68, 71, 79, 80, 319, 323, 327, 332, 333, 334, 335, 336, 337, 338], "170": 8, "1700": 68, "1702": 68, "17033": 6, "17035": 6, "1704": [34, 43], "17041": 8, "17042": 8, "17043": 8, "17044": 6, "17085": 6, "17105": 6, "1710586": 18, "17125": 6, "17127": 6, "17162": 6, "17167": 6, "171784": 49, "172": 8, "17204": 6, "17205": 8, "17211": 6, "17226": 6, "17247": 6, "1725": 68, "1727": [6, 68], "17273": 8, "17285": 6, "17287": 6, "173": [8, 10], "17305": 6, "1732": [68, 71], "17320": [6, 8], "17339": 6, "17347": 6, "1735": 43, "17353": 6, "1736": 9, "17367": 6, "1737": [9, 34, 68], "17374": [8, 9, 10], "17375": [8, 9, 10], "17376": [8, 9, 10], "17377": [8, 9, 10], "17378": [8, 9, 10], "17379": [6, 9, 10], "17383003e": 22, "174": 8, "1741": 8, "1742": [68, 71], "1743": 9, "174612": [2, 5], "1747": 68, "17478107": 18, "175": 8, "1752667": 25, "1755": [64, 68], "1758": 43, "1759": 6, "176": [8, 58], "17617815": 25, "17623590e": 25, "176381": [2, 3, 5], "1765252": 25, "1768": 80, "177": 18, "1771": 68, "1772": 80, "177261": 9, "177892": 9, "178": 8, "1780": 68, "1781": 6, "17826003": 8, "1785": [6, 68], "179": [8, 35], "17904737": 25, "1793": 43, "1794": 43, "1795": [43, 61], "17becf": 52, "18": [2, 5, 6, 9, 10, 17, 18, 23, 24, 25, 34, 44, 45, 46, 49, 63, 64, 67, 68, 71, 79, 80, 333, 334], "180": [8, 34, 83], "180000": 5, "1802": [331, 338], "18033722": 18, "1804": 46, "1805": [35, 44], "1806": 46, "1811": 68, "18112": 3, "1814": 68, "181558": [2, 5], "1816": 44, "1818": 10, "1821": 34, "18238135": 25, "183": 6, "1835": 6, "184": 8, "1843": 43, "1845": 6, "18458366509258792": 52, "1846": 52, "1847": 6, "18481848e": 22, "185": 8, "185089": [2, 5], "1854": 6, "18554294": 25, "1858": 23, "186": [58, 83], "1861": 6, "1868": 23, "187": [8, 67, 80], "18726286": 18, "1876": 68, "187721e": 333, "188": 8, "188366": 2, "18843615e": 25, "1887635938666557": 52, "1888": 52, "1889": 6, "189": [9, 35], "19": [5, 8, 9, 10, 17, 18, 23, 24, 25, 44, 45, 46, 47, 63, 64, 67, 68, 71, 79, 80, 83, 323, 333, 378], "19020921": 8, "190408": 49, "191": [8, 58, 67], "1911": 34, "19129001": 25, "19129730e": 25, "1913": 34, "1915": 6, "1916": 6, "191731": [2, 5], "19179": 9, "1918": 68, "192": 8, "1920": 43, "1921": 43, "1926": [64, 68], "193": 8, "1933": 6, "1939": 43, "194": 8, "1940": 10, "194163": 49, "1948": 57, "195": 83, "19509665e": 25, "1953": 34, "1957": 71, "1959": 43, "196": 35, "1966": 68, "196632": 3, "1966921": 8, "1967": 58, "19673312": 8, "1970": [8, 10], "19708871": 8, "1972": 6, "197313": 9, "19771062": 8, "198": 35, "1980e": 24, "1981": 80, "1985": 6, "1986": 68, "199": 63, "1990": [64, 68], "1995": [9, 34, 35, 64, 68], "1996": [9, 34, 35], "1997": [9, 34, 35], "1998": [9, 34, 35, 68], "1999": [9, 34, 35], "1_extmodel": 378, "1_perform": 378, "1d": [63, 64, 71, 72, 79, 80, 83, 228, 229, 230, 231, 232, 234, 237, 246, 247, 291, 300, 320, 322, 328, 332, 334, 336, 339, 343, 354], "1e": [132, 272, 273, 289, 290, 360, 368], "1f77b4": 52, "1f968b": 52, "2": [2, 3, 4, 5, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 54, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 107, 125, 131, 132, 172, 180, 210, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 237, 242, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 321, 322, 323, 326, 327, 330, 331, 364, 374], "20": [2, 3, 5, 8, 9, 10, 17, 18, 23, 24, 25, 26, 35, 43, 44, 45, 46, 49, 52, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 221, 234, 237, 272, 273, 274, 275, 276, 277, 289, 290, 326, 333, 338, 341, 352, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 373, 375], "200": [43, 87, 246, 285, 286, 300], "2000": [7, 9, 34, 35, 52, 57, 58, 86, 223, 224, 323, 326, 332, 333, 334, 336, 366, 367, 369], "20000": [2, 5], "200000": [5, 23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "2001": [323, 330, 337], "2002": 323, "2003": [323, 327], "2005": [34, 317, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "200671": 5, "2007": [6, 68], "2008": [323, 327, 330, 333], "2009": [123, 325], "200e": 10, "201": [6, 18, 35, 83], "2011": 35, "2012": [323, 326], "20135065": 25, "2015": 334, "2016": [330, 331], "2017": 331, "2018": [331, 338], "2019": 326, "202": [3, 11, 83, 378], "2020": [326, 330], "2021": [123, 323, 325], "2022": [123, 325], "20231214e": 21, "2024": [35, 87], "2025": [2, 49], "2029": 6, "203": [8, 35], "2030": 68, "2031": 68, "2036": 68, "203604": [2, 5], "2037": [62, 64], "203739e": 333, "20379622": 8, "204": [57, 71, 79, 83], "2040": 6, "2043": 68, "2045": 67, "20452690e": 25, "2046": 58, "205": [8, 10, 34, 71, 79, 83], "2050": 68, "2053": 71, "2059": 68, "206": [8, 71, 79, 83], "2060": 57, "20604": 3, "2062": 80, "2068": 80, "207": [57, 71, 79, 83], "2071": 6, "20752182": 8, "2076": [64, 68], "207632": 5, "208": [71, 79, 83], "2080": 43, "2082": 23, "2084": 6, "2089": 34, "209": [8, 35, 71, 79], "20a386": 52, "21": [3, 8, 9, 10, 17, 18, 19, 24, 25, 27, 45, 49, 63, 64, 68, 71, 79, 80, 83, 107, 333, 378], "210": [4, 11, 378], "2100": [63, 71], "21010": 3, "2102": 64, "2108": [6, 57], "2109": 22, "211": 8, "2111": 18, "2112": 68, "2114": 68, "2118": 58, "212": 6, "2121": [8, 10], "213": [8, 9, 11, 378], "2135": 17, "214": 8, "2148": 31, "2149762": 25, "215": 326, "2152": 34, "2154": 67, "21548": 3, "2158": 6, "216": 57, "216167": 49, "216430": [2, 5], "2165": 9, "2169": 23, "2174": 34, "217750": 3, "218": 8, "2181": [9, 68], "2183": 6, "2184": 9, "21843381": 8, "2188": 9, "219": 8, "219010": 3, "219618": 49, "21968930e": 25, "2197": 68, "2197e": 18, "2198": 68, "22": [3, 8, 9, 10, 11, 17, 18, 21, 24, 25, 27, 45, 49, 63, 68, 71, 79, 80, 333, 378], "220": 8, "2200": 6, "220000": [2, 5], "220098": 3, "2201": [6, 323], "22026": 3, "2209": 68, "221": [6, 8], "221177": 3, "2215": 68, "222": 8, "2223": 6, "222458": 49, "223": [6, 8, 34], "22346": 3, "22353982": 8, "2237": 68, "2239": 10, "2240": 44, "2241": 6, "224594e": 333, "224693": 9, "225": [8, 63, 65, 378], "2250": 79, "2259397": 8, "226342": [2, 5], "226409": 3, "2268": 80, "227": [8, 35, 58], "22709317": 8, "22723": 3, "2273724": 2, "2277": 68, "2279": 67, "227978": 9, "2293e": 18, "2295": 68, "22nd": 331, "23": [5, 8, 9, 10, 17, 18, 24, 34, 45, 47, 63, 64, 67, 68, 71, 79, 80, 323, 333, 378], "230": 326, "230452": 3, "2308": 68, "231": 8, "232": 8, "2320": 22, "232285": 3, "2324": 57, "2325": 80, "23254459": 25, "2328": 68, "2329": 64, "233": 57, "2330": 6, "23364": 3, "23424387": 8, "235": 8, "2351": [64, 68], "2356": 34, "23560828": 8, "236": 8, "2361": 6, "2362": 80, "23693366": 25, "23699422e": 21, "237": [9, 58], "237041": [2, 5], "2371": 6, "2373e": 34, "237566": 3, "238": [8, 21, 27, 378], "2385": 68, "23881816": 8, "23887668": 8, "2389": 57, "238a8d": 52, "239": 8, "2393": 68, "239484": 5, "2395": 68, "2398": 34, "24": [2, 3, 5, 8, 9, 10, 17, 18, 24, 34, 45, 63, 68, 71, 79, 323, 327, 333, 334], "240": [8, 58], "2400": 6, "24000": 49, "240000": [3, 5], "2401": 80, "2405e": 24, "24081257": 25, "241": [8, 49], "2414": 83, "242": [8, 11, 58, 378], "2424": 8, "2429": 6, "243": 8, "2434": [64, 68], "24355615": 25, "244024": 3, "245": 80, "2450": 6, "2453e": 24, "2457": 6, "246499": 3, "2467": 68, "2468": 68, "2469": 68, "2474": 6, "2476": [6, 68], "2477": 34, "248": [8, 68, 83], "24835294": 25, "2491": 6, "24923209": 8, "2493": 68, "25": [3, 5, 9, 10, 17, 18, 24, 45, 63, 67, 68, 71, 79, 132, 180, 333, 364], "2500": 63, "25000": 25, "250000": 5, "250372": 3, "2511": 34, "2513": 24, "251380": 3, "2517": 6, "252": 6, "2525": 6, "2528": 67, "253": [34, 36, 67, 378], "2531": 58, "2535": 6, "25353302": 8, "2537": [8, 10], "255": 8, "255514": [2, 3, 5], "2558": 44, "256": 68, "256477": [2, 5], "256837e": 333, "2569": [6, 68], "25754": 9, "2576": [8, 9, 10, 68], "2578": 68, "257811": 3, "258": [19, 27, 378], "25827247": 17, "2584": 58, "2585": 6, "25864505": 8, "259": 8, "2592": 68, "25th": 321, "26": [2, 8, 9, 10, 17, 18, 24, 45, 67, 68, 71, 79, 107, 333], "2600": 6, "260000": 5, "261": 6, "2617427": 17, "2618": 6, "2619": 6, "262214": [2, 5], "2623": 34, "26237496": 8, "2631": 58, "2636": 57, "2639": 6, "264": 8, "2641": 6, "264345": [2, 5], "2646": 68, "265": 8, "2653": 44, "2656": 58, "266068e": 333, "2661": 46, "26611415e": 25, "266649": 9, "266958": 5, "267": [8, 9, 57, 64, 68, 80], "2673": 68, "2674": 23, "26802368": 40, "2685": 67, "26863568": 25, "2688": 23, "269": [8, 18], "2692": [64, 68], "27": [17, 18, 24, 34, 45, 67, 68, 71, 79, 333], "270": 71, "2702": [6, 80], "2706": [64, 68], "27079123": 25, "2709": 6, "271": 8, "271688e": 333, "272": [67, 69, 378], "2723": 31, "2727": [8, 9, 10], "273": 8, "2734": 80, "27368400e": 25, "2739": [46, 61], "2742": 6, "275": 6, "27521925e": 25, "2755": 68, "2759": 6, "276": [68, 326], "2760": 52, "27604510845035524": 52, "276345": [2, 5], "277": [58, 68], "2773644": 8, "2783": 6, "2786": 26, "2789": 58, "279": 68, "279756": 9, "279964": 3, "28": [3, 5, 17, 18, 24, 45, 63, 68, 71, 79, 107, 333], "280": [8, 17, 58, 64, 68], "2800": 23, "2805": 6, "2808": 68, "2809": [63, 71], "281": 8, "2813": 6, "28130404": 8, "281760": [2, 5], "282": [10, 25, 27, 68, 378], "282101": [2, 5], "2826": 57, "283": [8, 64, 68, 80], "2834": 17, "2839": 6, "284": [9, 64, 68, 80], "2841": 6, "2842": 17, "2848818": 2, "284882": [2, 5], "285": [9, 64, 68, 80], "285000": 25, "285143": [2, 5], "286": 68, "2861982": 25, "286861": [2, 5], "2869": 6, "287": [8, 64, 68], "2870": 26, "287682": 5, "2878": 80, "2879": [8, 9, 10], "287d8e": 52, "288": 8, "2880562": 25, "28825422": 8, "2883": 58, "2884": 23, "2889": [58, 79], "289": [68, 71], "2890": 23, "2893": 18, "289794": 5, "289872e": 333, "29": [5, 10, 17, 18, 24, 34, 45, 49, 68, 71, 72, 79, 323, 330, 333], "290": [9, 64, 80], "2903": [64, 68], "291": [9, 64, 68, 80], "2919": 6, "292": [6, 8], "2926": 64, "2936": 67, "29381192": 17, "294": [9, 64, 68, 80], "29455895": 8, "2948": [6, 57], "295": [6, 64, 68, 80], "2955": 58, "2956": 6, "2958": 34, "296": [8, 64, 68, 80], "29613823": 8, "297": 68, "2971": 68, "2972": 6, "297246": 25, "2976": 6, "2977": 68, "298": [34, 68], "2980": 6, "298096": 9, "2984": 6, "2985": [10, 34, 68], "2995": [10, 58], "2996": 10, "2997": 10, "2998": 10, "299878": 49, "2999": 10, "29991030e": 25, "29995": [2, 5], "29996": [2, 5], "29997": [2, 5], "29998": [2, 5], "29998244": 8, "29999": [2, 5], "29af7f": 52, "2_calibr": 378, "2_overfit": 378, "2ca02c": 52, "2d": [52, 64, 71, 72, 122, 228, 229, 230, 231, 232, 234, 237, 246, 247, 268, 291, 315, 320, 323, 332, 336, 339, 340, 344, 354], "2d718e": 52, "3": [2, 3, 5, 8, 9, 10, 15, 16, 17, 18, 21, 22, 23, 24, 25, 34, 35, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 87, 107, 125, 210, 220, 224, 226, 272, 273, 276, 277, 283, 284, 319, 324, 332, 333, 334, 338, 355, 358, 360, 364, 367, 368, 369], "30": [5, 8, 9, 10, 17, 18, 24, 35, 43, 45, 47, 49, 52, 63, 64, 67, 68, 71, 79, 80, 83, 251, 317, 331, 333, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 378], "300": 52, "3000": [10, 52, 63, 67], "30000": [2, 3, 5], "30000000000000004": 44, "3002": 58, "300e": 10, "301": [8, 16, 27, 68, 378], "301052": [2, 5], "301247": [2, 5], "3012471": 2, "30135555": 25, "301387": 5, "3019": 6, "302": 68, "302009": 49, "302398e": 333, "3025": 6, "3028": 6, "302969": 3, "303": 57, "3030": [6, 8], "303196": 3, "3035": 6, "3036": 46, "3040": 57, "30473822": 8, "30498793": 8, "305": 68, "305000": 25, "3053": 44, "305351": [2, 5], "3054e": 18, "3055": 6, "3056": 71, "3058": 83, "30592314": 25, "306": [8, 68], "3062105": 2, "306258": 9, "3074": 68, "3075": 6, "3078": [6, 31], "3079": 67, "3079e": 18, "308": [6, 8], "3080": 57, "30810585": 8, "308986": 5, "309": [67, 68], "30938998e": 21, "3098": 17, "31": [5, 17, 18, 23, 24, 25, 26, 34, 43, 45, 46, 49, 57, 58, 59, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 333, 378], "310554": 9, "310739e": 333, "3120": 6, "31249470e": 25, "3125": 6, "3126": 6, "31292663": 8, "313": 8, "3131": 6, "313509": [2, 5], "314": 326, "3148": 6, "315": 67, "3153": 6, "3158": 6, "316": [2, 11, 378], "3161": 6, "3171": 6, "317854": [2, 5], "3179": 67, "318": 8, "3181": [6, 34], "3182": 10, "318827": [2, 5], "319710": [2, 5], "32": [9, 10, 17, 18, 24, 45, 63, 67, 68, 71, 330, 333, 337], "320": 8, "320000": 5, "3202": 23, "3204": 68, "320997": [2, 5], "32104384": 8, "3211": 17, "322": 8, "322426": 3, "322667": 3, "323": 34, "3234": [64, 68], "32395616": 25, "324": 57, "3240": 6, "324067": 9, "3245": 79, "3257": [6, 68], "326357": 3, "3265": 6, "327": 71, "32737983": 8, "3277": 6, "3279": [64, 68], "3284": 8, "329": [8, 68], "3294": 58, "33": [17, 18, 24, 45, 54, 67, 68, 71, 333], "3304": 80, "3311": [64, 68], "3313": [23, 68], "3329": 57, "333": 52, "3333": 10, "3335": 6, "3336": 6, "33365986": 40, "3341": 6, "33446600e": 25, "33472527": 25, "335": 6, "3358": 68, "3359": 6, "336": 57, "33638d": 52, "33722543e": 21, "3375": 6, "337599": 3, "33798283": 17, "3387": 58, "338867": [13, 49], "33973635": 25, "34": [2, 3, 5, 10, 17, 18, 24, 45, 68, 71, 79, 333], "3405": 68, "341": 58, "3411": 6, "341274": 9, "3419": 68, "342": 68, "3423": 58, "342442": [2, 5], "3426": 68, "3430": 44, "3432": 6, "3439": 6, "34497136": 8, "345": 8, "3453": 58, "3456": 80, "346": 8, "346619": [13, 49], "346930": 9, "346985": 9, "347": [8, 26, 27, 378], "3476": 322, "3479": 6, "348": 8, "3480": [6, 57], "3485": 10, "34879130e": 25, "3488": [6, 23, 57], "3489307": 25, "349": [8, 58, 71, 73, 378], "3492": 6, "3494": 6, "349909": 3, "35": [2, 3, 5, 17, 18, 24, 25, 45, 52, 63, 67, 68, 71, 333], "350": [58, 68], "3502": 68, "3505": 6, "352": 8, "3521": [63, 67, 71, 79], "353": 57, "35396525e": 25, "3542": 68, "354665e": 333, "355": 8, "355216e": 333, "355448": 9, "355489": 49, "356": 17, "3563": 21, "357": [8, 86, 88, 378], "3572": 6, "3578e": 23, "358": 8, "3582e": 23, "358358": 5, "3584": 68, "3585": 6, "358546": 49, "3586": 6, "35866153": 18, "35886571": 8, "3590": 6, "35973597e": 22, "36": [9, 10, 17, 18, 24, 45, 63, 68, 71, 326, 333], "360": 8, "3600": 6, "360000": 5, "3601": 6, "361": 8, "36111761": 8, "36175679": 8, "362": 8, "3629": 6, "363": [8, 58], "3636": 10, "3638": 68, "3639": 68, "363952": 49, "364": [8, 67], "36436691e": 21, "365": 8, "36562947": 8, "3658": 68, "366": 8, "3665": 44, "3667": 68, "3669": 68, "366936": 3, "367": 8, "367038e": 333, "36711332": 8, "367725": 5, "368": 8, "368296": 9, "369609": 9, "3697": 45, "37": [2, 5, 10, 17, 18, 24, 34, 45, 57, 59, 68, 71, 333, 378], "3701": 6, "371": 34, "37109827e": 21, "3713": 57, "3715": 34, "3719": 6, "372": [8, 18, 27, 378], "37222561": 8, "3725": 6, "3732": 80, "3750": 79, "376": [34, 67], "3766": 18, "3769": 23, "377": 3, "3775": 326, "378": 17, "3788": 57, "3789": 58, "379": 6, "3797": 35, "38": [9, 10, 17, 18, 24, 34, 45, 68, 71, 79, 333], "380": 6, "3807": 6, "3819": 57, "382": 10, "382035e": 333, "3822": [6, 35], "38260215e": 25, "383": [8, 68], "3850": 64, "38555239e": 21, "3858271": 18, "385873": 9, "38635254": 8, "3873": 58, "388": 8, "38810125e": 25, "38886216": 25, "389": [319, 332, 333, 334, 335, 336, 337, 338], "3890": 44, "3893": 23, "3893073": 40, "3896": 45, "3899": 6, "39": [2, 5, 9, 17, 18, 24, 25, 45, 68, 71, 80, 83, 107, 333], "3900": [64, 68], "390088": 25, "39035252": 8, "3904e": 34, "39070830e": 25, "3908": 6, "390801": 9, "391002": 9, "3914": 6, "3919": 6, "3921": 6, "39269155": 18, "39270772e": 21, "393": 8, "3939": 10, "3940": 68, "3942": 57, "39428496": 8, "395": [8, 31, 36, 57, 378], "3951375": 17, "39558c": 52, "3956": [67, 71, 79], "3959": 6, "396": 17, "3965": 6, "3967": 57, "397": 57, "3970": 6, "3980": 6, "39814557e": 21, "39820050e": 25, "399": 8, "3995": 79, "39957": 9, "3996": 67, "399835": 9, "3_hpo": 378, "3_reliabl": 378, "3d": [122, 315, 339, 340, 345], "3dbc74": 52, "4": [2, 3, 5, 7, 8, 9, 10, 17, 18, 21, 22, 23, 24, 25, 34, 35, 40, 43, 44, 45, 46, 49, 52, 54, 57, 58, 61, 63, 64, 67, 68, 71, 72, 79, 80, 83, 107, 272, 273, 319, 330, 332, 333, 334, 352, 358, 360, 364, 365, 367, 368, 369], "40": [9, 10, 17, 18, 24, 35, 45, 49, 52, 63, 64, 67, 71, 72, 79, 80, 83, 289, 290, 319, 333, 360, 369], "400": [38, 40, 52, 58, 369], "4000": 67, "40019150e": 25, "4002": 64, "40051387": 8, "4007": 58, "400e": 10, "401": 58, "4011": 83, "4012": 6, "4019": 6, "40198600e": 25, "402": [57, 58], "4022": 58, "40228736": 8, "4036": 6, "403976": 3, "404": 8, "4043": 26, "404688": 52, "405027e": 333, "4063": 6, "407": 8, "4074": 17, "408": 68, "4082": 18, "4083": 18, "4084": 18, "4085": 18, "408532": 49, "4086": 18, "4087": 18, "40896224": 8, "409": 35, "4096": 64, "41": [2, 3, 5, 8, 9, 10, 17, 18, 24, 68, 333], "4100": 26, "4106": 6, "411566": 3, "412": [64, 68], "4123": 6, "4125": 6, "413": [323, 327], "415": [8, 68], "415164": 5, "4156": 44, "4157": 57, "4158": 38, "4159": 57, "416": 64, "4162": 23, "416251": 49, "4165": 38, "416518": 49, "4166": 44, "4167": 63, "4175": 44, "417972": 49, "417998": 49, "418": 8, "418748e": 333, "4189": 68, "4198": 23, "42": [8, 17, 18, 24, 31, 32, 33, 34, 35, 46, 63, 79, 333, 347, 375], "420": 83, "420104": 49, "4202": 6, "420393": 49, "4204": 38, "4208": 19, "421141": 49, "421357": 9, "4216": [25, 38], "421604": 49, "422": [323, 327], "4226": 6, "4232": 23, "4236": 6, "423921": 3, "424": [7, 11, 34, 378], "4242": 8, "424638": 49, "4251": 57, "4255": [6, 25], "425528": 49, "42588864": 8, "426064": 3, "4266": 17, "4269": 17, "427": [8, 68, 323], "4270": 17, "4271": 17, "4272": 17, "4274": 17, "4275": 17, "4277": 17, "428": [9, 64, 68, 80], "4280": 17, "4281": 17, "4285": 17, "4286": 21, "428621": [2, 5], "42867552": 8, "4287": 17, "4288": 17, "4289": 17, "4290": 17, "4292": 83, "4293": 17, "4294": 17, "4295": 17, "4296": 17, "4298": 19, "4299": 17, "43": [2, 5, 10, 17, 18, 24, 72, 333], "430": 71, "4300": 17, "4301": [17, 58], "43012181": 8, "4302": 17, "4304": 17, "4305": 17, "4309": 6, "431": [58, 68], "4311": 17, "4312": 17, "4313": [6, 17], "4316": 17, "4317": 17, "4322": [17, 83], "4323": 17, "432403": 49, "4326": 17, "433": [8, 9, 64, 68], "4330": [6, 17], "4333": 17, "4334": 17, "4334417": 25, "4336": [17, 67], "4339": 17, "4340": 17, "4342": 23, "4348": 17, "4349": 17, "4352": 17, "4357": 35, "4358": 83, "4362": 17, "43635893e": 21, "436493": 15, "4366": 17, "4367": [17, 45], "4368": 45, "437": 68, "4374": 17, "4377": 17, "437721": 3, "4378": 17, "438": 323, "4382": 17, "4383": 17, "4384": [17, 23], "4386": 17, "4387": 17, "4388": 17, "4389": [6, 17], "4390": 17, "4391": 17, "4392": [6, 17], "4393": 17, "4394": [17, 23], "4395": 17, "4396": 17, "4397": [17, 61], "4398": 17, "4399": 17, "44": [6, 17, 18, 24, 34, 64, 67, 68, 71, 333, 334], "440": [58, 68], "4400": 17, "4401": [17, 45], "440154": 52, "4402": [6, 17], "4403": 17, "4404": 17, "4405": [17, 44], "4406": 17, "4407": [17, 45], "440752": [2, 5], "4408": 17, "4409": 17, "441": [8, 64, 68], "4410": 17, "44108005": 8, "4411": 17, "4412": 17, "4414": 17, "4415": 17, "4416": 17, "4417": [17, 35], "441707": 3, "441833": 5, "4419": 35, "4420": 57, "4421": 17, "4423": 17, "4425": 17, "4426": 17, "4428": 17, "4429": 17, "443": 68, "4430": 17, "4431": 6, "4433": 17, "4434": [6, 17], "4436": 6, "4438": 17, "4439": 17, "4440": 17, "4441": 45, "4444": 17, "444782": 15, "4448": 17, "445": [9, 64, 80], "4451": 17, "4454": 17, "4457": 17, "4458": 17, "4460": 17, "4462": 17, "4463": 17, "4464": 17, "4465": 17, "44654": 49, "4466": 17, "4467": 6, "447": [9, 64, 68, 80], "4470": 17, "4472": 17, "4475": 17, "4476": 23, "4477": 17, "4479": 45, "44794474": 8, "4481": 17, "4484": 17, "4485": 17, "4486": [17, 64], "4487": 17, "449": [15, 27, 378], "4490": 17, "4491": 17, "4494": 45, "4496842": 25, "4497": [17, 45], "45": [6, 8, 10, 17, 18, 24, 25, 49, 67, 80, 83, 330, 337], "4500": 67, "45000": 25, "4501": 17, "4504": 45, "4506": 17, "451": [8, 57], "4510": 45, "451197": 49, "4512": 17, "4513": 35, "4519": 58, "451952": 5, "451988": 8, "452": [43, 47, 378], "4520": 44, "452016": [2, 5], "4521": 17, "4522": 17, "4523": 6, "45238": 23, "4525": 17, "4528": 44, "45287301": 8, "45290": 23, "4530": 17, "4531": [17, 44], "45338": 23, "453707": [13, 49], "453781": 52, "4539": 44, "45391": 23, "4540": 44, "4541": 17, "45425": 23, "454411": 49, "45458": 23, "45465": 23, "454741": 3, "4552": [23, 35], "45525": 23, "4553": 17, "45535": 23, "4554": 17, "45545": 23, "45578528": 8, "4558": 6, "456": [64, 68, 80], "4561": 67, "456563": 49, "4568": [17, 44], "45725397": 25, "45777351": 8, "458": 68, "45813": 23, "4582": 17, "4585": 6, "4587": 19, "4589": 23, "459": 8, "4594": 17, "4597": 17, "46": [2, 5, 10, 17, 18, 20, 24, 27, 44, 47, 67, 83, 378], "4602": 6, "4607848": 8, "461": 6, "4615": 79, "461799": [2, 5], "462006": 49, "4622": 18, "4627": 6, "46286": 23, "4631": 6, "4633": 45, "4634": 45, "4635": 6, "4636": 6, "4637": [6, 17], "46464249": 8, "4647": 57, "464723": [13, 49], "4648": 17, "465": 8, "4654": 17, "4659": 6, "465977": [2, 5], "4662439": 17, "46657904": 8, "4667": 71, "4676": 45, "46818392": 8, "4682": 19, "4683": 6, "4688": 58, "4694": [21, 23], "4696": 6, "47": [9, 17, 18, 24, 67], "4704": 6, "4705": 80, "470528": [2, 5], "4713": 35, "47145906": 8, "472": [8, 14, 27, 378], "4721": 6, "4726": 25, "472634": 49, "472756": 3, "4728": 83, "473737": 15, "4738": 83, "4739": 17, "4741": 6, "4742e": 18, "474543": 15, "4747": [6, 67], "475053": 3, "475099": 3, "4758": 45, "476": 8, "476388": 49, "4769": 6, "477": 67, "47719370e": 25, "4775": 23, "477859": 25, "4784": [17, 58], "479": 8, "47997744": 40, "48": [2, 6, 9, 17, 18, 24, 52, 63, 83], "4800": 6, "480644": 49, "4808": 6, "4809": 58, "481": 34, "48118": 49, "4812": 25, "481467": 52, "482576": 52, "483111": 49, "4834": 6, "484015": [2, 5], "48404936": 8, "484224": 3, "4846": 23, "484c": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "485500": 3, "4858": 23, "486": [32, 36, 52, 55, 378], "4862": 67, "486322": 49, "48640678": 40, "486594": 49, "4871": 58, "487169": 5, "487297": 49, "487756": 49, "488": 6, "488310": 14, "48869896": 8, "488876e": 333, "4889": 45, "489": 6, "4895": 63, "49": [5, 9, 10, 17, 18, 24, 34, 46, 63, 67, 68, 79, 80], "4906": 46, "4907": 35, "491": 80, "4915": 45, "4915018": 2, "491502": [2, 5], "4917": 3, "491782": [2, 5], "492": 63, "49249195": 8, "4939": 17, "4943": 6, "494683": [2, 5], "4946e": 18, "495683": 3, "496": [20, 27, 378], "4963": 18, "4965": 6, "4975": 79, "4977": 67, "498": 8, "49800181e": 22, "4983": 43, "499": 6, "499088": 3, "4994": 44, "49949932": 8, "499676e": 333, "4999": 17, "4_resili": 378, "4th": 336, "5": [2, 3, 5, 8, 9, 14, 17, 18, 21, 22, 23, 24, 25, 34, 35, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 107, 112, 132, 209, 212, 213, 214, 215, 216, 220, 222, 224, 228, 229, 230, 231, 232, 267, 270, 271, 272, 273, 274, 275, 277, 279, 281, 284, 286, 288, 289, 290, 291, 293, 295, 297, 299, 300, 301, 317, 321, 324, 326, 330, 333, 337, 343, 344, 351, 357, 358, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 374], "50": [9, 17, 18, 23, 24, 34, 35, 43, 49, 52, 63, 64, 67, 68, 71, 79, 80, 83, 222, 267, 270, 271, 273, 274, 275, 276, 277, 279, 281, 284, 286, 288, 290, 291, 293, 295, 297, 367], "500": [38, 40, 239, 289, 290, 331, 338], "5000": [63, 67, 71, 83, 234, 235, 237, 238, 247, 272, 273], "50000": [2, 3, 5, 63, 370], "500000": 2, "50000000e": 25, "5002": 6, "5003": 6, "500934": 14, "500e": 10, "5010": 43, "5023": 6, "503": 6, "5035": 46, "5036": [6, 58], "505": [8, 57, 87, 88, 378], "5054": 35, "5056": 6, "5061": 43, "5063": 6, "506395": 9, "507501": 3, "5081": 57, "5082": 6, "5093": 6, "5096": 35, "5099": 43, "51": [5, 6, 9, 17, 18, 24, 49, 72, 83], "510080e": 333, "5101": 6, "51060806": 8, "5107": 6, "510933": [2, 5], "51097": 49, "51115655e": 25, "5118": 6, "512": [6, 11, 378], "5123": 35, "513": [67, 71, 79], "5132": 46, "5134": 63, "513484": [2, 5], "5138": 17, "5141": 6, "5147215": 8, "5148": 6, "514946": [2, 5], "515154": 9, "5153": 360, "5155": 43, "5161": 67, "5169": 17, "518": 57, "51951345": 8, "52": [17, 18, 24, 68, 326], "5205": 58, "5211e": 34, "52172805": 8, "5218": 6, "5224": 8, "52262687": 8, "5232": 6, "5234": 35, "5238": 83, "52386691": 8, "524": 8, "5243": 6, "5244": 43, "5256": 67, "5259": 35, "525951": [2, 5], "526": 71, "5260": 6, "5262": 23, "5265": 6, "5271": 6, "52711163": 8, "5276": 6, "5283": 6, "5288": 17, "52888139": 8, "5297": 6, "53": [17, 18, 24, 63, 68, 71, 326], "5309": 43, "530973": 3, "5311": 57, "5314": 35, "5321": 35, "532205": 3, "5327": 67, "532754": [2, 5], "5336": 45, "5337": 35, "5340": 46, "5344": 6, "5348": 35, "53512126": 8, "5354e": 18, "536": [6, 123, 325], "538574": [2, 5], "539": 8, "5396": 57, "54": [17, 18, 49, 79], "5401": 43, "5404": 43, "5405": 34, "5406": 43, "542": 68, "5426": 80, "5427": 35, "5428": 6, "5429": [46, 83], "5430": [35, 46], "5438": 46, "5439": 6, "5440": 6, "5444": 79, "544440": [2, 5], "5446": 46, "5449": 6, "5450": 68, "546": [17, 57], "5466": 6, "547011": 3, "547405": [2, 5], "5476": 6, "5478": 58, "548": 6, "5483": 68, "5490": 6, "5494": 45, "5495846": 17, "549641": 9, "55": [2, 9, 17, 18, 46, 67], "5500": 6, "5501": 6, "550138": 49, "5504": 57, "551419": 3, "55199525": 8, "552181": [2, 5], "5523": 6, "5524": 46, "5525": 43, "5528": 6, "553405e": 333, "5539": 45, "554319": [2, 5], "55526238": 8, "5554": [6, 35], "5557": 6, "555878": 16, "556": [6, 83], "5565": 58, "5570": 35, "5574": 35, "5578": 57, "5583": 6, "5587": 6, "5588": 67, "558922": 9, "559": 80, "56": [3, 8, 9, 10, 17, 18, 23, 27, 49, 63, 71, 79, 378], "5601": 6, "5607": 6, "5609": 6, "5610": 45, "5614": 46, "5619": 6, "5621": 67, "5623": 67, "562721": [2, 5], "5629": 34, "5634": 21, "5637": 46, "5639": 6, "5644": 6, "564453": [2, 5], "5649": 57, "5651": 6, "5652": 57, "5684": 68, "5685": 67, "5686": 35, "5691": 35, "5694": 68, "56c667": 52, "57": [2, 9, 17, 18, 24, 27, 34, 46, 49, 79, 378], "5701": 17, "5702": [6, 57], "5713": 43, "5714": 67, "5715": 43, "5716": 8, "572": 57, "5727": 6, "5730": 17, "574": 8, "5741": 23, "5756": 67, "5758366": 8, "5759": 6, "57641592": 8, "576596": 3, "577": [6, 71, 80], "5770": [6, 35], "5771": 43, "5773": [57, 79], "5774": [23, 57], "5776": 35, "57779066": 8, "578": [6, 63], "5787": 18, "5790": 23, "579652": 16, "5796733": 8, "5797": 63, "5798e": 34, "58": [17, 18, 49, 68, 378], "580": 57, "5804": 6, "581": [38, 41, 378], "5813": 43, "581320": 9, "582": 68, "5822": 6, "5825": 6, "5831": 6, "5833": [6, 58], "5836": 23, "584": [64, 68, 80], "5840": 57, "5843": [57, 67], "584421": 360, "5846": 83, "585": 8, "5852": 6, "5864": 57, "588": 83, "588372": 9, "58841076": 8, "58843931e": 21, "58882597": 8, "5889": 6, "5891": 6, "5899": 8, "59": [2, 9, 17, 18, 63, 68, 71, 80, 83, 323], "5903": 8, "5908": 67, "591": 68, "5913": 46, "59150096": 8, "5917": 35, "59185708": 8, "592": 8, "592177": 3, "5924": 6, "5925": [6, 67], "592621": [2, 5], "5929": 35, "5933": 6, "594": [17, 27, 378], "5942": 67, "5945": 35, "5948": 6, "5963": 63, "5966": 6, "597": 63, "59785479e": 22, "5979": 35, "59815633": 17, "5983": 57, "599": 80, "599323": 3, "5_robust": 378, "6": [3, 5, 8, 9, 10, 17, 18, 23, 24, 25, 34, 35, 43, 44, 45, 46, 49, 54, 57, 58, 63, 64, 67, 68, 71, 72, 79, 80, 83, 132, 306, 317, 319, 332, 333, 334, 364, 368, 370], "60": [6, 8, 9, 10, 17, 18, 34, 35, 49, 63, 64, 67, 71, 79, 80, 83, 364], "600": [52, 63], "6000": 79, "6006": 58, "60068917": 8, "600893": 16, "601": 63, "6016": 58, "6017": 6, "602": [63, 67], "6021686": 2, "602169": 3, "6023": 6, "6025": 17, "603": 63, "603604": 3, "603628": 16, "604": [46, 47, 378], "6044": 83, "6048": 6, "60502429": 8, "60513461": 40, "6053": 58, "605574": 3, "60578035e": 21, "6060": 6, "6061": 10, "6064909": 17, "6069": 43, "6074": 17, "6075": 6, "6076": 34, "6078": 6, "608": 8, "6080": 17, "60859436": 8, "60859736": 8, "6088": 6, "609": 8, "6097": 57, "6097598": 25, "61": [9, 10, 17, 18, 63], "610": 6, "6104": 63, "6114": 67, "6124": 9, "613": 68, "613627": 49, "6138": 79, "614": 8, "61438626": 25, "6146": 63, "6147": 35, "6148": 71, "615": 8, "615382e": 333, "6158": 35, "6161": 67, "6163": 57, "6165": 23, "6165768": 18, "6167": 6, "6168": 35, "6193": 6, "619748": 3, "62": [10, 17, 18, 34, 67, 68, 71], "6201": 6, "6208": 35, "62127511": 8, "6216": 18, "622": 6, "6224": 6, "6227": 67, "6228": 71, "623": 8, "6233528": 2, "623353": [2, 5], "6238": 67, "624": 6, "6240": 57, "624382": 9, "6249": 6, "6257": 79, "6258": 6, "62591967": 8, "6260": 71, "6261": 63, "6265": 57, "6277": 17, "6279": 6, "6282": 67, "6285": 17, "629": 8, "629466": 9, "6298": 6, "62987111": 8, "629950": 3, "63": [17, 18, 49, 63, 323], "630000": 5, "6304": 83, "6308": 57, "6311": 57, "6315": [6, 57], "631849": 49, "6319": 6, "632": [6, 64, 65, 378], "6321": 6, "6326": 79, "632617": 9, "6343": 6, "6351": 6, "636": 8, "636641": 9, "6367": 58, "63710481": 8, "63718738": 8, "637231": 3, "6377": 6, "6381": [6, 67], "63892622": 8, "639": 68, "639519": 3, "6398": 6, "64": [10, 17, 18, 67, 79, 83], "640": [354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "640444": 9, "6409": 6, "6411": 67, "642": [49, 378], "6425": 57, "6439": 6, "644": [45, 47, 378], "6444": 17, "646": 64, "6460": 63, "64644051": 8, "6467": 67, "6472": [6, 79], "64722795": 8, "6473": 6, "648": 58, "6481": 6, "6487": 58, "6488": 6, "6492": 6, "6494": 45, "6499": 6, "65": [8, 9, 10, 17, 18, 63, 67, 334, 370], "6507": 57, "6509": 63, "6520": 17, "6524": 23, "6529": 83, "6531": 63, "65340550e": 25, "653791": 3, "6538": 17, "6539": [63, 79], "654": 6, "6542": 6, "654506": 3, "6548": 67, "6556": 6, "6557": 9, "6558": 67, "6559": 46, "6560": 67, "656616": 9, "6571": 18, "65801040e": 25, "6584": 67, "65863077": 8, "6599": 67, "66": [10, 17, 18, 67, 68], "66048595e": 25, "6615": 67, "6618": 83, "6619": 6, "663": [6, 83, 378], "6633112": 8, "6636": 3, "6639": 6, "6641": 83, "66410094": 17, "66441815": 8, "664760": 9, "6648": 67, "6649": 17, "6650": 17, "6651": 17, "6652": 17, "6653": 17, "6654": 17, "6655": 23, "6666": 45, "6667": 67, "6672": 58, "6672337": 8, "6673": 6, "667824": 9, "6682": 44, "6688": [18, 23], "6692": 6, "66937524": 18, "67": [17, 18, 46, 64, 68], "6700": 6, "670062": 3, "6709": 58, "6713": 6, "6718": 6, "672015": [2, 5], "6736": 35, "67438175": 8, "6744": 67, "6747": 6, "675": [33, 36, 378], "6750": 34, "67514110e": 25, "6752": 6, "6753": 6, "6755": 6, "677": [75, 77, 378], "6771": 57, "6773": 67, "6774": 6, "6775": 67, "6780": 67, "678666": 3, "6790": 35, "68": [5, 9, 17, 18, 63, 64, 68, 72, 80], "6800": 79, "6803": 35, "680607": [2, 5], "6814": 79, "68152997": 8, "6818": 10, "6823": 34, "68282644": 8, "6829": 67, "683353": [2, 5], "6837": 6, "6856": 6, "6866": 67, "6873": 6, "687531": 9, "6877": 67, "6878": 6, "6886": 6, "689033e": 333, "6891": 6, "689362": [2, 5], "6895": 6, "6897": 3, "689708": [2, 5], "69": [17, 18, 49, 63, 64, 67, 68, 71, 79, 80], "6904": 35, "69050610e": 25, "6908": 17, "6910": 6, "6912": [6, 35], "6919": 6, "691958": 3, "6920": 67, "6923": 6, "6926": 6, "6927": 83, "692776": [2, 5], "6937": 3, "6939": 3, "694": 57, "69402145": 25, "6944": 71, "6954": 6, "6961": 58, "696166": 9, "696219": 9, "696812": 3, "696924": [2, 5], "6975": 6, "6977": 6, "69795192": 8, "698437": 9, "6986": 67, "699": 8, "6990569": 2, "699057": [2, 3, 5], "6991": 35, "69910025": 25, "699317": [2, 5], "699578": 3, "6_fair": 378, "6th": 323, "7": [5, 8, 9, 10, 17, 18, 23, 24, 25, 34, 35, 43, 44, 45, 46, 49, 57, 58, 63, 64, 67, 68, 71, 79, 80, 83, 86, 107, 220, 302, 317, 323, 326, 333, 364, 369], "70": [3, 9, 17, 18, 35, 49, 63, 64, 67, 68, 71, 79, 80], "70000": 5, "7005": 6, "7005e": 34, "7006": 6, "700630": 3, "700e": 10, "701555": 9, "701683": 16, "7017": 6, "7024171": 18, "7034": 67, "703447": 9, "703580e": 333, "70426": 49, "70441192": 8, "7049": 35, "7052": 6, "7058": 67, "70591259": 8, "70624983": 17, "7069": [63, 67], "7077": 79, "7081": 79, "709229": 49, "71": [17, 18, 63, 64, 68, 71, 83], "7109": 6, "7111": 67, "7113": 63, "7115": 6, "7118": 6, "712": 64, "7131": 67, "7136": 6, "7145": 6, "715251": [2, 5], "7154": 57, "7157": 79, "717": 58, "7170": 63, "7175": 6, "7177": 43, "7180": 45, "7180374727086953": 45, "7198": 6, "72": [9, 10, 17, 18, 64, 79], "7208288": 25, "721": 64, "7222": 6, "722428": [2, 5], "72256946": 8, "723": [6, 61, 65, 378], "723022": 16, "723182": 3, "7232": 17, "7238": 6, "723989": [2, 5], "7256": 45, "726041": 9, "7273": 10, "7274": 6, "72775698": 8, "727856": 9, "7279": 6, "7281": 6, "7282": 57, "7284": 83, "7285": 9, "728754": 3, "7290": 17, "7297": 67, "73": [17, 18, 68, 83], "730": 63, "7302": 6, "7305": 63, "7308": 67, "7312": 6, "7314": 6, "7317": 6, "732": [10, 11, 378], "73282696": 40, "733311": 15, "733875": 3, "7340": 6, "7341": [46, 67], "7343": 46, "7344": [43, 71], "7345": 43, "7347": 67, "7349": 79, "7350": 6, "735054": 360, "7355": 83, "736452": 3, "736758": 15, "736877": [13, 49], "7369": 63, "737": 6, "73709": 49, "737090": 13, "7372": 63, "7374": 35, "7378": 43, "7381": 67, "7384874": 8, "7391e": 18, "7393": 79, "739384": 3, "7396": 46, "7398": 6, "74": [6, 10, 17, 18, 67, 68, 83], "740": [67, 79], "74019125": 8, "7403": 35, "7404": 46, "7405": [46, 79], "7406": [43, 79], "7407": 43, "7408": 43, "74094000e": 25, "7411": 79, "74119907": 8, "7412": 79, "7412e": 46, "7414": 79, "7416": 46, "7417": 79, "7418": [43, 46, 79], "7419": 6, "7420": 79, "7421": 79, "7424": [10, 79], "7427": 79, "7428": 79, "7433": [45, 58, 79], "7434": [17, 79], "7435": [6, 79], "7437": 79, "7438": 79, "7439": 79, "744": [5, 11, 378], "7443": 79, "7444": 79, "7445": 79, "7446": 79, "7448": 79, "7450": 79, "7453": 6, "7454": [43, 79], "7455": 79, "7456": [6, 79], "746": [68, 69, 80, 81, 378], "7460": 79, "7464": [45, 67, 79], "7465": [46, 63], "746540": 9, "7466": 79, "747": 35, "7471": 6, "7474": 6, "747475": 52, "7476": 6, "7492": 43, "749674": 49, "75": [3, 5, 8, 9, 10, 17, 18, 63, 67, 68, 83, 370], "750": 72, "7500": [43, 71], "75000": 25, "7502": 6, "7503": 6, "7505": 24, "7507": 46, "7509": 18, "7512": [45, 67], "751288": 9, "7514": 67, "7518": 3, "752": [63, 67, 71, 79], "75201011": 8, "7525315": 25, "75308490e": 25, "7532": 6, "753660": [2, 5], "7538": 6, "753876": 9, "7539": 43, "7540": 43, "7547": 46, "755": [35, 36, 378], "7552": 43, "7554": 63, "755482": 9, "7556": 83, "7557": 45, "7559": 45, "7560": 24, "756332": 9, "7566": 43, "7568": 46, "7569": 6, "7575": 63, "757503e": 333, "7576": 10, "7577": 6, "7578": 63, "7580": 6, "75812003": 8, "7582": 23, "7584": 6, "7589": 63, "759": 80, "7591": 18, "7593": 43, "75945": 49, "7598": 43, "75d054": 52, "75th": 321, "76": [10, 17, 18, 63, 67, 68, 83], "760": 6, "76039622": 8, "7624": 6, "762511": 3, "763": 6, "7632": 45, "7633": 45, "7641": [35, 45, 57], "7645": 6, "7646": 45, "764923": 2, "7655": 45, "7658": 63, "7662": [61, 79], "7664": 6, "766402": 3, "7667": 6, "7669": 63, "7671": 34, "7675": 6, "7676": 71, "768": 6, "7681": 6, "7683": 6, "768742": 49, "7690": [6, 63], "769194e": 333, "7695": 23, "7696": 45, "77": [17, 18, 67, 68, 72, 80, 83], "7701": 6, "7705": 6, "7706": 45, "7708": 34, "77098477": 17, "771": 34, "77103605": 25, "77109665": 17, "7711": 6, "77115248": 8, "7714": 63, "772": [6, 58], "772886e": 333, "773": [71, 79], "773221": 49, "77373500e": 25, "77418421": 8, "7742": 23, "7747": 21, "7748": 45, "77488155e": 25, "775": 6, "7751": 45, "775229": 49, "7754": 67, "7757": 6, "7759": 46, "776": 67, "7761": 8, "7765": 6, "7778": 71, "7779": 23, "7787": 46, "77918172": 8, "7793": 23, "779349": 3, "77944850e": 25, "7798899449724863": 5, "7799": 46, "78": [17, 18, 49, 63, 67, 71, 80, 83], "780": 35, "7800": 6, "780283": 49, "7803": 25, "78034682e": 21, "7814": 35, "781533": 49, "78185": 49, "7819": 19, "782492": 3, "7826": 6, "7829": 6, "7832": 19, "783313": 49, "7840": [6, 23], "784044": 49, "7842": [45, 58], "7854": 63, "7857": 18, "786645": 49, "787": [6, 35], "7870": 6, "7872": 23, "7873": 57, "7882": 83, "7887": 71, "789": 35, "7896": [25, 63], "789608": 49, "7899": 3, "79": [3, 17, 18, 63, 68, 72, 79, 80], "7902": 6, "791": 6, "7910": 68, "7911": 6, "791414": 49, "7918": 63, "79189717": 8, "7919": 6, "7925": [23, 43], "7926": 6, "793092": 3, "794": 57, "7943": [3, 6], "7945": 6, "795420": 3, "7955": 67, "7956": 63, "7964": 23, "796614": 49, "796958": 49, "7973": 6, "7974": 6, "798": [39, 41, 378], "7980": 6, "7980e": 34, "798615": 14, "798646e": 333, "7993": 43, "7994": 6, "7996": 63, "799742": 49, "7_explain": 378, "7f7f7f": 52, "8": [3, 5, 6, 8, 9, 10, 17, 18, 23, 24, 25, 29, 30, 34, 35, 43, 44, 45, 46, 49, 52, 57, 58, 63, 64, 67, 68, 71, 79, 80, 83, 107, 317, 318, 333, 334, 338, 364, 369], "80": [8, 9, 10, 17, 18, 35, 49, 63, 64, 67, 68, 71, 72, 79, 80, 364], "800": [13, 27, 35, 52, 378], "80000": [2, 5], "8001": 6, "800262": 9, "8006": [6, 44, 46], "8010": 43, "801333": 49, "80182776": 8, "801917": [13, 49], "802": 35, "802168": 49, "8022": 6, "803167": 49, "8032": 43, "803478": 9, "8035": [35, 43], "8038": 6, "8040": 6, "804507e": 333, "805": 35, "8050": 63, "8051": 6, "8054": 46, "8061": 58, "806229": 3, "806320": 14, "8069": 63, "80710694": 40, "8075": 49, "807500": 13, "8085": [23, 35], "809333": 49, "81": [3, 5, 8, 9, 10, 17, 18, 72, 80], "8101": 43, "8102": 35, "8111": 34, "8117": 46, "812": [6, 35], "8120": 46, "813179": 9, "8136": [24, 67], "8141": 46, "8155": 46, "8157": [6, 35], "8158": [45, 67], "816": 57, "8164": 6, "8167": 35, "8168": 43, "8169": [6, 43], "8170": [43, 67], "817664": 3, "8179": [6, 19], "8183": 9, "8185": 24, "8187": 6, "8196": 6, "819798": 5, "8199": 23, "82": [10, 17, 18, 72, 80, 83, 330], "8201": 35, "8202": [6, 61], "820250": 15, "8203": 63, "82036584": 8, "8205": 25, "820542": 49, "8207": 23, "820e": 10, "8210": [6, 43], "821208": 49, "8217": 23, "82275": 49, "823": [49, 64, 68, 80], "8230063": 8, "823417": 49, "82352339": 8, "8237": [21, 43], "8251": 6, "8252": 46, "826333": 15, "826671": 3, "826716e": 333, "8270": 19, "8275": 6, "8276": 43, "827667": 49, "8277": [43, 63], "827833": 49, "828": 57, "828504": 49, "8286": 63, "829": 6, "829167": 49, "8294": 18, "8296": 43, "8297": 6, "8298": 23, "83": [10, 17, 18, 49, 67, 68, 72, 80], "830": 35, "8300": 25, "8307": 6, "831": 49, "8312": 63, "8315": 43, "8317": 6, "8321": 6, "8325088": 2, "832509": [2, 5], "83255660e": 25, "8326": 46, "8327": 6, "832833": 49, "8330": 6, "833031": 3, "8332428": 25, "8339": 43, "8343": 45, "8350": [23, 43], "8360": 31, "83600735e": 25, "836042": 49, "8363": 43, "8366": 6, "8374": 10, "8375": 10, "8376": 10, "8377": 10, "8378": 10, "837806": 9, "83784574": 8, "8379": 10, "8383": 6, "8384": 68, "8385": 46, "838849": [2, 5], "8394": 6, "839678": 9, "84": [17, 18, 72], "840": [72, 73, 378], "841": 6, "8412": 45, "84176620e": 25, "8425": 6, "84270706": 8, "842721e": 333, "8430": 6, "843542": 49, "8436": 43, "843718": 3, "84393064e": 21, "8441": 6, "84469629": 8, "845": 6, "84516": 2, "84522210e": 25, "8458": 63, "8460": 34, "84602065": 8, "8469": 6, "8479": [6, 21, 34], "848": 35, "8488": 6, "8496": 6, "8499": 6, "85": [17, 18, 34, 46, 68, 72, 83], "850124": 3, "852405": 9, "853476": 9, "8540": 83, "8542": 6, "854855": 5, "8555": 45, "855556": 9, "8571": 67, "85722573e": 22, "8577": 18, "8582": 26, "8588": 34, "8589": 6, "859": [22, 27, 378], "85it": 49, "86": [10, 17, 18, 68], "8612": 26, "8619246": 8, "86308480e": 25, "8645": 71, "864547": 3, "8652": 34, "8656908": 8, "866": 63, "867": [64, 68, 80], "8677": 83, "867905": 3, "8693": 71, "87": [10, 17, 18, 80], "8710": 35, "8713": [6, 45], "8716": 83, "8719": 6, "8724": 6, "8728": 6, "8734": 23, "874": [64, 68, 80], "874094": 25, "874555": 49, "874692": 9, "8748": 21, "8757": 24, "8760": 34, "8763": 6, "879374": 3, "8796": 58, "88": [17, 18, 64, 67, 68, 83], "880594": 49, "881": 6, "8825": 24, "882553": [2, 5], "8831": 31, "88498131e": 22, "885018e": 333, "8855": 71, "885958": 3, "8863": 44, "8869": 6, "8875": 6, "8876": 44, "888": 144, "8883": 6, "8885": 61, "8888": 6, "89": [9, 10, 17, 18, 71, 80], "8902": 35, "8907": [71, 72], "89070025": 25, "8910": 34, "891201e": 333, "8918": 71, "8924": 72, "8929": 45, "893123": 9, "8936": 6, "89376030e": 25, "8938": 6, "894205": [2, 5], "8965": 71, "8978": 34, "8979": 71, "8981": 6, "8987": 71, "899": 8, "8991": 6, "8992": 6, "89930816": 8, "8996": 6, "8c564b": 52, "8e93": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "9": [2, 3, 5, 8, 9, 10, 17, 18, 21, 23, 24, 25, 34, 35, 43, 44, 45, 46, 49, 57, 58, 63, 64, 67, 68, 71, 72, 79, 80, 83, 107, 112, 119, 210, 212, 213, 214, 215, 216, 220, 226, 228, 229, 230, 231, 232, 323, 327, 333, 334, 346, 348, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370], "90": [9, 10, 17, 18, 35, 49, 52, 64, 71, 80, 222, 224, 319, 346, 348], "90000": 2, "9001": 6, "90012033": 8, "9010": 6, "901036": 9, "9025": 71, "90417395e": 25, "9042": 72, "9049": 6, "906131": 3, "9062": 71, "9063": 6, "90643441": 8, "9068": 35, "90776706": 8, "908": 35, "9080": 6, "909": [8, 54, 55, 378], "9091": 6, "90it": 49, "91": [17, 18, 63, 80, 83], "910277": 3, "910548e": 333, "91086655": 8, "91112114": 8, "911598": 3, "912": [64, 68, 80], "9122": 6, "9131": 6, "9133": 6, "9134": 6, "9135": 6, "91531044": 8, "916": [330, 333], "9164": 6, "9171": 6, "918": 34, "918397": 5, "92": [17, 18, 34, 67, 83], "920": 58, "921166": 3, "9219": 6, "9228": 6, "92474582": 8, "9257": 6, "926": 35, "9263": 45, "9267": 34, "92705194": 8, "9277": 6, "928576": 54, "9286": 71, "9291": 34, "929470": [2, 5], "9295": 34, "93": [8, 9, 17, 18, 58, 63], "9303": 9, "93043925e": 25, "9311": 6, "931103": 9, "931307": 3, "931323": 5, "9319": 6, "9324": 6, "9327": 71, "9333": 6, "93337083": 8, "93341379": 8, "93374030e": 25, "933998": [2, 5], "9340": 6, "9341": 6, "9350": 57, "935406": [2, 5], "9355069": 25, "9357": 23, "936": [57, 59, 378], "9368": 23, "938": 58, "93806127": 8, "939138": 8, "939141e": 333, "93986566": 8, "94": [8, 17, 18], "940": 8, "94065728": 8, "9407": 71, "940e": 10, "941289": 3, "9426": 6, "9430": 6, "9431": 6, "9432": 6, "9434": 22, "9440": 34, "9442": 6, "94448235e": 25, "944507": [2, 5], "9447": 6, "9449": [20, 34], "9453": [6, 34], "945496": 9, "9457": [23, 34, 61], "94615745e": 25, "9467bd": 52, "9470": 6, "9472": 6, "9475": 20, "9479": 6, "9481895": 8, "9496": 57, "95": [10, 17, 18, 63, 67, 68, 79], "95000": 25, "950164": 3, "9508": 71, "950861": 3, "951874": 9, "952": 6, "952328": 3, "9524": 6, "953276": [2, 5], "954": [330, 333], "9541": 22, "954194": [2, 5], "9542909": 2, "954291": [2, 5], "9544": 6, "9554": 62, "95640850e": 25, "9574": [23, 34], "957594": 9, "9576e": 34, "9590": 6, "9599828": 25, "95d840": 52, "96": [17, 18, 34, 63, 64, 67, 79], "96028155e": 22, "960e": 10, "961": 72, "962809": 9, "964": 34, "9648": 6, "96500000e": 22, "965827": 3, "966": 8, "9660": 6, "9662": [6, 34], "96689805": 8, "96696482": 8, "967160": 3, "9679": 6, "96832579e": 22, "9689": 6, "9698": 44, "97": [10, 17, 18, 63, 67, 79], "9710": 71, "97176857": 8, "9725": 6, "972620": 9, "9728": 34, "974": 6, "9741": 6, "976": 35, "9769": 35, "9772": 6, "9777": 6, "9788": 34, "9789": 62, "9791": 35, "98": [17, 18, 63, 64, 67, 79, 80], "980": 6, "9803": 72, "9808": 6, "981730": 3, "98238435": 25, "9830": 6, "983024": 3, "9836": 6, "9839": 23, "984308": 3, "9848": 58, "9851": 6, "9852": 6, "9858": 6, "9861": 6, "987": [63, 71], "9881": 52, "9881131988260086": 52, "9882": 6, "989": [6, 35], "989873e": 333, "99": [9, 17, 18, 63, 67, 68, 79, 80, 83, 117, 118, 119], "9902": 6, "99053695": 8, "9910": 6, "99141914e": 22, "9919": 57, "99212203": 8, "9923": 6, "992965": 3, "993234": 5, "995": [3, 10], "99578865": 25, "996": [3, 10, 35], "996155": 9, "99629270e": 25, "997": [3, 10], "9971": 6, "9977": 6, "998": [3, 10], "999": [3, 10, 144], "A": [52, 90, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 160, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 225, 226, 231, 232, 236, 238, 239, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 322, 323, 325, 327, 330, 331, 332, 336, 349, 350, 358, 360, 361, 364, 366, 369, 376], "And": [225, 272, 273, 323], "As": [53, 71, 72, 225, 272, 273, 317, 323, 324, 326, 332, 337, 338, 360, 372], "At": 355, "But": [323, 327], "By": [83, 317, 319, 323, 324, 327, 330, 334, 335, 337, 341, 358, 360, 364, 365, 366, 368, 369, 370], "For": [19, 20, 25, 26, 112, 135, 136, 139, 140, 142, 144, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 237, 239, 246, 272, 273, 300, 317, 321, 322, 323, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375], "If": [106, 107, 112, 114, 116, 121, 122, 123, 124, 125, 126, 144, 147, 153, 160, 164, 165, 167, 180, 187, 199, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 245, 247, 255, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 323, 327, 330, 332, 333, 334, 335, 336, 337, 338, 352, 368, 369], "In": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 52, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 272, 273, 300, 317, 318, 319, 322, 323, 324, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 350, 354, 358, 359, 360, 364, 367, 368, 369, 372, 375], "It": [117, 118, 119, 120, 122, 123, 125, 126, 132, 135, 136, 139, 140, 142, 143, 144, 181, 209, 210, 211, 212, 214, 215, 216, 219, 221, 226, 227, 228, 229, 231, 232, 235, 236, 246, 251, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 338, 339, 345, 351, 352, 354, 359, 361, 364, 370, 373, 374], "Its": [123, 325, 330, 332], "No": [21, 22, 377], "Not": 222, "On": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 317, 319, 330, 332], "One": [247, 321, 328, 354, 355, 356, 357, 358, 359, 368], "Such": 360, "That": [330, 332], "The": [5, 106, 112, 115, 118, 121, 122, 123, 126, 133, 135, 136, 139, 140, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 187, 192, 195, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 240, 242, 243, 245, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 374], "Then": [317, 319, 322, 326, 328, 360, 368, 369], "There": [321, 352, 364, 366, 367, 368], "These": [319, 354, 355, 366, 368, 370], "To": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 228, 229, 230, 231, 232, 306, 319, 322, 326, 331, 332, 333, 334, 335, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 357, 358, 360, 364, 365, 366, 367, 368, 369, 370], "Will": 306, "_": [321, 322, 326, 328, 330, 332, 334, 336, 358, 365, 367, 368, 370], "__": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "__doc__": 52, "_f": 326, "_i": [366, 367], "_j": [354, 355, 359], "_predict": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "_x": [354, 359], "a0": 321, "abil": [322, 323, 327, 355, 364, 365, 366, 367, 368, 369, 370], "abl": 372, "about": [208, 212, 214, 215, 216, 224, 226, 227, 246, 323, 332, 342, 354, 359, 367], "abov": [67, 68, 71, 72, 117, 119, 131, 133, 301, 317, 319, 323, 326, 330, 332, 333, 336, 337, 338, 360, 365, 369, 374], "abs_residu": [57, 58, 224, 366], "abs_residual_perturb": [57, 58, 224, 369], "absolut": [131, 180, 224, 225, 322, 328, 338, 360, 366, 368], "absorb": 355, "acc": [13, 15, 19, 21, 23, 25, 34, 43, 45, 46, 49, 61, 75, 207, 210, 211, 212, 213, 214, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 298, 299, 300, 301, 317, 349, 350, 351, 364, 373], "acc_rank": [43, 46], "accept": [208, 219, 331, 338, 348, 365], "access": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 224, 355, 357, 361, 375], "accommod": 358, "accomplish": 336, "accord": [272, 273, 354, 355, 356, 358, 359, 367, 368], "accordingli": 375, "account": [229, 234, 323, 327, 331, 338, 354, 355, 356, 357, 358, 359, 364, 365], "accumul": [234, 326, 329, 339], "accur": [224, 330, 332, 354, 359, 368, 369], "accuraci": [9, 13, 23, 24, 29, 30, 31, 34, 35, 228, 234, 239, 316, 326, 331, 338, 348, 354, 355, 358, 359, 361, 364, 366, 368, 369], "accuracy_plot": 319, "accuracy_result": 53, "achiev": [272, 273, 323, 330, 337, 354, 358, 359, 360, 364, 366, 367], "acm": [323, 326, 331], "across": [63, 64, 67, 68, 144, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 224, 226, 229, 232, 234, 235, 247, 250, 251, 254, 321, 323, 330, 332, 334, 338, 346, 347, 348, 351, 357, 358, 361, 364, 365, 366, 368, 369, 370], "act": 235, "action": [339, 348, 358, 366], "activ": [4, 135, 139, 140, 142, 165, 167, 172, 183, 184, 186, 188, 189, 190, 272, 273, 285, 286, 289, 290, 321, 328, 360, 365, 367, 368, 375], "activation_func": [272, 273], "active_interaction_index_": [272, 273], "active_main_effect_index_": [272, 273], "active_sample_index": 136, "active_samples_index": 6, "actual": [40, 213, 222, 223, 272, 273, 317, 323, 346, 348, 364, 366], "ad": [272, 273, 317, 319, 321, 326, 355, 368, 369, 374], "adam": [272, 273, 334], "adapt": [323, 356, 358, 368], "add": [5, 30, 144, 173, 195, 224, 227, 265, 321, 343, 344, 345, 350, 355, 365, 367, 369], "add_ind": [5, 144, 321], "add_model": [49, 374], "add_step": [54, 265], "addit": [224, 239, 272, 273, 285, 286, 317, 318, 319, 322, 323, 324, 327, 329, 330, 332, 335, 336, 339, 347, 351, 354, 355, 359, 366, 367, 368, 374], "addition": [324, 332, 333, 336, 339, 366], "address": [358, 363, 364, 365, 370], "adjust": [83, 122, 221, 324, 332, 345, 349, 365, 366, 367, 368, 369], "adopt": [323, 327, 364], "advanc": [323, 331, 339, 348, 349, 355, 358, 363], "advantag": [323, 355, 367, 370], "advers": [83, 208, 219, 220, 221, 318], "adversari": [365, 368, 369], "affect": [136, 221, 246, 331, 338, 365, 368], "after": [216, 220, 221, 224, 227, 232, 238, 274, 275, 276, 289, 290, 323, 326, 332, 341, 342, 348, 349, 351, 352, 355, 360, 369, 372], "ag": [2, 3, 5, 25, 63, 83, 364, 370], "against": [71, 211, 213, 220, 221, 223, 224, 228, 229, 230, 231, 232, 298, 299, 300, 301, 317, 318, 319, 323, 335, 339, 348, 358, 364, 365, 366, 369], "age_missing_nan": 5, "aggreg": [209, 225, 323, 358, 364], "aggress": 365, "agnost": [236, 237, 329, 330, 332, 336, 339, 347, 367], "aim": [222, 224, 319, 323, 326, 330, 332, 356, 364], "air": [83, 208, 219, 220, 221, 229, 318], "al": [234, 329, 338, 339], "aletheia": 360, "alex": 334, "alex2015": 334, "alexand": 323, "algorithm": [117, 118, 123, 125, 132, 224, 236, 299, 300, 317, 319, 323, 327, 330, 331, 349, 350, 355, 356, 360, 361, 366, 367, 368, 373], "align": [52, 322, 323, 324, 328, 330, 331, 332, 333, 334, 336, 338, 339, 354, 355, 359, 360, 364, 366], "alignwithlabel": 52, "all": [4, 21, 22, 29, 52, 63, 64, 67, 68, 71, 72, 79, 80, 83, 110, 111, 112, 114, 120, 121, 122, 123, 124, 125, 126, 135, 136, 137, 139, 140, 142, 143, 144, 147, 153, 161, 164, 165, 167, 199, 201, 202, 206, 207, 208, 209, 211, 213, 216, 218, 219, 220, 221, 224, 225, 227, 228, 229, 230, 231, 232, 235, 237, 239, 245, 247, 249, 254, 259, 260, 272, 273, 289, 290, 298, 299, 300, 301, 303, 306, 317, 319, 321, 323, 326, 327, 330, 331, 332, 333, 334, 337, 338, 342, 352, 354, 355, 357, 358, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 378], "all_bias_weight": 253, "allow": [114, 180, 208, 210, 211, 212, 213, 214, 216, 219, 232, 246, 299, 323, 324, 328, 330, 331, 336, 338, 349, 350, 351, 354, 356, 357, 359, 362, 365, 366, 368, 369, 370, 373], "alon": 225, "along": [144, 218, 355, 357], "alongsid": [255, 364], "alpha": [14, 39, 40, 44, 71, 72, 119, 209, 210, 215, 222, 224, 226, 231, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 319, 323, 357, 365, 367, 373], "alpha_1": 356, "alpha_2": 356, "alpha_i": 359, "alpha_l": 356, "alreadi": [146, 304, 337, 372], "also": [115, 135, 136, 139, 140, 142, 143, 180, 207, 209, 210, 211, 213, 218, 219, 220, 221, 229, 258, 272, 273, 300, 317, 318, 321, 322, 323, 324, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 349, 354, 358, 362, 372, 373, 375], "alter": 322, "altern": [224, 298, 304, 330, 332, 336, 338, 365, 367, 369], "although": [317, 323, 332], "alwai": [120, 325], "am": 335, "amazonaw": 29, "amer": [123, 325], "among": [125, 229, 323, 326, 327, 331, 338, 366, 368], "amount": 321, "an": [5, 30, 117, 118, 122, 133, 180, 219, 230, 235, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 286, 287, 289, 292, 294, 296, 298, 299, 300, 301, 304, 306, 317, 319, 321, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 338, 342, 349, 350, 351, 352, 354, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 374, 375], "analogi": [331, 338], "analys": 49, "analysi": [1, 9, 11, 23, 24, 29, 34, 35, 49, 53, 56, 59, 60, 66, 69, 73, 77, 81, 84, 93, 114, 120, 121, 122, 123, 124, 125, 131, 133, 181, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 246, 247, 253, 254, 255, 256, 258, 285, 286, 315, 320, 326, 327, 330, 332, 333, 334, 336, 337, 342, 343, 344, 347, 348, 351, 357, 363, 364, 370, 378], "analyt": 339, "analyz": [63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 114, 117, 118, 119, 120, 131, 133, 181, 210, 213, 216, 220, 221, 223, 224, 225, 226, 228, 230, 231, 232, 234, 237, 246, 247, 251, 254, 255, 256, 258, 323, 345, 347, 351, 365, 366, 367, 368, 369, 370], "andrea": 323, "angiulli": 323, "angiulli2002": 323, "ani": [52, 123, 160, 204, 262, 265, 283, 284, 285, 286, 306, 318, 325, 331, 334, 337, 338, 367, 375], "anim": 52, "animationdur": 52, "animationdurationupd": 52, "animationeas": 52, "animationeasingupd": 52, "animationthreshold": 52, "annal": [326, 330, 333], "annot": 325, "anomal": [226, 368], "anomali": [117, 323, 327], "anoth": [4, 19, 20, 71, 72, 322, 324, 330, 332, 364, 368], "anova": [225, 353, 356], "anyon": [25, 26], "apart": 334, "api": [29, 30, 49, 317, 319, 323, 332, 333, 334, 335, 336, 337, 338, 339, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 375], "aplei": 330, "apley2016": [330, 332], "appear": [337, 349, 352], "appli": [4, 8, 121, 125, 126, 164, 180, 211, 216, 220, 221, 224, 227, 274, 275, 289, 290, 317, 319, 322, 330, 331, 333, 338, 341, 343, 344, 354, 359, 360, 364, 365, 367, 368, 369], "applic": [114, 209, 228, 326, 354, 355, 358, 359, 369], "appnam": 30, "approach": [119, 323, 326, 327, 331, 338, 339, 358, 359, 366, 373], "appropri": [125, 144, 318, 323, 358, 364], "approv": [364, 369], "approx": [300, 365], "approxim": [125, 255, 326, 330, 331, 336, 338, 345, 367, 370], "april": [317, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "ar": [4, 52, 114, 116, 117, 119, 124, 125, 131, 132, 133, 135, 136, 139, 140, 142, 164, 207, 208, 209, 211, 213, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 246, 247, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 349, 351, 352, 354, 355, 357, 358, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375], "arang": [7, 31, 32, 33, 34, 35, 40, 375], "arbitrari": [28, 36, 48, 266, 267, 268, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 296, 297, 362, 372, 378], "arbmodel": 375, "architectur": [272, 273, 289, 290, 339, 353, 354, 367, 368, 369], "area": [365, 366, 367, 368, 370], "arg": [106, 149, 266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 296, 297], "argsort": 40, "argument": [52, 106, 149, 224, 266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 296, 297, 299, 306, 317, 319, 322, 326, 332, 333, 334, 335, 336, 338, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "aris": 367, "around": [332, 334, 355, 357, 361, 366], "arrai": [2, 6, 8, 9, 10, 17, 18, 21, 22, 25, 30, 32, 33, 39, 234, 237, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 375], "array_of_bin_edg": [112, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232], "articl": 372, "arxiv": [323, 326, 331, 338], "as_data_fram": 29, "ascend": [199, 323, 374], "asfactor": 29, "ask": 0, "aspect": [323, 357, 367, 368], "assembl": 30, "assess": [114, 123, 214, 219, 222, 226, 227, 229, 318, 319, 322, 325, 328, 330, 337, 348, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 368, 369, 370, 373], "assign": [258, 323, 331, 335, 355, 358, 370], "assoc": [123, 325], "associ": [52, 123, 253, 306, 318, 325, 352], "assum": [234, 272, 273, 330, 331, 336, 337, 338, 360, 366, 369], "assumpt": [322, 330, 336, 366, 367], "astyp": [63, 71, 72, 75, 83], "asymmetr": [322, 328], "asymptot": 326, "atemp": [4, 8, 9, 10, 20, 24, 52, 64, 68, 80, 86, 332, 335, 337, 338, 365, 367, 369], "attempt": [220, 221, 234], "attract": [331, 338], "attribut": [51, 55, 223, 268, 291, 318, 326, 331, 335, 338, 341, 364, 378], "auc": [13, 15, 17, 19, 21, 23, 25, 34, 43, 45, 46, 49, 54, 57, 61, 63, 67, 75, 79, 83, 207, 210, 211, 212, 213, 214, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 252, 298, 299, 300, 301, 302, 330, 337, 346, 348, 349, 350, 351, 360, 364, 366, 370, 373], "auc_rank": [43, 45, 46], "augment": [354, 359, 366, 367, 368], "august": 323, "authent": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "author": 323, "auto": [52, 63, 64, 67, 68, 79, 80, 83, 86, 112, 212, 213, 214, 215, 216, 220, 225, 228, 229, 230, 231, 232, 234, 235, 237, 272, 273, 302, 349, 351, 352, 364, 365, 369, 370], "auto_s": 52, "autom": [0, 54, 339, 365], "automat": [54, 126, 175, 212, 214, 215, 216, 304, 306, 324, 341, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 369], "avail": [9, 34, 35, 63, 64, 114, 121, 124, 135, 136, 137, 139, 140, 142, 143, 148, 207, 208, 209, 213, 218, 219, 220, 221, 224, 225, 228, 229, 230, 231, 232, 234, 235, 237, 242, 243, 271, 272, 273, 282, 289, 290, 298, 299, 300, 301, 306, 321, 324, 330, 331, 334, 336, 338, 343, 350, 357, 361, 366, 373], "averag": [209, 215, 222, 231, 237, 247, 319, 323, 327, 330, 332, 334, 335, 336, 337, 338, 354, 355, 356, 357, 359, 360, 361, 366, 367, 369], "avg": [9, 34, 35, 71, 72], "avoid": [272, 273, 326, 350, 360, 368, 369], "awar": [364, 368], "ax": 344, "axi": [31, 32, 33, 83, 117, 118, 119, 121, 122, 207, 208, 210, 212, 214, 215, 216, 222, 223, 226, 227, 234, 235, 236, 237, 238, 239, 245, 248, 250, 254, 255, 256, 300, 317, 318, 319, 335, 338, 343, 348, 360, 375], "axis_nam": [38, 40], "axislabel": 52, "axislin": 52, "axispoint": 52, "axistick": 52, "b": [322, 326, 328, 330, 359, 360, 364, 369], "b140": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "b_i": 359, "back": 369, "backend": 48, "background": [239, 331, 338], "backgroundcolor": 52, "backpropag": 359, "backslash": [331, 338], "backward": [132, 326], "bad": 302, "bade28": 52, "bag": 369, "balanc": [221, 318, 321, 342, 343, 344, 354, 355, 359, 364, 365, 367, 368, 369], "bandwidth": 334, "bank": [367, 368, 369], "bar": [114, 120, 121, 131, 133, 206, 207, 208, 209, 211, 219, 220, 224, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 254, 255, 256, 298, 299, 300, 301, 306, 317, 318, 319, 325, 331, 332, 335, 336, 338, 342, 343, 346, 347, 348, 349, 350, 357, 360, 366], "basak": 326, "base": [117, 118, 119, 121, 123, 131, 132, 133, 158, 164, 180, 181, 208, 211, 212, 214, 215, 216, 219, 220, 224, 227, 228, 230, 231, 232, 246, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 317, 318, 320, 321, 322, 324, 325, 326, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 343, 344, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 361, 364, 365, 366, 367, 368, 369, 370, 373, 374], "base_scor": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "baselin": [221, 239, 368, 369], "baseline_dataset": [87, 239], "baseline_sample_index": [87, 239], "baseline_sample_s": [87, 239], "basi": [323, 369], "basic": [1, 11, 13, 23, 24, 29, 52, 107, 315, 320, 324, 356, 378], "batch": [63, 64, 71, 72, 79, 80, 83, 228, 229, 230, 231, 232, 272, 273, 285, 286, 289, 290, 373, 374], "batch_siz": [272, 273, 289, 290], "batch_size_infer": [272, 273], "bcbd22": 52, "becaus": [106, 235, 330, 332, 335, 354, 355, 356, 359], "becom": [331, 335, 338, 368], "been": [152, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 360], "befor": [125, 160, 172, 180, 225, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 369, 370], "begin": [322, 323, 327, 328, 330, 331, 332, 333, 334, 336, 338, 349, 354, 356, 360, 364, 365, 367, 368], "behav": 368, "behavior": [226, 232, 323, 348, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 368, 370, 373], "behind": 323, "being": [118, 207, 209, 210, 211, 212, 214, 215, 216, 251, 330, 331, 332, 337, 338], "belong": [323, 327], "below": [132, 317, 318, 319, 321, 323, 331, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 375], "benchmark": [339, 364, 369], "benefici": 326, "benefit": [331, 338, 357, 358, 361], "benign": 369, "bernhard": [323, 326], "best": [15, 16, 272, 273, 299, 317, 346, 349, 358, 366], "beta": [365, 367], "beta_1": 356, "beta_2": 356, "beta_l": 356, "better": [5, 118, 221, 317, 319, 323, 330, 334, 337, 354, 355, 356, 357, 359, 360, 365, 366, 367, 373], "between": [3, 7, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 114, 117, 118, 119, 121, 122, 123, 125, 131, 180, 208, 209, 214, 215, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 232, 235, 250, 299, 317, 319, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 342, 343, 344, 345, 347, 348, 351, 354, 356, 357, 358, 359, 365, 366, 367, 368, 369, 370], "beyond": [330, 332], "bi_featur": [332, 336], "bia": [250, 253, 277, 318, 339, 356, 360, 364, 365, 366, 370], "bias": [330, 332, 359, 360, 364, 370], "bigl": 358, "bigr": 358, "bike": 319, "bikeshar": [4, 6, 8, 9, 10, 14, 16, 18, 20, 22, 24, 26, 40, 44, 52, 57, 58, 61, 62, 64, 68, 72, 76, 80, 86, 148, 321, 332, 333, 334, 335, 336, 337, 338, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369], "bill_amt1": [2, 3, 5, 25, 63, 71, 79, 83, 364, 370], "bill_amt2": [2, 3, 5, 25, 63, 79, 83], "bill_amt3": [2, 3, 5, 25, 63, 79, 83], "bill_amt4": [2, 3, 5, 25, 63, 71, 79, 83], "bill_amt5": [2, 3, 5, 25, 63, 71], "bill_amt6": [2, 3, 5, 25, 63], "bin": [5, 63, 64, 67, 68, 83, 112, 114, 120, 126, 212, 213, 214, 215, 216, 220, 221, 225, 228, 229, 230, 231, 232, 317, 322, 323, 328, 330, 332, 341, 342, 351, 352, 365, 366, 367, 368, 369], "bin_numer": [5, 321], "binari": [29, 37, 41, 48, 53, 61, 63, 124, 125, 126, 176, 218, 234, 235, 237, 267, 270, 271, 273, 275, 276, 277, 279, 281, 284, 286, 288, 289, 290, 291, 293, 295, 297, 317, 323, 330, 331, 332, 333, 334, 335, 336, 337, 338, 360, 367, 378], "binaryclassifi": 29, "bind": 352, "binning_featur": 220, "binning_method": [83, 220, 364], "bird": 373, "bit": [331, 338], "bivari": [79, 80, 83, 121, 320, 364, 367, 369], "black": [330, 347, 355, 360], "blank": 52, "bleich": 334, "block": [272, 273], "blue": 338, "blursiz": 52, "bogdan": [330, 333], "bolder": 52, "bonu": [331, 338], "bool": [117, 119, 144, 160, 172, 180, 187, 195, 199, 201, 206, 208, 213, 219, 220, 221, 223, 229, 236, 254, 255, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306], "boolean": [146, 213, 214, 215, 216, 228, 229, 230, 231, 232], "boost": [215, 222, 267, 270, 271, 273, 274, 275, 277, 279, 281, 284, 285, 286, 288, 290, 291, 293, 295, 297, 315, 330, 353, 358, 359, 366, 369, 372], "booster": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "boosting_typ": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "borboudaki": 326, "borboudakis2019": 326, "bordercolor": 52, "bordertyp": 52, "borderwidth": 52, "both": [112, 118, 122, 123, 124, 125, 144, 207, 218, 221, 228, 230, 236, 245, 246, 272, 273, 274, 275, 318, 319, 323, 325, 327, 331, 332, 334, 338, 339, 343, 354, 355, 357, 358, 359, 360, 361, 364, 365, 367, 368, 369, 375], "botta": 323, "bottom": [52, 335], "bound": [208, 213, 219, 220, 221, 229, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 369], "boundari": [112, 126, 326, 346, 348, 365], "boundary_clip": [272, 273], "box": [79, 121, 227, 319, 325, 330, 341, 343, 347, 355, 360, 361], "boxplot": 319, "break": [5, 9, 10, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 54, 83, 331, 338], "breiman": [330, 337], "bridg": [347, 359], "brief": 323, "briefli": [323, 360], "brier": [13, 15, 19, 21, 23, 25, 34, 43, 45, 46, 49, 207, 210, 211, 212, 213, 214, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 298, 299, 300, 301, 317, 350, 366, 373], "brier_rank": 43, "broader": 364, "broken": [330, 337], "bruce": 326, "brush": 52, "brute": [330, 336, 373], "build": [12, 48, 339, 354, 355, 356, 364, 365, 368, 370, 372, 375], "builder": 30, "built": [93, 148, 264, 331, 338, 374], "bundl": [354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "burden": [323, 326, 367], "busi": [339, 355, 366], "button": [341, 342, 343, 344, 346, 347, 348, 349, 350, 351], "by_weight": [208, 213, 219, 220, 221, 229], "c": [323, 330, 334, 336, 360, 364, 369], "c1": 345, "c2": 345, "c3": 345, "c_": 367, "c_1": 358, "c_2": 358, "c_j": 358, "c_k": 358, "cach": [107, 303], "cal": 367, "calcul": [52, 71, 72, 83, 114, 117, 118, 119, 123, 131, 207, 208, 218, 219, 220, 222, 223, 224, 225, 229, 230, 231, 234, 235, 236, 237, 238, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 298, 299, 300, 301, 317, 319, 322, 323, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 355, 358, 360, 366, 367, 368, 369], "calhous": 352, "calibr": [41, 71, 72, 93, 209, 215, 222, 231, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 348, 358, 364, 367, 378], "calibrate_interv": [39, 40, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "calibrate_proba": [38, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296], "california": [31, 32, 33, 372, 374], "californiah": [148, 321, 374], "call": [112, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306, 319, 324, 330, 332, 334, 336, 360], "callabl": [117, 118, 119, 265, 268, 291], "callback": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "can": [53, 71, 93, 107, 112, 121, 123, 126, 135, 136, 139, 140, 142, 143, 144, 164, 173, 209, 210, 211, 218, 219, 220, 221, 222, 223, 224, 226, 227, 234, 235, 237, 245, 283, 284, 298, 300, 302, 304, 306, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375], "candid": [277, 326, 354, 358, 366, 367, 373, 374], "cannot": [112, 180, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 318], "capabl": [323, 325, 326, 339, 355, 357, 361, 365], "capac": [365, 367], "capit": [319, 332, 333, 334, 335, 336, 337, 338], "capsul": 29, "captur": [123, 274, 275, 323, 325, 335, 354, 355, 356, 358, 365, 366, 367, 368, 370], "card": [317, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "care": 323, "carefulli": 364, "carlo": [299, 331], "cartesian2d": 52, "cascad": 355, "case": [211, 227, 321, 324, 330, 331, 335, 337, 348, 356, 365, 366, 367, 368, 369], "catboost": [107, 266, 267, 349, 355, 366, 368, 369], "catboost2": 49, "catboostclassifi": 266, "catboostregressor": 267, "categor": [2, 3, 5, 19, 20, 23, 25, 26, 63, 64, 111, 112, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 166, 181, 208, 212, 213, 214, 215, 216, 219, 220, 221, 228, 229, 230, 231, 232, 234, 246, 247, 271, 272, 273, 282, 300, 317, 319, 325, 326, 332, 336, 341, 343, 344, 350, 352, 355, 356, 357, 358, 359, 364, 365, 366, 367, 368, 370], "categori": [3, 5, 52, 122, 124, 125, 126, 208, 213, 219, 220, 221, 229, 300, 323, 324, 327, 332, 342, 343, 354, 355, 356, 357, 358, 359, 369], "categorical_encod": [124, 125], "caus": [327, 364, 369], "causal": [326, 339], "caution": 326, "cblof": [117, 320, 339], "cboost_model": 355, "ccc": 52, "ccp_alpha": [15, 16], "cdf": [323, 326, 368, 369], "cdot": [354, 355, 359, 365, 366], "cell": [3, 5, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 342], "center": [13, 14, 17, 18, 19, 20, 23, 24, 25, 26, 52, 87, 117, 164, 236, 254, 255, 258, 283, 284, 327, 330, 332, 335, 354, 355, 356, 357, 358, 359, 360, 368], "central": [352, 362, 374], "centroid": [21, 22, 258, 283, 284, 300, 323, 327, 358], "certain": [23, 319, 322, 323, 324, 330, 331, 336, 338, 354, 355, 356, 359, 364], "cezar": 323, "chain": 339, "challeng": [210, 226, 331, 338, 346, 348, 358, 364, 368], "chang": [15, 16, 79, 80, 136, 227, 237, 319, 322, 323, 326, 327, 328, 334, 335, 346, 348, 355, 357, 361, 364, 365, 366, 367, 368, 369, 370], "changed_name_kei": 52, "charact": 326, "character": [367, 370], "characterist": [211, 258, 323, 327, 358, 369], "chart": [120, 315, 317, 319, 325, 336, 340, 342, 344, 346], "chart_id": 52, "chatterje": [123, 325], "chatterjee2021": 325, "chebyshev": 125, "check": [5, 83, 135, 136, 139, 140, 142, 143, 153, 319, 341, 352, 354, 358, 359, 365, 366, 367, 368, 369, 370], "checkbox": 341, "chen": [323, 327], "chi": 360, "child": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 323], "ching": [323, 327], "choic": [323, 355, 360, 361], "choos": [209, 299, 323, 327, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 358, 365, 369], "chosen": [119, 215, 223, 317, 368, 369], "circl": [319, 323], "circumst": 368, "clara": 323, "clariti": [223, 272, 273, 354], "class": [0, 49, 52, 180, 208, 213, 219, 220, 221, 223, 229, 234, 235, 237, 239, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 321, 325, 362, 364, 366, 367, 375], "class_weight": [15, 23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "classif": [0, 12, 27, 29, 30, 48, 54, 56, 59, 60, 65, 66, 69, 70, 73, 74, 77, 78, 81, 82, 84, 89, 118, 119, 176, 182, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 298, 299, 300, 301, 316, 321, 323, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 346, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 373, 375, 378], "classifi": [28, 36, 37, 41, 48, 222, 257, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 323, 327, 331, 355, 361, 366, 378], "classmethod": 259, "clean": [107, 321, 365], "cleaner": 355, "clear": [332, 352, 354, 355, 358], "clear_mlflow_hom": [0, 107], "clearer": 355, "clearli": 323, "click": [52, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "client": [317, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "clip": [52, 272, 273, 274, 275, 276, 277], "clip_predict": [23, 24, 274, 275, 276, 277], "close": [123, 319, 325, 335, 360, 364], "closer": 235, "cluster": [75, 76, 117, 210, 211, 224, 226, 247, 258, 283, 284, 327, 339, 345, 346, 358, 363, 365, 366], "cluster_id": [366, 367, 368, 369], "cluster_label": 224, "cluster_method": [57, 58, 224, 366, 367, 368, 369], "cluster_no": 358, "cluster_perform": [57, 58, 224, 366], "cluster_qr": 368, "cluster_residu": [57, 58, 224, 366], "cluster_threshold": 117, "cma": [46, 299], "cmaessampl": 299, "cnt": [9, 10, 14, 16, 18, 20, 22, 24, 26, 40, 44, 58, 62, 64, 68, 72, 76, 80, 86, 319, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369], "coalit": [331, 338], "coarser": 364, "code": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93, 107, 121, 315, 317, 318, 319, 322, 323, 324, 332, 333, 334, 335, 336, 337, 338, 339, 343, 344, 352, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370], "coef": 338, "coeffcient": [357, 360], "coeffici": [123, 225, 236, 245, 250, 253, 255, 320, 325, 331, 335, 338, 354, 356, 357, 359, 360, 366], "coefici": [357, 360], "col_nam": [29, 52], "colab": 93, "collect": [30, 365, 367, 368, 370], "color": [3, 52, 121, 122, 325, 343, 344, 345, 350], "colorbi": 52, "colsample_bylevel": [9, 38, 39, 40, 53, 61, 62, 63], "colsample_bynod": [9, 38, 39, 40, 53, 61, 62, 63], "colsample_bytre": [9, 23, 24, 25, 26, 38, 39, 40, 43, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "colsiz": 52, "column": [2, 3, 5, 8, 9, 10, 17, 18, 29, 30, 31, 32, 33, 34, 35, 52, 63, 64, 67, 68, 71, 72, 79, 80, 83, 110, 111, 124, 125, 126, 144, 157, 168, 169, 174, 208, 213, 219, 220, 221, 229, 246, 321, 341, 342, 349, 350, 352, 375], "com": 29, "combin": [9, 132, 235, 239, 276, 277, 283, 284, 285, 286, 306, 323, 326, 327, 331, 338, 342, 343, 344, 346, 350, 356, 357, 358, 365, 366, 368, 370, 373], "come": [235, 331, 338, 364], "command": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 106, 107], "commiss": 364, "common": [331, 338, 342, 367, 368, 370, 373], "commonli": [322, 323, 330, 336, 364], "compar": [64, 75, 76, 79, 80, 83, 114, 207, 208, 209, 210, 211, 212, 214, 215, 216, 221, 235, 316, 317, 318, 319, 322, 323, 332, 335, 346, 348, 350, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370], "compare_accuraci": 53, "compare_accuracy_t": [38, 54, 61, 62, 366], "compare_fair": [83, 364], "compare_reli": [71, 72, 367], "compare_resili": [75, 76, 368], "compare_resilience_clust": 368, "compare_robust": [54, 79, 80, 369], "compare_slicing_accuraci": [63, 64, 370], "compare_slicing_fair": [83, 364], "compare_slicing_overfit": [67, 68, 365], "compare_slicing_reli": [71, 72, 367], "compare_slicing_robust": [79, 80, 369], "comparison": [0, 114, 207, 212, 213, 214, 215, 219, 258, 315, 340, 351, 354, 355, 356, 357, 359, 360, 363], "compat": [144, 268, 291, 339, 357, 361], "compet": 364, "competit": 354, "complement": [180, 323, 330, 334, 336], "complementari": 366, "complet": [124, 181, 249, 273, 289, 290, 342, 349, 361], "complex": [274, 275, 276, 323, 330, 336, 344, 345, 347, 358, 360, 366], "compliant": 364, "complic": [360, 370], "compon": [112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 231, 232, 246, 248, 250, 251, 252, 253, 254, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 325, 327, 354, 355, 356, 357, 358, 359, 360, 364], "composit": 366, "comprehens": [123, 181, 208, 210, 211, 323, 325, 327, 339, 344, 346, 355, 364, 373, 376], "compris": [317, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "comput": [107, 117, 118, 119, 123, 124, 133, 164, 181, 212, 213, 214, 215, 219, 220, 228, 229, 230, 231, 232, 234, 238, 239, 246, 248, 251, 254, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 322, 323, 326, 327, 330, 331, 332, 333, 334, 336, 337, 338, 355, 356, 358, 364, 365, 366, 367, 368, 370, 377], "computation": [367, 373], "concat": [31, 32, 33, 375], "concaten": [34, 35], "concept": [331, 338, 356, 366], "conceptu": [354, 359], "concern": 364, "conclus": [319, 364], "concord": [123, 325], "conda": 93, "condit": [132, 209, 226, 232, 320, 323, 331, 338, 339, 348, 364, 366, 367, 368, 369, 370], "conduct": [4, 216, 326, 339, 368], "confer": [323, 327, 331], "confid": [222, 224, 346, 348, 366, 367, 368, 370], "config": [83, 217, 261], "configur": [5, 52, 53, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 126, 131, 132, 133, 144, 164, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 298, 299, 300, 301, 306, 321, 334, 342, 346, 347, 348, 352, 364, 368], "confin": 52, "conflict": [107, 364], "conform": [71, 72, 222, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 339, 363], "confus": [61, 218, 222], "confusion_matrix": [53, 61, 218], "consecut": 368, "consequ": 318, "consid": [117, 119, 131, 227, 238, 274, 275, 276, 317, 318, 323, 327, 330, 331, 333, 336, 337, 338, 354, 355, 359, 360, 364, 365, 366], "consider": [144, 319, 367], "consist": [123, 164, 224, 319, 325, 331, 332, 333, 334, 335, 336, 337, 338, 339, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370], "const": 341, "constant": [144, 321, 334, 355, 356, 365, 368, 369], "constrain": [355, 366], "constrainst": 365, "constraint": [272, 273, 285, 286, 353, 364, 366, 367, 368, 369], "construct": [277, 306, 323, 327, 355, 367], "consum": 338, "contain": [0, 48, 93, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 152, 160, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 315, 323, 327, 337, 356, 367, 370], "containlabel": 52, "content": [233, 303, 342], "context": [298, 299, 300, 301, 323, 330, 331, 336, 338, 364], "contextu": 364, "continu": [52, 112, 123, 319, 323, 325, 332, 333, 334, 335, 336, 337, 338, 339, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 369, 370, 374], "contrast": [323, 327, 335], "contribut": [225, 236, 239, 255, 274, 275, 323, 327, 331, 334, 335, 337, 338, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 369], "control": [112, 119, 172, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 235, 237, 239, 246, 265, 276, 299, 323, 324, 336, 339, 354, 355, 357, 359, 360, 364, 369], "conveni": [319, 375], "converg": [355, 358], "convers": [318, 323], "convert": [29, 30, 124, 125, 126, 145, 192, 285, 286, 359, 369], "coordin": [250, 258, 344, 345, 350], "coordinatesystem": 52, "copi": 38, "copy_x": [14, 44], "coral": [323, 327], "core": [239, 272, 273, 289, 290], "correct": 355, "correctli": 366, "correl": [52, 123, 131, 320, 323, 327, 330, 331, 332, 336, 338, 339, 343, 365], "correspond": [210, 234, 237, 238, 245, 248, 299, 323, 327, 331, 338, 354, 358, 359, 360, 370, 373], "corrratio": 326, "corrupt": 327, "cosin": 125, "cost": [272, 273, 354, 359, 364, 365, 366, 367, 368], "could": [272, 273, 331, 338, 366], "count": [3, 17, 18, 252, 253, 319, 324, 332, 333, 334, 335, 336, 337, 338, 342, 360, 366], "count_llm": 253, "covari": [323, 326, 327, 339, 367], "cover": 362, "coverag": [9, 34, 35, 71, 72, 209, 215, 222, 224, 231, 346, 348, 367], "cp": 367, "cpu": [17, 18, 19, 20, 23, 24, 272, 273, 285, 286, 289, 290], "creat": [5, 53, 112, 120, 121, 122, 124, 125, 126, 144, 152, 215, 223, 224, 235, 237, 245, 246, 247, 248, 249, 250, 257, 283, 284, 285, 286, 304, 306, 321, 323, 331, 332, 335, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "createdatafram": 30, "credit": [5, 364], "criteria": 364, "criterion": [15, 16, 361, 364, 368], "critic": [358, 360, 364, 365, 366], "cross": [283, 284, 298, 299, 300, 301, 326, 366, 373], "crowd": 319, "crqr": 367, "crucial": [327, 335, 373], "csur": 326, "csv": [29, 149, 153, 352], "cubicout": 52, "cuda": [285, 286, 289, 290], "cultur": 364, "cumul": [119, 219, 322, 328, 368, 369], "cumulative_variance_threshold": 119, "cup": [331, 338], "current": [121, 122, 204, 262, 355], "cursor": 52, "curv": [3, 61, 121, 218, 330, 332, 346, 366, 368], "custer": 368, "custom": [63, 64, 114, 208, 213, 219, 221, 229, 274, 275, 276, 277, 283, 284, 285, 286, 324, 339, 341, 342, 349, 368, 369], "custom_tooltip": 52, "customiz": [120, 343], "customm": 370, "cutoff": 221, "cv": [43, 44, 45, 46, 283, 284, 298, 299, 300, 301, 373], "cyclic": [14, 44], "d": [2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 145, 152, 192, 208, 209, 210, 211, 219, 222, 224, 226, 227, 300, 321, 322, 326, 328, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375], "d1": 3, "d2": 3, "d62728": 52, "d_": [322, 328, 330, 333, 367], "d_j": [330, 333], "d_k": [330, 333], "dag": 265, "dai": [332, 334, 336], "daniel": 330, "darker": 332, "dashboard": [107, 339, 352], "data": [0, 1, 4, 6, 8, 11, 52, 53, 54, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 158, 159, 160, 162, 164, 170, 171, 172, 173, 179, 180, 181, 187, 192, 193, 194, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 315, 317, 319, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 370, 378], "data_drift": 114, "data_drift_test": [7, 21, 22, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 208, 209, 210, 211, 219, 222, 224, 226, 227, 328, 358, 365, 366, 367, 368, 369, 370], "data_eda_1d": 120, "data_eda_2d": 121, "data_eda_3d": 122, "data_eda_correl": [52, 123], "data_eda_pca": 124, "data_eda_umap": 125, "data_fs_corr": 131, "data_fs_rcit": 132, "data_fs_xgbpfi": 133, "data_info": [21, 22, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 208, 209, 210, 211, 219, 222, 224, 226, 227, 258, 302, 358, 365, 366, 367, 368, 369, 370], "data_load": 352, "data_outlier_cblof": 117, "data_outlier_isolationforest": 118, "data_outlier_pca": 119, "data_path": [149, 154], "data_preprocess_bin": 112, "data_preprocess_encod": 126, "data_preprocess_imput": 144, "data_preprocess_sc": 164, "data_process": 341, "data_qu": 323, "data_result": [21, 22, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 208, 209, 210, 211, 219, 222, 224, 226, 227, 358, 365, 366, 367, 368, 369, 370], "data_summari": [181, 324, 342], "databas": [259, 265, 321], "datafram": [5, 9, 10, 30, 31, 32, 33, 34, 35, 52, 113, 114, 117, 118, 119, 123, 124, 125, 131, 132, 133, 144, 145, 147, 150, 151, 159, 170, 171, 173, 181, 187, 192, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 234, 235, 236, 237, 238, 245, 246, 248, 252, 254, 255, 259, 306, 321, 333, 372, 375], "dataset": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93, 197, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 272, 273, 274, 275, 289, 290, 294, 295, 298, 299, 300, 301, 302, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 378], "dataset1": [7, 114, 302], "dataset2": [7, 114, 302], "datazoom": 52, "dateutil": 107, "daytim": 336, "dde318": 52, "de": 360, "deactiv": [354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369], "deal": [1, 11, 272, 273, 369, 378], "debias": 364, "debug": [347, 366], "decid": [323, 369], "decis": [12, 27, 48, 234, 235, 237, 249, 257, 266, 268, 269, 272, 274, 276, 277, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 315, 331, 335, 338, 351, 353, 356, 358, 364, 365, 366, 369, 378], "decision_funct": [234, 235, 237, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 332, 333, 334, 336], "decisiontre": 374, "decisiontreeclassifi": [269, 361], "decisiontreeregressor": [270, 361], "declin": 368, "decompos": [331, 338, 354, 355, 356, 358, 359, 365], "decomposit": 360, "decreas": [23, 24, 123, 272, 273, 274, 275, 276, 277, 285, 286, 325, 354, 355, 359, 364], "dedegr": 339, "dedic": 318, "deep": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 339, 360, 375], "deepcopi": 38, "deeper": 358, "def": [29, 30, 32, 33, 54, 375], "default": [4, 52, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 139, 140, 142, 143, 144, 147, 153, 160, 164, 165, 167, 172, 180, 181, 187, 199, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 317, 319, 322, 323, 327, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 351, 360, 364, 373], "defin": [29, 208, 212, 213, 215, 216, 219, 221, 229, 232, 283, 284, 298, 299, 321, 322, 323, 326, 328, 330, 331, 333, 334, 336, 338, 348, 350, 355, 358, 360, 364, 365, 369, 370, 373, 375], "definit": [208, 212, 213, 214, 215, 216, 219, 228, 229, 230, 231, 232, 330, 332, 363], "degrad": [319, 330, 337, 339, 346, 348, 368, 369, 370], "delet": [115, 116, 197, 303, 321, 326, 352], "delete_extra_data": 10, "delete_registered_data": 321, "delinqu": 321, "deliv": 358, "delta": [365, 368, 369], "demo": [2, 9, 34, 35, 321, 323, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "demograph": [170, 171, 208, 318, 364], "demonstr": [49, 52, 53, 54, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 317, 318, 319, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 372, 375], "deng": [323, 327], "dengel": 323, "denomin": 235, "denot": [330, 331, 334, 337, 338, 358, 360, 364], "densiti": [3, 7, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 114, 117, 118, 119, 120, 208, 209, 210, 211, 219, 222, 224, 226, 227, 322, 323, 325, 332, 342, 343, 344, 365, 366, 367, 368, 369, 370], "depend": [107, 120, 123, 234, 235, 237, 323, 325, 326, 329, 331, 333, 334, 339, 341, 347, 364, 366], "depict": 318, "deploi": [339, 354, 359, 370], "deploy": [346, 349, 368], "dept": [323, 327], "depth": [209, 215, 222, 224, 225, 228, 229, 231, 232, 267, 270, 271, 273, 274, 275, 276, 277, 279, 281, 284, 285, 286, 288, 290, 291, 293, 295, 297, 323, 351, 358, 366, 367, 369], "depth2": [373, 374], "depth5": 374, "deriv": [319, 323], "descend": [326, 360], "descent": [23, 24, 360], "describ": [160, 317, 323, 326, 330, 332, 336], "descript": [160, 181, 204, 262, 321, 341, 365, 370], "design": [136, 302, 323, 331, 338, 339, 354, 364, 369, 374], "desir": [322, 323, 327, 328, 354, 359, 367, 369, 370], "despit": [360, 368], "detail": [25, 52, 123, 181, 207, 208, 209, 211, 212, 213, 214, 215, 222, 224, 226, 227, 246, 254, 259, 300, 301, 306, 317, 319, 323, 325, 326, 327, 330, 331, 339, 343, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370], "detect": [0, 1, 11, 93, 117, 118, 119, 123, 210, 226, 228, 230, 315, 317, 319, 320, 325, 339, 341, 345, 363, 364, 366, 367, 378], "detect_outlier_cblof": [8, 327], "detect_outlier_isolation_forest": [8, 327], "detect_outlier_pca": [8, 327], "determin": [117, 222, 227, 246, 277, 284, 299, 300, 301, 322, 323, 324, 327, 328, 330, 331, 336, 338, 358, 366, 367, 368, 369, 370, 373], "dev": 107, "develop": [93, 107, 253, 319, 321, 322, 332, 333, 334, 335, 336, 337, 338, 339, 358, 360, 366, 367, 368, 376], "deviat": [224, 227, 250, 252, 321, 323, 324, 327, 365, 368, 369], "devic": [9, 17, 18, 19, 20, 23, 24, 38, 39, 40, 53, 61, 62, 63, 272, 273, 285, 286, 289, 290], "df": [30, 321], "di": 364, "diagnos": 365, "diagnose_accuracy_residual_fi": 370, "diagnose_accuracy_t": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 43, 44, 45, 46, 53, 61, 62, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 370, 375], "diagnose_fair": [83, 364], "diagnose_mitigate_unfair_bin": [83, 364], "diagnose_mitigate_unfair_threshold": [83, 364], "diagnose_reli": [9, 34, 35, 71, 72, 367], "diagnose_residu": 223, "diagnose_residual_analysi": [9, 34, 35, 57, 58, 366], "diagnose_residual_clust": [57, 58, 366, 367, 369], "diagnose_residual_fi": 370, "diagnose_residual_interpret": [57, 58, 366], "diagnose_resili": [9, 34, 35, 75, 76, 368], "diagnose_resilience_clust": [224, 368], "diagnose_robust": [79, 80, 369], "diagnose_slicing_accuraci": [9, 34, 35, 63, 64, 370], "diagnose_slicing_fair": [83, 364], "diagnose_slicing_overfit": [9, 34, 35, 67, 68, 365], "diagnose_slicing_reli": [71, 72, 367], "diagnose_slicing_robust": [79, 80, 302, 369], "diagnost": [0, 315, 316, 339, 346, 348, 351, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 368, 369, 370], "diagram": [249, 257, 361], "dict": [52, 112, 160, 204, 208, 212, 213, 214, 215, 216, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 246, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306], "dictionari": [112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 160, 164, 180, 181, 195, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 276, 298, 299, 300, 301, 302, 373], "differ": [7, 48, 49, 53, 63, 64, 67, 68, 114, 131, 181, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 223, 224, 226, 227, 229, 232, 250, 251, 283, 284, 316, 317, 318, 319, 321, 322, 326, 327, 328, 330, 331, 332, 335, 336, 337, 338, 343, 351, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 373], "differenti": [358, 359], "difficult": [210, 226, 235, 368], "diistribut": 339, "dill": 107, "dimens": [52, 125, 323, 346, 348, 355], "dimension": [119, 125, 322, 323, 325, 327, 345, 365, 366], "direct": [123, 325, 339, 346, 354, 355, 356, 357, 359, 360, 361, 366, 368, 375], "directli": [283, 284, 317, 318, 331, 337, 338, 357, 360, 361, 364, 365], "directori": [304, 305, 306], "disabl": [2, 321], "disadvantag": [326, 370], "discontinu": 356, "discord": [123, 325], "discov": [323, 327], "discoveri": [323, 326, 331, 345], "discrep": [322, 323, 368], "discret": [112, 322, 328], "discrimin": [318, 364], "diseas": 364, "disentangl": [354, 360], "displai": [38, 40, 114, 201, 207, 208, 209, 213, 218, 219, 220, 221, 224, 225, 228, 229, 230, 231, 232, 233, 245, 298, 299, 300, 301, 306, 317, 318, 319, 322, 323, 338, 341, 342, 343, 345, 348, 349, 351, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 370], "display_plot": 233, "display_t": 233, "disproportion": [368, 369], "dissimilar": [322, 323, 327], "distanc": [114, 117, 119, 125, 208, 219, 224, 323, 327, 328, 332, 339, 358, 366, 367, 369], "distance_metr": [7, 21, 22, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 114, 322, 358, 365, 366, 367, 368, 369, 370], "distance_scor": 114, "distinct": [122, 318, 323, 355, 358], "distinguish": [117, 354, 366], "distribut": [63, 64, 83, 114, 120, 209, 210, 219, 222, 224, 226, 227, 251, 299, 301, 302, 317, 319, 320, 325, 326, 327, 331, 338, 339, 342, 343, 346, 348, 357, 358, 363, 364, 365, 366, 367, 370, 373], "divers": [339, 358, 362, 364], "divid": [234, 323, 327, 330, 332, 361, 365, 370], "divis": 361, "dnn": 353, "do": [9, 324, 330, 331, 332, 337, 338, 375], "document": [330, 334, 337, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "doe": [23, 123, 304, 323, 325, 327, 331, 332, 333, 334, 335, 336, 337, 364, 365], "doesn": [116, 274, 275], "doi": [323, 327], "domain": [354, 355, 359, 365, 367, 368, 369], "dominik": 326, "done": [266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 317, 332, 335, 365, 369], "dot": [319, 323], "down": [330, 331, 332, 338, 343, 344], "download": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 343, 344], "downsampl": [331, 338], "downstream": 173, "draw": [71, 332, 338], "drawn": [121, 239, 369], "drift": [0, 1, 11, 57, 58, 67, 68, 71, 72, 75, 76, 79, 80, 83, 114, 302, 315, 320, 339, 358, 363, 366, 367, 369, 370, 378], "drill": 348, "drive": [366, 370], "driven": [339, 358, 364, 366, 370], "driver": 358, "drop": [83, 132, 226, 326, 330, 337, 369], "dropdown": [341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "drug": 344, "ds_new": 49, "dsload": 2, "dt": 49, "dtype": [17, 18, 39, 144], "dual": 246, "due": [107, 228, 229, 231, 232, 321, 358, 360, 365, 368, 369], "duplic": [3, 5, 321, 342, 350], "durat": [49, 349, 350], "dure": [206, 224, 227, 285, 286, 289, 290, 322, 332, 334, 335, 336, 368, 373], "dx": [322, 328, 366, 368], "dx_": [330, 336], "dx_k": [354, 355, 359], "dynam": [339, 358], "e": [25, 46, 115, 144, 145, 164, 170, 171, 173, 192, 209, 210, 211, 212, 213, 214, 215, 216, 219, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 299, 306, 322, 323, 326, 327, 328, 330, 331, 332, 333, 334, 336, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 373], "e377c2": 52, "e_": 365, "eaaa4301": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "each": [30, 57, 58, 71, 72, 112, 114, 124, 125, 126, 144, 164, 181, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 248, 254, 255, 258, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 302, 306, 317, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 341, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 374], "earli": [23, 132, 272, 273, 274, 275, 285, 286, 289, 290, 326, 365, 369], "early_stop_thr": [272, 273], "early_stopping_round": [9, 38, 39, 40, 53, 61, 62, 63], "eas": [339, 355], "easi": [361, 364, 370], "easier": [321, 323, 327, 345, 355], "easili": [323, 327, 372], "ebm": 318, "ecod": 323, "econom": 368, "eda": [315, 325, 340, 342], "eda_1d": [3, 325], "eda_2d": [3, 325, 343], "eda_3d": [3, 325, 344], "eda_correl": [3, 52, 325], "eda_multivari": 345, "eda_pca": [3, 325], "eda_umap": 3, "edg": [212, 214, 215, 216, 220, 228, 229, 231, 232, 366, 368], "edit": 352, "educ": [2, 3, 5, 7, 13, 19, 23, 25, 63, 67, 71, 79, 83, 302, 370], "education_1": 5, "education_2": 5, "education_3": 5, "education_missing_nan": 5, "eeoc": 364, "effect": [23, 24, 49, 57, 58, 221, 225, 234, 235, 236, 237, 239, 243, 245, 246, 247, 254, 272, 273, 285, 286, 323, 327, 329, 334, 335, 336, 338, 339, 347, 356, 357, 360, 364, 365, 366, 367, 368, 369, 370], "effect_import": [57, 58, 225, 366], "effici": [247, 323, 327, 339, 341, 349, 352, 355, 364, 367, 373], "effort": [339, 349], "eigenvalu": [323, 327], "eight": 323, "eighth": [323, 327], "either": [53, 120, 126, 144, 239, 245, 330, 337, 374], "elabor": 323, "elasticnet": [271, 357, 374], "electr": [323, 327], "eleg": 360, "element": [213, 228, 229, 230, 231, 232, 332, 335], "elimin": [132, 323, 326], "ell": 358, "ellipsi": 52, "embed": 224, "emerg": 360, "emil": 334, "emphas": [323, 327], "empir": [209, 219, 322, 363, 367, 368, 369], "emploi": [319, 322, 354, 358, 368], "employ": [364, 368], "empti": [306, 326, 367, 370], "enabl": [321, 324, 339, 341, 343, 344, 345, 346, 348, 349, 352, 355, 358, 359, 362, 366], "enable_categor": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "encapsul": [210, 211, 246, 253], "encod": [5, 121, 124, 125, 126, 225, 271, 282, 341, 352, 354, 355, 356, 357, 358, 359, 364, 370], "encode_categor": [5, 54, 321, 364, 370], "encount": [107, 306], "end": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 106, 322, 323, 328, 330, 331, 332, 333, 334, 336, 338, 354, 356, 359, 360, 364, 365, 367, 368], "end_tim": 49, "enforc": [354, 359, 364], "engin": [1, 11, 112, 126, 144, 164, 321, 323, 327, 366, 367, 368, 369, 378], "enhanc": [121, 323, 326, 339, 356, 357, 358, 360, 361, 365, 366, 367, 368, 369, 370], "enough": [354, 360], "ensembl": [12, 27, 48, 118, 246, 248, 254, 278, 279, 283, 284, 287, 288, 323, 327, 330, 331, 333, 338, 356, 359, 365, 366, 367, 368, 369, 378], "ensur": [124, 125, 132, 180, 211, 299, 321, 324, 339, 350, 354, 355, 357, 358, 359, 361, 364, 365, 366, 367, 368, 369, 370], "enter": [52, 324, 347, 349, 350], "enterpris": 339, "entir": [123, 234, 238, 299, 318, 319, 331, 336, 338, 354, 358, 359], "entropi": [366, 368], "envelop": [330, 332, 336], "environ": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93, 304, 305, 368], "epoch": [17, 18, 23, 24, 272, 273, 285, 286, 289, 290], "epsilon": 368, "equal": [112, 124, 209, 212, 214, 215, 216, 220, 228, 229, 230, 231, 232, 235, 237, 272, 273, 322, 328, 331, 338, 360, 364, 368, 370], "equat": [358, 360], "equit": 364, "equiv": 360, "equival": [285, 286, 326, 355, 360, 369], "eric": 326, "erion": [331, 338], "errat": 365, "error": [119, 210, 225, 226, 238, 323, 327, 346, 348, 355, 358, 363, 364, 366, 368, 369], "especi": [319, 364, 369], "essenti": [335, 355, 364, 366, 369], "establish": [357, 364, 368], "estim": [23, 24, 29, 31, 32, 33, 49, 212, 213, 216, 228, 229, 230, 231, 232, 238, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 319, 322, 323, 330, 331, 332, 336, 338, 366, 367, 375], "estimators_": [274, 275], "eta": [54, 300, 359, 360], "eta_k": 355, "etc": [136, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 285, 286, 289, 290, 332, 351], "ethic": 364, "ethnic": 364, "euclidean": [125, 323, 327, 358], "european": 323, "eval_metr": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "evalu": [8, 54, 57, 58, 61, 62, 71, 72, 114, 133, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 224, 226, 227, 229, 231, 232, 247, 276, 298, 299, 300, 301, 317, 318, 322, 326, 328, 330, 331, 335, 337, 338, 339, 346, 350, 351, 354, 358, 359, 363, 365, 367, 368, 369, 370, 373], "even": [323, 354, 358, 359, 360], "event": 52, "evolv": [339, 368], "exact": 300, "exactli": [331, 338], "examin": [225, 334, 366, 367, 368, 370], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 152, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 298, 299, 300, 301, 302, 316, 320, 329, 344, 353, 362, 363, 378], "exce": 235, "exceed": 133, "excel": 355, "except": [29, 338], "exchang": 367, "exclud": 332, "execut": [54, 106, 265, 298, 321, 339, 350, 364, 370, 378], "exhaust": 350, "exhibit": [228, 323, 360, 368], "exist": [107, 116, 135, 136, 139, 140, 142, 143, 153, 158, 165, 167, 304, 334, 352, 354, 355, 357, 361, 364], "exp": [49, 54, 318, 324, 334, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 358], "expand": 304, "expect": [231, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 319, 323, 327, 331, 338, 346, 348, 365, 367], "expens": [367, 373], "experi": [49, 259, 321, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 368, 373], "experiment": [42, 47, 48, 299, 349, 378], "experiment_id": 49, "experiment_nam": 49, "expert": [12, 27, 48, 246, 247, 248, 254, 256, 258, 283, 284, 315, 339, 353, 365, 367, 368, 378], "expert_id": 258, "expert_nam": 358, "expert_no": 358, "expertis": 358, "explain": [88, 93, 119, 124, 225, 234, 235, 236, 237, 238, 239, 251, 315, 323, 325, 327, 332, 334, 335, 336, 337, 338, 339, 340, 354, 355, 360, 365, 366, 378], "explain_al": 86, "explain_hstatist": 86, "explain_lim": [32, 33, 87], "explain_pdp": [31, 86], "explain_pfi": [32, 33, 53, 86], "explain_shap": [31, 87], "explainableboostingclassifi": 318, "explan": [0, 32, 33, 234, 235, 236, 238, 239, 248, 250, 251, 252, 253, 254, 257, 316, 323, 329, 330, 332, 333, 334, 336, 337, 339, 355, 359, 372], "explicit": [212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 304], "explicitli": [324, 331, 338, 354, 359, 366], "explor": [0, 122, 298, 319, 339, 342, 343, 344, 351, 352, 373], "exploratori": [1, 11, 120, 121, 122, 123, 124, 125, 181, 315, 320, 339, 342, 345, 370, 378], "exponenti": 350, "export": 240, "expos": [368, 369], "express": [272, 273, 360, 366], "extend": [356, 357, 367], "extens": [339, 349], "extent": [322, 328, 364, 368], "extern": [93, 264, 339, 366, 368, 374], "extra": [0, 1, 11, 106, 107, 135, 138, 139, 140, 142, 158, 171, 319, 352, 378], "extract": [25, 30, 198, 245, 302, 360, 366, 368, 370, 372], "extrapol": [330, 332, 336, 355], "extrem": [235, 237, 360, 368], "f": [49, 322, 328, 330, 332, 333, 334, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370], "f1": [13, 15, 19, 21, 23, 25, 34, 43, 45, 46, 49, 207, 210, 211, 212, 213, 214, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 298, 299, 300, 301, 350, 366, 368, 373], "f9f633c8bacb": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "f_": [354, 355, 356, 358, 359, 365, 367, 368], "f_0": 355, "f_i": 359, "f_j": [323, 354, 355, 356, 358, 359], "f_k": [355, 358, 365], "f_m": [355, 356], "f_n": 368, "fabrizio": 323, "face": [226, 358, 369], "facilit": 358, "factor": [29, 117, 327, 331, 338, 354, 358, 359, 364, 367, 368], "fail": [106, 366, 369], "fair": [84, 93, 208, 212, 213, 215, 216, 219, 220, 221, 229, 315, 316, 339, 363, 370, 378], "fairli": [331, 338, 364], "fall": [319, 323, 356, 358, 367], "fals": [9, 14, 21, 22, 23, 24, 34, 35, 38, 39, 40, 44, 49, 52, 53, 54, 61, 62, 63, 64, 67, 68, 71, 72, 79, 80, 83, 87, 117, 119, 146, 160, 180, 187, 195, 199, 201, 206, 223, 233, 265, 272, 273, 274, 275, 276, 277, 285, 286, 289, 290, 306, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 359, 360, 364, 366], "familiar": [357, 361], "fanova": [242, 243, 339], "fanovaar": 366, "far": [323, 327, 330, 336, 368], "fast": [323, 326, 354], "faster": [224, 330, 332, 336], "favor": 364, "favorable_label": [83, 208, 213, 219, 220, 221, 229, 364], "fbedk": 132, "fde725": 52, "feasibl": 365, "featur": [0, 1, 2, 3, 9, 10, 11, 16, 23, 24, 29, 30, 31, 32, 33, 34, 35, 40, 44, 49, 52, 54, 62, 63, 64, 71, 72, 75, 76, 79, 80, 83, 112, 114, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 144, 155, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 180, 181, 193, 194, 208, 211, 212, 213, 214, 215, 216, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 315, 317, 319, 320, 321, 322, 323, 325, 327, 329, 331, 332, 333, 334, 335, 336, 345, 346, 347, 348, 352, 355, 356, 357, 361, 366, 367, 368, 369, 370, 372, 375, 378], "feature1": [63, 67, 68, 71, 79, 80, 220], "feature2": [63, 67, 68, 71, 79, 80, 220], "feature_color": [3, 121, 122], "feature_exclud": 324, "feature_i": [3, 121, 122], "feature_import": [57, 58, 224, 225, 251, 253, 366], "feature_nam": [2, 4, 13, 14, 23, 24, 30, 31, 32, 33, 49, 112, 114, 164, 212, 213, 214, 215, 216, 220, 228, 229, 230, 231, 232, 235, 251, 253, 271, 272, 273, 282, 285, 286, 302, 321, 354, 357, 360, 364, 375], "feature_name1": [272, 273], "feature_name2": [272, 273], "feature_names_categor": [5, 321], "feature_names_mix": [5, 321], "feature_names_numer": [5, 321, 355, 356, 358, 359, 365, 366, 367, 368, 369], "feature_names_out": [112, 126, 144, 164], "feature_select_corr": [4, 326], "feature_select_rcit": [4, 326], "feature_select_xgbpfi": [4, 326], "feature_typ": [2, 9, 13, 14, 21, 22, 38, 39, 40, 49, 53, 61, 62, 63, 166, 271, 272, 273, 282, 324, 355, 356, 357, 358, 359, 365, 366, 367, 368, 369], "feature_x": [3, 121, 122], "feature_z": [3, 122], "features_nam": 364, "featurescol": 30, "feedforward": [354, 360], "fei": [323, 327], "femal": 83, "fetch": [306, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "fetch_california_h": [31, 33, 375], "few": [330, 336], "fewer": [117, 118, 228, 229, 231, 232, 272, 273, 323, 364], "ff7f0e": 52, "fidx": [25, 112, 126, 144, 164], "field": [349, 350], "fig": [306, 317], "fignam": 52, "figsiz": [3, 38, 40, 43, 44, 45, 46, 52, 54, 63, 64, 68, 79, 80, 83, 306], "figur": [52, 63, 64, 306, 318, 360, 370], "file": [53, 149, 152, 153, 154, 163, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306, 352, 378], "file_nam": [53, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306], "filenam": [106, 306, 352], "fill": 352, "fill_valu": 144, "filter": [147, 153, 201, 202, 212, 213, 214, 215, 216, 217, 229, 245, 260, 261, 306], "final": [225, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 323, 326, 327, 330, 331, 332, 334, 337, 338, 341, 352, 355, 358, 360], "financ": 358, "find": [360, 367, 368, 373], "fine": [23, 24, 272, 273, 274, 275, 277, 285, 286, 339, 349, 354, 364], "finer": 234, "finit": [326, 367], "finland": 323, "first": [7, 114, 117, 119, 132, 211, 225, 272, 273, 285, 286, 299, 300, 301, 317, 319, 324, 326, 327, 330, 332, 333, 334, 335, 336, 337, 338, 342, 352, 355, 360, 367, 369, 372], "fit": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 118, 126, 144, 222, 225, 228, 229, 231, 232, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 323, 326, 327, 330, 331, 332, 333, 334, 335, 336, 338, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 375], "fit_conform": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "fit_funct": [268, 291], "fit_intercept": [14, 44], "five": [331, 338], "fix": [322, 328, 330, 331, 332, 338, 350], "fl": [323, 327], "flag": [365, 367], "flagdefault": [2, 3, 5, 13, 15, 17, 19, 21, 23, 25, 57, 63, 83, 317, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370], "flat": 201, "flatten": [29, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "flexibl": [216, 276, 277, 324, 337, 339, 354, 355, 356, 359, 375], "float": [63, 71, 72, 75, 83, 117, 118, 119, 131, 132, 133, 144, 172, 180, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 235, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 306, 360], "float32": [17, 18], "fluctuat": [355, 369], "fn": 366, "fn_": 364, "fname": 106, "focu": [334, 358], "focus": [123, 318, 325, 364, 366, 368, 370], "fold": [283, 284, 298, 299, 300, 301, 366, 373], "folder": [304, 306], "follow": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 107, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 225, 228, 229, 230, 231, 232, 246, 248, 250, 251, 252, 253, 254, 255, 298, 299, 300, 301, 302, 317, 318, 319, 321, 322, 323, 324, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 354, 355, 356, 358, 360, 364, 365, 366, 367, 368, 369, 370, 372, 375], "fontfamili": 52, "fontsiz": 52, "fontstyl": 52, "fontweight": 52, "footag": 355, "foral": 364, "forc": 373, "forest": [118, 224, 320, 330, 337, 339, 355, 363, 366, 368, 373], "form": [135, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 354, 359, 360], "formal": 364, "format": [53, 112, 126, 136, 142, 143, 173, 201, 208, 212, 213, 214, 215, 216, 219, 221, 228, 229, 230, 231, 232, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 324, 372, 375], "former": [318, 331, 338], "formul": [353, 354, 356, 359, 367], "formula": [322, 323, 327, 330, 331, 332, 338, 364], "forward": [112, 132, 326], "found": [106, 317, 318, 319, 322, 323, 324, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 377], "foundat": 339, "four": [321, 325, 332, 346, 348, 352, 374], "fourier": [132, 326], "fourth": [122, 325], "fp": 366, "fp_": 364, "fpr": [364, 366], "frac": [322, 328, 330, 331, 332, 333, 336, 338, 354, 355, 358, 359, 364, 365, 366, 368], "fraction": [210, 226, 369], "frame": [29, 201], "framework": [225, 321, 339, 355, 356, 357, 358, 361, 366, 367, 370, 375], "free": 367, "frequenc": [212, 214, 215, 216, 220, 228, 229, 230, 231, 232, 321, 322, 323, 324, 343, 369], "frequent": [0, 144, 341], "friedman": [8, 329], "friedman2001": [330, 336], "friedman2008": [330, 333], "friendli": 339, "from": [3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93, 107, 114, 116, 123, 125, 149, 150, 151, 152, 154, 175, 209, 220, 226, 235, 245, 246, 254, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 306, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 370, 373, 374, 375, 378], "from_cod": 321, "fsc": 367, "full": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 119, 124, 133, 318, 322, 323, 324, 332, 333, 334, 335, 336, 338, 339, 343, 344, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 368, 369, 370], "fulli": [330, 337, 365], "func": [8, 52, 54, 117, 118, 119, 265, 306], "func_input": [54, 265], "function": [30, 52, 106, 112, 114, 117, 118, 119, 120, 122, 124, 125, 126, 133, 135, 136, 139, 140, 142, 143, 144, 164, 175, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 225, 229, 231, 232, 234, 235, 237, 245, 248, 250, 251, 253, 254, 255, 265, 266, 268, 269, 272, 273, 274, 276, 278, 280, 282, 283, 285, 287, 289, 290, 291, 292, 294, 296, 306, 317, 318, 319, 321, 322, 323, 324, 325, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 353, 356, 357, 360, 365, 367, 368, 369], "further": [57, 58, 209, 210, 219, 222, 224, 226, 227, 302, 323, 326, 364, 367, 368, 370, 372], "furthermor": [319, 358], "futur": [337, 342, 343, 344, 345, 350, 372], "g": [25, 46, 115, 144, 145, 164, 170, 171, 173, 192, 209, 210, 211, 212, 213, 214, 215, 216, 219, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 299, 306, 322, 323, 326, 328, 331, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 357, 358, 359, 364, 365, 366, 367, 368, 369, 373], "g_": 358, "g_n": 368, "gabl": [323, 327], "gabriel": [331, 338], "gain": [366, 368], "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 89, 378], "galleries_data": 378, "galleries_dev": 378, "galleries_util": 378, "galleries_v": 378, "gam": [272, 273, 354, 355], "gam_sample_s": [272, 273], "game": [331, 338], "gami": [272, 273, 315, 339, 353, 355, 356, 358, 359], "gaminet": [12, 27, 48, 246, 248, 254, 273, 354, 378], "gaminetclassifi": 272, "gamma": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63, 326, 354, 359], "gamma_m": 355, "gap": [9, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 34, 35, 38, 43, 44, 45, 46, 61, 62, 67, 68, 207, 214, 215, 218, 230, 317, 319, 347, 351, 363], "gate": [283, 284], "gaussian": [117, 211, 224, 227, 299, 323, 326, 327, 346, 348], "gbdt": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 353, 366, 369], "gbdt2": 49, "gblt": 353, "gbm": [209, 231], "gender": [54, 83, 208, 219, 318, 321, 328, 342, 352, 364], "gener": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 89, 93, 112, 118, 120, 121, 122, 125, 126, 132, 180, 181, 211, 218, 222, 224, 234, 236, 237, 239, 246, 249, 250, 251, 252, 253, 257, 272, 273, 277, 283, 284, 289, 290, 298, 299, 300, 301, 306, 315, 317, 319, 322, 325, 330, 332, 333, 334, 335, 336, 337, 338, 339, 343, 353, 354, 355, 358, 360, 361, 363, 364, 366, 367, 368, 369], "georg": 323, "geq": 367, "get": [2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 110, 111, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 153, 155, 157, 162, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 231, 232, 233, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 321, 332, 333, 335, 338, 366, 370], "get_data": 10, "get_data_info": [0, 63, 64, 67, 68, 71, 72, 79, 80, 83, 365, 369, 370], "get_data_list": [10, 135, 136, 139, 140, 142, 143], "get_figure_nam": [53, 63, 64, 306, 370], "get_mlflow_hom": [0, 49], "get_model": [49, 373, 374], "get_param": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "get_x_y_data": 136, "getorcr": 30, "gg": 365, "gini": 15, "giorgo": 326, "github": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "give": [133, 234, 238, 272, 273, 304, 323, 327, 337], "given": [135, 136, 139, 140, 142, 143, 151, 251, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 301, 306, 323, 326, 327, 328, 331, 335, 338, 355, 358, 360, 366, 367, 373], "glm": [13, 14, 44, 285, 286, 318, 319, 335, 339, 353, 360], "glmclassifi": 318, "glmt": 356, "glmtree": [274, 275, 285, 286], "global": [17, 18, 85, 88, 89, 125, 234, 235, 237, 238, 248, 249, 252, 315, 329, 336, 353, 360, 365, 367, 368, 378], "global_fi": 360, "global_ic": 334, "glossari": [300, 301], "gmm": 117, "go": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "goal": [323, 326, 331, 338, 364, 369, 373], "goldstein": [323, 334], "goldstein2012": 323, "good": [302, 355, 360, 366, 367], "googl": 93, "gp": 299, "gpsampler": 299, "gradient": [23, 24, 122, 215, 222, 267, 270, 271, 273, 274, 275, 277, 279, 281, 284, 286, 288, 289, 290, 291, 293, 295, 297, 315, 330, 343, 344, 353, 354, 358, 359, 360, 366, 369, 372], "gradientboostingclassifi": 278, "gradientboostingregressor": 279, "gradual": [354, 359, 365, 368], "grain": [274, 275, 277, 364], "grant": 364, "granular": [112, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 234, 364], "graphic": [52, 245, 334, 339], "greater": [235, 272, 273, 317, 323, 324, 326, 334], "greatest": [338, 368], "greatli": [331, 335, 338], "greedi": 330, "grid": [42, 46, 47, 48, 52, 221, 234, 235, 237, 246, 247, 274, 275, 276, 298, 299, 332, 333, 334, 336, 350, 378], "grid_resolut": [86, 234, 235, 237], "grid_siz": [246, 247, 332, 333, 334, 336], "gridsampl": 299, "gridsearchcv": 373, "ground": [266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 375], "group": [79, 80, 83, 115, 173, 208, 210, 213, 219, 220, 221, 226, 227, 229, 251, 258, 318, 335, 360, 363, 366, 368], "group_config": [83, 208, 213, 219, 220, 221, 229, 364], "group_nam": [208, 213, 219, 220, 221, 229], "grow": 365, "grow_polici": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "gt": [356, 359, 367], "guarante": [331, 338, 355, 364, 367], "guestrin": 331, "guid": [341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 360, 365, 370], "guidelin": 364, "guo": 326, "h": [235, 323, 329, 332, 339, 365], "h2o": [28, 36, 48, 375, 378], "h2o_model": 29, "h2ofram": 29, "h2ogradientboostingestim": 29, "h_": [330, 333, 354], "h_j": 354, "h_m": [355, 356], "ha": [5, 225, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306, 317, 319, 322, 323, 326, 327, 328, 332, 335, 338, 354, 356, 359, 360, 369], "had": 338, "hand": [330, 332], "handl": [52, 122, 124, 125, 144, 273, 306, 323, 326, 327, 354, 355, 356, 365, 367, 368, 370], "hao": 326, "happen": 375, "hard": [75, 76, 210, 226, 346, 348, 359, 360, 368], "harder": 235, "hardest": 368, "hardwar": [272, 273], "harmon": 366, "hat": [317, 326, 330, 332, 333, 334, 336, 354, 358, 359, 364, 365, 366, 367], "have": [46, 107, 123, 152, 170, 171, 173, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 319, 323, 324, 325, 327, 330, 331, 332, 333, 334, 336, 337, 338, 354, 355, 356, 357, 359, 360, 364, 365, 368, 369, 372, 375], "hbo": 323, "he": [323, 327], "he2003": [323, 327], "head": [5, 321], "header": 341, "healthcar": [358, 364], "heatmap": [52, 123, 132, 234, 237, 246, 247, 320, 332, 336, 345, 354], "heavi": 332, "heavili": 365, "height": [38, 40, 52, 306], "help": [218, 220, 221, 223, 226, 227, 230, 326, 330, 331, 336, 338, 345, 346, 357, 360, 364, 365, 366, 368, 369, 370], "helsinki": 323, "henc": [317, 360], "here": [5, 317, 319, 322, 323, 326, 328, 330, 332, 334, 336, 337, 358, 372], "here_": 330, "hered": [272, 273, 354], "heterogen": [358, 367, 368, 370], "heteroscedast": [223, 366, 367], "hidden": [272, 273, 289, 290, 360, 373], "hidden_layer_s": [289, 290, 360, 375], "hidedelai": 52, "hierarch": [361, 366], "high": [235, 317, 319, 322, 323, 326, 327, 330, 332, 333, 334, 335, 336, 337, 338, 339, 342, 345, 346, 352, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370], "higher": [117, 118, 133, 208, 219, 220, 221, 225, 234, 238, 246, 318, 319, 322, 323, 327, 336, 354, 355, 356, 357, 358, 359, 365, 367], "highest": [324, 332, 338, 355], "highli": [330, 332, 336, 338, 355], "highlight": [257, 323, 345, 346, 358, 361, 365, 366, 368, 370], "hire": 364, "hist": 300, "histogram": [3, 117, 118, 119, 120, 325, 342, 366, 367, 368], "histori": [289, 290, 298, 299, 300, 301], "hoc": [0, 85, 89, 326, 337, 339, 347], "hold": [294, 295, 322, 354, 359, 366], "holder": [354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "holdout": 365, "holidai": [4, 8, 9, 10, 52, 64, 86, 337], "home": [303, 304, 305, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "homogen": [323, 358], "homoscedast": 366, "honest": 367, "horizont": [52, 114, 131, 133, 235, 236, 238, 239, 245, 248, 254, 255], "hot": [126, 225, 271, 282, 321, 354, 355, 356, 357, 358, 359], "hour": 332, "hourli": [319, 332, 333, 334, 335, 336, 337, 338], "hous": [31, 32, 33, 372, 374], "hover": [343, 344, 350], "hoverlink": 52, "how": [49, 53, 54, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 216, 221, 224, 225, 226, 227, 234, 235, 237, 246, 317, 319, 322, 323, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 346, 347, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 372], "howev": [318, 319, 323, 327, 330, 331, 334, 335, 336, 337, 338, 360, 364], "hpo": [43, 44, 45, 373], "hr": [4, 8, 9, 10, 14, 18, 20, 22, 24, 26, 52, 58, 64, 68, 72, 76, 80, 86, 319, 332, 334, 335, 336, 337, 338, 354, 355, 356, 358, 359, 365, 366, 367, 368, 369], "hstack": 40, "hstat": 329, "html": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 52, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 240, 306], "htmlstr": [38, 40], "http": 29, "httpx": 107, "hu": 323, "hua": [323, 327], "hub": [315, 340], "hum": [4, 8, 9, 10, 24, 52, 64, 68, 72, 80, 86, 335, 338, 358, 369], "hyperparamet": [0, 93, 225, 268, 291, 298, 299, 300, 301, 339, 349, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 373], "hypothesi": 326, "i": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 106, 107, 112, 117, 118, 119, 120, 121, 122, 123, 124, 126, 136, 139, 140, 142, 144, 146, 153, 160, 164, 180, 199, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 247, 248, 250, 254, 255, 256, 258, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375], "i_1": [354, 355, 359], "i_j": 338, "i_t": [354, 355, 359], "i_u": [354, 355, 359], "icdm": [323, 327], "icon": 349, "id": [29, 49, 52, 163, 204, 217, 224, 256, 261, 262, 276, 302, 361, 366, 367, 368, 369], "id_": 52, "idea": [323, 367, 368], "ideal": [343, 344, 369], "ident": [322, 360], "identif": [214, 339, 363, 366], "identifi": [114, 117, 118, 119, 132, 210, 214, 218, 221, 223, 226, 227, 228, 230, 231, 232, 266, 267, 269, 270, 271, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 297, 323, 326, 327, 334, 338, 339, 345, 346, 348, 354, 355, 356, 357, 358, 359, 360, 363, 364, 366, 367, 368, 369, 370], "idx": [40, 328], "ieee": [323, 327], "ignor": [52, 223, 226, 331, 338], "ij": 358, "ik": 358, "ikj": 358, "illustr": [237, 251, 317, 319, 331, 332, 334, 336, 338, 369, 372], "iloc": [5, 10, 83], "im": 355, "imag": [53, 306, 343, 344], "imbal": 366, "imbalanc": 366, "imlbook": 338, "impact": [83, 208, 219, 220, 221, 318, 322, 323, 327, 330, 332, 338, 354, 355, 356, 357, 358, 359, 363, 365, 366, 368, 373], "implement": [118, 119, 132, 264, 289, 290, 299, 323, 326, 327, 331, 334, 335, 355, 357, 360, 361, 369, 373], "impli": [318, 360, 365], "import": [2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 23, 24, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 87, 107, 131, 132, 133, 224, 225, 236, 237, 238, 246, 248, 250, 251, 253, 254, 255, 272, 273, 317, 318, 319, 320, 321, 323, 329, 333, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 361, 364, 365, 366, 367, 368, 369, 373, 374, 375], "import_fil": 29, "importance_typ": [9, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "impos": [272, 273], "improv": [223, 238, 274, 275, 285, 286, 289, 290, 323, 339, 351, 355, 356, 358, 364, 365, 366, 367, 368, 369, 370], "impur": [274, 275, 276, 277], "imput": [5, 144, 321, 341, 352], "impute_miss": [5, 54, 321], "inaccur": [330, 336], "inact": [165, 167, 364, 370], "inactive_featur": 54, "inch": 306, "includ": [25, 26, 111, 120, 121, 123, 124, 125, 133, 136, 144, 148, 176, 180, 182, 208, 209, 222, 224, 226, 227, 228, 229, 230, 236, 250, 252, 253, 271, 272, 273, 282, 299, 300, 317, 319, 321, 322, 323, 324, 326, 330, 336, 341, 342, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 364, 365, 369, 373], "include_interaction_list": [272, 273], "incom": [354, 355, 359, 364, 368, 369], "inconsist": [330, 336, 368], "incorpor": [354, 367, 368, 369], "incorrect": [366, 370], "increas": [118, 123, 133, 234, 238, 246, 272, 273, 285, 286, 319, 322, 323, 325, 326, 330, 331, 334, 337, 338, 346, 354, 355, 359, 360, 364, 368, 369], "increasingli": 226, "increment": 369, "independ": [132, 234, 235, 320, 323, 327, 330, 331, 336, 338, 339, 355, 365], "index": [8, 30, 112, 114, 126, 136, 144, 164, 236, 239, 254, 255, 256, 257, 272, 273, 322, 328, 330, 332, 335, 338, 339, 347, 355, 359, 360, 366, 368], "indic": [5, 114, 123, 144, 146, 177, 178, 180, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 238, 246, 251, 258, 276, 283, 284, 298, 299, 300, 301, 317, 318, 321, 322, 323, 325, 327, 328, 330, 331, 332, 334, 336, 337, 338, 349, 350, 354, 355, 356, 357, 358, 359, 360, 364, 366, 367, 368, 369, 375], "indicatorimput": 144, "indicators": 52, "individu": [234, 235, 272, 273, 323, 330, 331, 332, 335, 337, 338, 343, 347, 357, 369, 374], "inf": [3, 5, 25, 321], "infer": [175, 272, 273, 326], "infinit": [3, 5, 321, 342], "influenc": [234, 246, 318, 330, 337, 354, 355, 356, 357, 358, 359], "info": 153, "inform": [25, 132, 164, 208, 212, 214, 215, 216, 219, 224, 226, 227, 229, 239, 302, 317, 323, 324, 331, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "infrastructur": 339, "infti": 368, "inher": [0, 210, 226, 339, 347, 354, 355, 356, 358, 359, 360, 364, 367, 369, 372], "init": [29, 272, 273], "initi": [15, 23, 24, 29, 30, 272, 273, 274, 275, 276, 277, 285, 286, 321, 326, 340, 349, 355, 356, 358, 359], "inject": 369, "innat": [123, 325], "input": [29, 52, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 265, 266, 268, 269, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 296, 298, 299, 300, 301, 306, 317, 319, 330, 331, 332, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 375], "inputcol": 30, "inquiri": 321, "insight": [209, 232, 255, 323, 337, 339, 342, 347, 348, 351, 356, 358, 365, 366, 368, 370], "insignific": 326, "inspect": 352, "inspir": [331, 338, 373], "instal": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "instanc": [53, 144, 221, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 321, 323, 324, 327, 331, 334, 335, 338, 367, 368, 369], "instead": [119, 136, 317, 319, 324, 330, 331, 332, 333, 334, 336, 338, 366], "institut": 326, "insuffici": [364, 366], "insur": 364, "int": [30, 45, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 144, 153, 164, 172, 177, 178, 180, 202, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 246, 247, 251, 254, 255, 256, 257, 267, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 285, 286, 288, 289, 290, 291, 293, 295, 297, 298, 299, 300, 301, 306, 322, 328, 330, 336, 354, 355, 359, 368], "int_": [366, 368], "integ": [124, 125, 126, 144, 289, 290, 298, 299, 300, 301], "integr": [323, 330, 335, 336, 339, 341, 358, 360, 362, 373, 375], "intend": 366, "interact": [64, 71, 72, 122, 228, 229, 230, 231, 232, 234, 235, 237, 242, 246, 247, 272, 273, 323, 325, 330, 331, 332, 333, 334, 336, 338, 339, 343, 344, 345, 351, 354, 356, 358, 359, 365, 366, 367, 368, 369, 370], "interact_num": [272, 273], "interaction_constraint": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "interaction_list_": [272, 273], "interaction_val_loss_": [272, 273], "intercept": [335, 354, 355, 359, 360], "interest": [245, 317, 319, 323, 330, 332, 334, 335, 336, 348], "interfac": [339, 342, 355, 357, 361], "intern": [112, 158, 277, 285, 286, 323, 327, 331], "interpret": [0, 93, 235, 236, 274, 275, 276, 277, 285, 286, 315, 323, 326, 329, 330, 332, 339, 347, 364, 367, 369, 370, 372, 374], "interpret_cluster_analysi": 258, "interpret_coef": [13, 14, 357], "interpret_effect": [13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 49, 57, 58, 354, 355, 356, 358, 359, 366], "interpret_ei": [21, 22, 25, 26, 248, 354, 355, 356, 358, 359], "interpret_fi": [13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 49, 354, 355, 356, 357, 358, 359, 360], "interpret_fi_loc": 254, "interpret_glm_coef": 245, "interpret_global_tre": [15, 16, 361], "interpret_llm_pc": [17, 18, 360], "interpret_llm_profil": [17, 18, 360], "interpret_llm_summari": [17, 18, 360], "interpret_local_ei": [19, 20, 21, 22, 25, 26, 354, 355, 356, 358, 359], "interpret_local_fi": [13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 57, 58, 354, 355, 356, 357, 358, 359, 366], "interpret_local_linear_fi": [13, 14, 17, 18, 357], "interpret_local_moe_weight": [21, 22, 358], "interpret_local_tre": [15, 16, 361], "interpret_moe_cluster_analysi": [21, 22, 358], "interpret_tree_glob": 249, "interpret_tree_loc": 257, "interv": [37, 41, 48, 52, 209, 210, 215, 222, 224, 231, 234, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 319, 330, 332, 346, 348, 351, 355, 367, 369, 370, 378], "interven": [331, 338], "intervent": [331, 338, 366], "intric": 318, "introduc": [321, 323, 331, 338, 356, 360, 364, 367, 368, 369, 374], "introduct": [315, 363], "intuit": [339, 342], "invalid": [306, 350], "invers": [52, 112, 357, 369], "investig": [364, 366, 367, 368, 369], "involv": [131, 317, 319, 321, 323, 324, 330, 337, 364, 367, 368, 373], "ioanni": 326, "ionescu": 323, "ipynb": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "ipython": [38, 40, 107], "ipyvuetifi": 107, "ipywidget": 107, "iri": 321, "irisdata": 321, "irreduc": 365, "isol": [118, 320, 339, 370], "isolationforest": [323, 327], "isoton": [38, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296], "issu": [107, 116, 218, 226, 272, 273, 319, 351, 354, 355, 356, 357, 359, 360, 363, 365, 366, 368], "itali": [323, 327], "item": [52, 164, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 224, 226, 227, 229, 258], "itemgap": 52, "itemheight": 52, "items": 52, "itemwidth": 52, "iter": [23, 24, 132, 133, 272, 273, 274, 275, 283, 284, 298, 299, 300, 301, 323, 330, 337, 350, 355, 356, 358, 360, 365, 373], "its": [107, 181, 195, 216, 221, 224, 226, 232, 237, 238, 272, 273, 319, 323, 327, 331, 332, 333, 334, 335, 336, 337, 338, 342, 347, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 374], "itself": [294, 295, 335], "j": [123, 322, 323, 325, 326, 330, 331, 332, 333, 338, 354, 355, 356, 358, 359, 365], "j_1": [354, 355, 359], "j_i": 359, "j_v": [354, 355, 359], "janz": 326, "jerom": [330, 333], "jingyu": 330, "jiuyong": 326, "jk": [330, 333, 354, 355, 356, 359], "job": [298, 299, 300, 301], "joblib": [298, 299, 300, 301], "john": 323, "joint": [235, 336], "jona": 326, "journal": [326, 330, 334], "jpg": 306, "jsd": 368, "jth": 323, "judgment": 335, "jupyt": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 339], "just": [330, 331, 332, 338], "justin": 334, "k": [75, 76, 114, 117, 208, 219, 283, 284, 322, 326, 327, 328, 330, 332, 333, 337, 354, 355, 356, 358, 359, 365, 366, 368, 369], "k_": [330, 332], "kai": [323, 327], "kanoksri": [323, 327], "kapeln": 334, "keep": [330, 332, 337, 360], "kei": [0, 49, 52, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 298, 299, 300, 301, 306, 315, 321, 323, 330, 336, 346, 348, 349, 350, 357, 358, 364, 365, 366, 367, 368, 369, 373], "kendal": [3, 123, 325], "kept": 369, "kernel": [239, 323, 326, 331, 338, 373], "keyword": [149, 266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 296, 297, 317, 319, 323, 332, 333, 335, 336, 338, 360], "kfold": [299, 300, 301], "ki": 323, "kj": [330, 333], "kl": [322, 328], "kmean": [8, 117, 368], "kmedoid": 224, "knn": 323, "know": [315, 331, 338], "knowledg": [323, 331, 354, 355, 357, 359, 361, 365, 367, 368, 369], "known": [323, 355, 360, 366], "kolmogorov": [114, 322, 328], "ks_2samp": [322, 328], "kui": 326, "kullback": [322, 328], "kun": 326, "kwarg": [149, 266, 267, 268, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 296, 297], "kyuseok": 323, "l": [322, 328, 330, 337, 354, 355, 356, 358, 359, 360, 365], "l1": [274, 275, 276, 277, 289, 290, 357, 360, 365, 369], "l1_ratio": [14, 44, 357, 374], "l1_reg": [289, 290, 360], "l2": [225, 357, 365, 369], "l2001": [330, 337], "l_": [354, 355, 359, 365, 367, 368, 369], "lab": 366, "label": [30, 40, 52, 114, 208, 213, 219, 220, 221, 223, 224, 229, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 302, 317, 343, 344, 365, 366], "labelcol": 30, "lack": [360, 367, 370], "lambda": [354, 365, 367, 368, 369], "lambda_": [323, 327], "lambda_1": [365, 369], "lambda_2": [365, 369], "lambda_i": 326, "land": 366, "larg": [79, 80, 117, 120, 122, 123, 125, 227, 272, 273, 323, 326, 327, 331, 335, 338, 345, 354, 355, 359, 360, 365, 366], "larger": [122, 125, 208, 213, 219, 220, 221, 223, 226, 229, 238, 272, 273, 319, 323, 327, 330, 332, 333, 334, 336, 337, 338, 354, 359, 360, 365], "largest": [222, 317, 319, 323, 335, 360, 364, 369], "lasso": [331, 335, 365, 369], "last": [272, 273, 317, 322, 326, 330, 332, 341, 372], "latent": 368, "later": 374, "latest": [2, 49, 153], "latter": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 331, 338], "layer": [272, 273, 289, 290, 358, 360, 373], "ldot": [331, 338, 360], "lead": [235, 319, 322, 330, 332, 335, 354, 355, 358, 359, 364, 367, 368, 369], "leaderboard": [315, 349, 350, 351, 362], "leaf": [274, 275, 276, 277, 331, 338, 354, 355, 356, 359, 366], "leaf_estimators_": 276, "learn": [107, 126, 237, 268, 272, 273, 285, 286, 291, 292, 293, 316, 318, 319, 322, 323, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 347, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 368, 370, 372, 373, 375], "learner": [355, 356], "learning_r": [9, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 272, 273, 274, 275, 289, 290, 349, 360, 373], "least": [354, 360, 367, 368], "leav": [276, 277, 323, 356], "lee": [331, 338], "left": [52, 318, 323, 326, 330, 331, 333, 338, 355, 358, 359, 364, 366], "legal": 364, "legend": [52, 317], "legendhoverlink": 52, "legitim": 364, "leibler": [322, 328], "len": [34, 35, 365], "length": [52, 170, 171, 266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 296, 297, 323, 327, 360], "leq": [354, 355, 356, 359, 365], "less": [208, 219, 220, 319, 324, 330, 331, 332, 334, 336, 338, 358, 365, 367, 368, 369], "let": [330, 332, 334, 360, 369], "letter": [323, 327], "level": [79, 208, 211, 215, 219, 222, 224, 227, 229, 232, 277, 318, 323, 326, 338, 342, 346, 348, 354, 355, 356, 357, 358, 359, 364, 365, 367, 368, 369], "leverag": [321, 323, 339, 357, 361, 364, 366, 368], "lgbm": [31, 32, 33, 43, 45, 46, 49, 54, 57, 58, 63, 86, 87, 272, 273], "lgbm2": 49, "lgbm_model": [355, 364, 365, 366, 367, 368, 369, 370], "lgbmclassifi": [32, 49, 280], "lgbmclassifierifittedlgbmclassifi": 32, "lgbmregressor": [31, 33, 209, 281], "lgbmregressorifittedlgbmregressor": [31, 33], "lgmb": [49, 54], "li": [323, 326], "li2021": 323, "librari": [52, 122, 299, 306, 339, 355], "licenc": [5, 9, 10, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 54, 83], "lie": 368, "lifecycl": 339, "light": 332, "lighter": 332, "lightgbm": [31, 32, 33, 49, 107, 280, 281, 349, 350, 355, 364, 365, 366, 367, 368, 369, 370], "lightweight": [266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 287, 288, 296, 297], "like": [122, 173, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 318, 323, 327, 332, 339, 350, 352, 360, 364, 366, 367, 368, 369], "lime": [32, 33, 107, 236, 329, 339, 347], "limit": [164, 319, 330, 332, 336, 360, 364, 367], "limit_b": [2, 3, 5, 25, 63, 370], "limit_bal_special_sv1": 5, "limits_": 354, "lin": 326, "lindsai": 326, "lindsayl2000": 326, "line": [106, 107, 121, 133, 210, 212, 213, 214, 215, 216, 220, 221, 222, 226, 234, 237, 246, 247, 319, 323, 332, 334, 336, 343, 350, 354, 360], "linear": [12, 27, 48, 123, 225, 245, 246, 248, 250, 254, 255, 274, 275, 277, 315, 325, 326, 330, 331, 335, 336, 338, 350, 353, 358, 359, 366, 369, 373, 378], "linear_model": [271, 282, 357], "linear_tre": [23, 24, 54], "linearshap": 338, "lineartre": 369, "lineplot": 40, "ling": [323, 326, 327], "link": [52, 318, 322, 323, 324, 348, 352, 357, 359, 364, 370], "link_id": 52, "linspac": 373, "lipschitz": 365, "list": [5, 49, 63, 64, 110, 111, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 144, 147, 164, 165, 167, 200, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 245, 247, 248, 251, 253, 254, 255, 260, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 306, 319, 321, 324, 333, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373], "list_registered_data": [2, 321], "list_registered_model": 49, "liu": [323, 326, 327], "liu2008": [323, 327], "liwu": [323, 327], "ll": 338, "llm": [250, 251, 252, 253, 353], "llm_pc": 250, "llm_profil": 251, "llm_summari": 252, "llm_violin": 253, "ln": [322, 328], "load": [0, 3, 4, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 124, 149, 150, 151, 152, 153, 154, 217, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 320, 324, 325, 341, 346, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "load_breast_canc": [30, 32], "load_builtin_data": [5, 10, 83], "load_csv": 321, "load_data": 54, "load_datafram": [5, 9, 10, 29, 30, 31, 32, 33, 34, 35, 83, 321, 375], "load_iri": 321, "load_registered_data": [2, 9, 34, 35], "load_registered_model": 49, "load_spark": 321, "loaded_model": 49, "loan": [364, 369], "local": [23, 24, 32, 33, 57, 58, 85, 88, 89, 117, 125, 234, 236, 239, 250, 251, 252, 254, 255, 257, 315, 327, 329, 336, 338, 339, 353, 366, 367, 368, 369, 370, 378], "local_fi": 360, "local_linear_fi": 360, "local_model_zoo": 49, "localdataset": 263, "localgap": 365, "localmodelzoo": 49, "locat": [348, 352, 370], "lock": [341, 350], "log": [272, 273, 323, 330, 332, 333, 334, 336, 354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369], "log1p": [5, 14, 16, 18, 20, 22, 24, 26, 40, 44, 58, 62, 64, 68, 72, 76, 80, 86, 164, 321, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369], "logarithm": [164, 350], "logbas": 52, "logic": [347, 354, 355, 359], "logist": [12, 27, 38, 39, 48, 53, 61, 63, 245, 246, 248, 254, 255, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 357, 378], "logisticregress": [30, 282, 357], "logit": [266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296], "logit_predict": [266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296], "logloss": [13, 15, 19, 21, 23, 25, 34, 38, 43, 45, 46, 49, 54, 61, 207, 210, 211, 212, 213, 214, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 298, 299, 300, 301, 317, 350, 373], "logloss_rank": [43, 45, 46], "long": [345, 360], "longer": [322, 323, 327], "look": 366, "lose": 364, "loss": [17, 18, 23, 24, 231, 272, 273, 274, 275, 289, 290, 330, 337, 355, 358, 364, 365, 366, 367, 368, 369], "loss_threshold": [272, 273], "lot": [331, 338], "low": [40, 93, 228, 315, 338, 339, 364, 365, 367, 368], "lower": [83, 208, 213, 219, 220, 221, 229, 235, 237, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 318, 319, 323, 334, 355, 364, 366, 367, 368], "lower_inclus": [83, 208, 213, 219, 220, 221, 229, 364], "lowest": [319, 358], "lpb": 326, "lr": [30, 49], "lr_model": 30, "lt": [354, 355, 356, 359], "lundberg": [331, 338], "lundberg2017": [331, 338], "lundberg2018": [331, 338], "m": [322, 331, 338, 354, 355, 356, 359, 366, 368], "machin": [107, 126, 237, 316, 318, 319, 322, 323, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 347, 349, 350, 361, 363, 364, 365, 366, 370, 372, 373, 375], "made": [322, 355], "mae": [9, 14, 16, 20, 22, 24, 26, 31, 35, 44, 58, 62, 64, 68, 80, 207, 210, 211, 212, 213, 214, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 298, 299, 300, 301, 319, 349, 350, 351, 365, 366, 367, 368, 369, 373], "magnitud": [211, 216, 224, 227, 354, 355, 356, 357, 359, 360, 365, 368, 369], "mahalanobi": [119, 323, 327, 368], "mai": [25, 26, 107, 175, 214, 228, 229, 231, 232, 234, 300, 321, 322, 323, 326, 328, 330, 331, 332, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 375], "main": [3, 6, 8, 9, 10, 23, 24, 34, 35, 52, 57, 58, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 139, 140, 142, 143, 144, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 273, 298, 299, 300, 301, 328, 332, 339, 342, 343, 344, 345, 352, 354, 356, 358, 359, 367, 369], "main_effect_val_loss_": [272, 273], "mainli": 335, "maintain": [226, 274, 275, 339, 354, 355, 357, 358, 359, 361, 365, 368, 370], "major": 323, "make": [237, 249, 272, 273, 291, 321, 323, 327, 331, 334, 335, 337, 345, 347, 351, 354, 355, 358, 359, 360, 361, 364, 366, 367, 369, 370], "make_classif": 34, "make_friedman1": [8, 35], "male": 83, "manag": [0, 49, 321, 339, 362], "manhattan": 125, "mani": [125, 323, 330, 332, 345, 354, 355, 358, 359, 364, 368], "manifest": 322, "manifold": 345, "manner": [180, 362], "manual": [5, 112, 135, 136, 139, 140, 142, 143, 175, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 324], "map": [54, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 366, 369], "map_rang": 52, "marco": 331, "margin": [52, 237, 272, 273, 328, 331, 335, 338, 351, 354, 355, 356, 357, 358, 359, 360, 367, 368], "mark": [222, 319, 323, 360], "market": 358, "markov": 326, "marku": 323, "marriag": [2, 3, 5, 25, 63, 83, 364, 370], "marriage_1": 2, "marriage_2": 2, "match": 346, "math": 355, "mathbb": [330, 336, 354, 358, 359, 360, 367, 368], "mathbf": [354, 355, 359], "mathcal": [358, 369], "mathemat": [326, 353, 367], "mathrm": [322, 326, 330, 334, 336, 356, 359], "matplotlib": 39, "matric": [123, 366], "matrix": [61, 123, 218, 224, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 323, 327, 332, 355, 360, 366, 368], "max": [3, 5, 52, 164, 272, 273, 277, 300, 323, 324, 350, 351, 354, 359, 360, 364, 366, 367, 369], "max_": [52, 368], "max_bin": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63, 112, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232], "max_cat_threshold": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "max_cat_to_onehot": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "max_delta_step": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "max_depth": [9, 15, 16, 21, 22, 23, 24, 25, 26, 34, 35, 38, 39, 40, 43, 45, 46, 49, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 209, 215, 222, 225, 231, 267, 270, 271, 273, 274, 275, 276, 277, 279, 281, 284, 286, 288, 290, 291, 293, 295, 297, 300, 349, 352, 355, 356, 358, 361, 364, 365, 366, 367, 368, 369, 370, 374], "max_epoch": [17, 18, 23, 24, 272, 273, 289, 290, 354], "max_featur": [15, 16], "max_it": [14, 44], "max_iter_per_epoch": [272, 273], "max_leaf_nod": [15, 16], "max_leav": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "maxim": 373, "maximum": [107, 112, 121, 122, 209, 212, 213, 214, 215, 216, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 238, 247, 267, 270, 271, 273, 274, 275, 276, 277, 279, 281, 284, 285, 286, 288, 289, 290, 291, 293, 295, 297, 321, 322, 323, 324, 327, 328, 342, 355, 358, 368, 369, 370], "maxopac": 52, "mb": [11, 27, 36, 41, 47, 50, 55, 59, 65, 69, 73, 77, 81, 84, 88, 90, 378], "mbox": 360, "mc": [38, 40], "md": [323, 327], "mean": [3, 5, 17, 18, 75, 76, 117, 126, 144, 164, 208, 213, 219, 220, 221, 229, 235, 236, 252, 254, 255, 272, 273, 299, 300, 301, 321, 323, 324, 327, 330, 331, 332, 335, 337, 338, 341, 342, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369], "mean_fit_tim": [45, 46], "meaning": [323, 366, 370], "measur": [123, 181, 216, 227, 234, 235, 236, 238, 239, 322, 323, 325, 326, 327, 328, 330, 333, 337, 363, 364, 367, 369, 370], "mechan": 366, "medhousev": [354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 375], "median": [3, 5, 144, 321, 323, 324, 341, 342, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "medic": [354, 359], "medinc": [31, 209, 210, 211, 219, 222, 224, 226, 227], "medium": 364, "medoid": 368, "meet": [339, 347, 366], "mei": [323, 327], "mem": [11, 27, 36, 41, 47, 50, 55, 59, 65, 69, 73, 77, 81, 84, 88, 90, 378], "member": [331, 338], "membership": [208, 213, 219, 220, 221, 222, 229, 358, 366], "memori": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "mention": 323, "menu": 339, "mere": [331, 338], "met": 323, "meta": [153, 324], "metadata": 352, "metaheurist": 373, "metamodel": [210, 226], "method": [3, 5, 8, 14, 16, 17, 18, 19, 20, 22, 24, 26, 38, 40, 44, 52, 54, 58, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 132, 144, 152, 164, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 246, 249, 252, 257, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 316, 317, 319, 320, 321, 322, 325, 326, 328, 330, 331, 332, 336, 337, 338, 339, 341, 343, 345, 346, 347, 348, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 370, 373, 374], "methodologi": 330, "metric": [9, 34, 35, 38, 43, 44, 45, 46, 54, 57, 58, 60, 63, 64, 65, 67, 68, 71, 72, 75, 76, 79, 80, 83, 89, 114, 125, 131, 181, 199, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 298, 299, 300, 301, 302, 316, 317, 319, 322, 323, 328, 330, 337, 339, 342, 346, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 373, 378], "metric_nam": [207, 218], "mi": 366, "miami": [323, 327], "mid": 326, "might": [323, 330, 332, 365, 366, 368], "mild": 365, "mimic": 368, "min": [3, 5, 52, 125, 164, 272, 273, 300, 324, 350], "min_": 52, "min_child_sampl": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "min_child_weight": [9, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "min_impurity_decreas": [15, 16, 23, 24, 274, 275, 276, 277], "min_samples_leaf": [15, 16, 23, 24, 274, 275, 276, 277], "min_samples_split": [15, 16], "min_split_gain": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "min_weight_fraction_leaf": [15, 16], "mind": 332, "mine": [323, 327, 331], "ming": [323, 327], "minim": [339, 349, 355, 358, 364, 365, 367], "minimum": [107, 131, 133, 274, 275, 276, 277, 321, 323, 324, 327, 342, 370], "minkowski": 125, "minmax": [5, 17, 18, 19, 20, 24, 54, 71, 75, 164, 321, 341, 360], "minmax_rang": 164, "minor": [364, 369], "minu": [124, 126], "minut": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "miscellan": 107, "misclassif": 366, "miscoverag": [209, 222, 224, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 367], "misdiagnos": 364, "mislead": [364, 366], "misleadingli": 235, "mismatch": 322, "mispredict": 368, "miss": [3, 5, 9, 21, 22, 38, 39, 40, 53, 61, 62, 63, 144, 324, 331, 338, 339, 341, 342, 366], "missing": [331, 338], "missing_valu": 144, "misspecif": 366, "misspecifi": 367, "mitig": [220, 221, 323, 326, 339, 363, 366, 368, 370], "mix": [3, 5, 129, 181, 321, 326, 342], "mixtur": [12, 27, 48, 117, 246, 247, 248, 254, 256, 258, 283, 284, 315, 323, 326, 327, 339, 353, 365, 367, 368, 378], "mj": [354, 355, 359], "mk": [354, 355, 359], "ml": [30, 352], "mlflow": [0, 107, 116, 147, 160, 163, 204, 262, 321, 339, 342], "mlflow_hom": [49, 304, 305], "mlflowexcept": 116, "mlop": 339, "mlp_sample_s": [272, 273], "mlpregressor": 375, "mnth": [4, 8, 9, 10, 64, 68, 324, 355, 356, 358, 359, 365, 366, 367, 368, 369], "mocatboostclassifi": [25, 49, 355], "mocatboostregressor": [26, 355], "mochart": [38, 40, 52, 107, 122, 306], "mocharts_plot": [38, 40], "moclassifi": [0, 32, 375], "mode": [63, 64, 71, 72, 79, 80, 83, 228, 229, 230, 231, 232, 272, 273, 317], "modecisiontreeclassifi": [15, 49, 361], "modecisiontreeclassifierifittedmodecisiontreeclassifi": 15, "modecisiontreeregressor": [16, 361, 374], "modecisiontreeregressorifittedmodecisiontreeregressor": 16, "model": [0, 1, 2, 11, 27, 36, 42, 52, 53, 54, 66, 70, 74, 75, 76, 78, 79, 82, 84, 86, 87, 93, 117, 118, 126, 133, 136, 139, 140, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 306, 315, 317, 318, 319, 321, 322, 323, 326, 327, 330, 332, 333, 334, 336, 337, 339, 340, 341, 352, 354, 356, 361, 363, 364, 370, 376, 378], "model1": [61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 370], "model2": [61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 370], "model_calibr": 38, "model_compar": [317, 319, 346], "model_dtre": 361, "model_explain": [332, 333, 334, 335, 336, 337, 338], "model_fairness_compar": 318, "model_gami": 354, "model_gbdt": 355, "model_gblt": 356, "model_glm": 357, "model_glmt": 356, "model_lgbm": [364, 365, 366, 367, 368, 369, 370], "model_mo": 358, "model_nam": [207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "model_neut": 359, "model_relunet": 360, "model_select": [31, 32, 33, 34, 35, 375], "model_test": 348, "model_train": 349, "model_tun": [43, 44, 45, 46, 54, 350], "model_tune_grid_search": 298, "model_tune_optuna": 299, "model_tune_pso": 300, "model_tune_random_search": 301, "model_xgb": [364, 365, 366, 367, 368, 369, 370], "modelbas": 264, "modelnn": [23, 24], "modeltun": 362, "modeltunegridsearch": [0, 43, 373], "modeltuneoptuna": [0, 46], "modeltunepso": [0, 45, 373], "modeltunerandomsearch": [0, 44, 373], "modelzoo": [48, 50, 362, 374, 378], "modern": 358, "modeva": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 85, 86, 87, 89, 107, 321, 325, 326, 327, 328, 330, 331, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 363, 373, 374], "modeva_arbitrary_classifi": [29, 30], "modeva_arbitrary_regressor": 375, "modeva_mlflow": [49, 304, 305], "modeva_sklearn_classifi": 49, "modeva_sklearn_regressor": 375, "modif": [367, 368, 369], "modifi": [175, 324, 349, 364], "modul": [2, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 272, 273, 289, 290, 315, 323, 324, 375], "moe": [12, 27, 48, 246, 247, 248, 254, 256, 258, 283, 284, 315, 339, 353, 365, 378], "moe_classif": 358, "moe_regress": 358, "moelasticnet": [14, 44, 357, 374], "moelasticnetifittedmoelasticnet": [14, 44], "mogaminetclassifi": [19, 49, 354], "mogaminetclassifierifittedmogaminetclassifi": 19, "mogaminetregressor": [20, 354], "mogaminetregressorifittedmogaminetregressor": 20, "moglmtreeboost": [23, 24], "moglmtreeboostclassifi": [23, 49, 285, 356], "moglmtreeboostclassifierifittedmoglmtreeboostclassifi": 23, "moglmtreeboostclassifiermoglmtreeboostclassifi": 23, "moglmtreeboostregressor": [24, 285, 286, 356], "moglmtreeboostregressorifittedmoglmtreeboostregressor": 24, "moglmtreeboostregressormoglmtreeboostregressor": 24, "moglmtreeclassifi": 356, "moglmtreeregressor": 356, "mogradientboostingclassifi": [25, 49], "mogradientboostingregressor": 26, "molgbmclassifi": [23, 25, 43, 45, 46, 49, 54, 57, 61, 63, 67, 71, 75, 79, 83, 87, 208, 355, 364, 370], "molgbmclassifierifittedmolgbmclassifi": [23, 25, 43, 45, 46, 57, 61, 63, 67, 71, 75, 79, 83, 87], "molgbmregressor": [24, 26, 58, 62, 64, 68, 72, 76, 80, 86, 210, 211, 355, 365, 366, 367, 368, 369], "molgbmregressorifittedmolgbmregressor": [24, 26, 58, 62, 64, 68, 72, 76, 80, 86], "mologisticregress": [13, 49, 357], "moment": [326, 331, 338], "momentchi2": 107, "momoeclassifi": [21, 358], "momoeclassifierifittedmomoeclassifi": 21, "momoeregressor": [22, 358], "momoeregressorifittedmomoeregressor": 22, "moneuraltre": [23, 24], "moneuraltreeclassifi": [23, 49, 359], "moneuraltreeclassifierifittedmoneuraltreeclassifi": 23, "moneuraltreeregressor": [24, 359], "moneuraltreeregressorifittedmoneuraltreeregressor": 24, "monitor": [339, 349, 352, 364, 365, 369], "mono_decreasing_list": [24, 272, 273, 285, 286, 354, 359], "mono_increasing_list": [23, 24, 272, 273, 285, 286, 354, 359], "mono_sample_s": [23, 24, 272, 273, 285, 286, 354, 359], "monoton": [123, 272, 273, 285, 286, 325, 330, 336, 353, 360, 365, 369], "monotone_constraint": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "monotonic_cst": [15, 16], "monotonically_increasing_id": 30, "mont": 299, "morandomforestclassifi": [25, 49], "morandomforestregressor": [26, 374], "more": [123, 125, 133, 144, 224, 238, 300, 301, 317, 318, 319, 322, 323, 325, 328, 330, 334, 336, 337, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 373], "moregressor": [0, 33, 375], "moreludnn": [12, 27, 48, 250, 251, 252, 253, 255, 360, 378], "moreludnnclassifi": [17, 49, 354, 360], "moreludnnclassifierifittedmoreludnnclassifi": 17, "moreludnnregressor": [18, 360], "moreludnnregressorifittedmoreludnnregressor": 18, "moreov": [326, 330, 331, 332, 338], "mortgag": [321, 342, 343, 344, 346, 348], "moscoredclassifi": [0, 34, 375], "moscoredregressor": [0, 9, 35, 375], "mosklearnclassifi": [0, 375], "mosklearnregressor": [0, 31, 375], "most": [144, 221, 226, 228, 229, 230, 231, 232, 272, 273, 274, 275, 326, 331, 334, 335, 337, 338, 341, 342, 345, 348, 360, 361, 366, 368, 369], "most_frequ": [5, 144, 321], "motiv": 358, "mous": 344, "mousemov": 52, "move": [330, 332], "moxgbclassifi": [25, 34, 38, 39, 49, 53, 61, 63, 67, 71, 75, 79, 83, 355, 364, 370], "moxgbclassifierifittedmoxgbclassifi": [38, 39, 53, 61, 63], "moxgbregressor": [9, 22, 26, 35, 40, 62, 64, 68, 72, 76, 80, 355, 365, 366, 367, 368, 369, 374], "moxgbregressorifittedmoxgbregressor": [9, 40, 62], "mse": [9, 14, 16, 18, 20, 22, 24, 26, 31, 35, 44, 62, 76, 80, 207, 210, 211, 212, 213, 214, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 252, 298, 299, 300, 301, 319, 330, 337, 346, 348, 349, 350, 351, 366, 368, 369, 373, 374], "mse_rank": 44, "mu": [354, 355, 356, 357, 359], "mu_": 365, "mu_j": 358, "much": [225, 235, 319, 331, 332, 334, 338], "mulit": [210, 212, 214, 215, 216], "multi": [289, 290], "multi_strategi": [9, 21, 22, 38, 39, 40, 53, 61, 62, 63], "multidimension": 344, "multipl": [49, 53, 71, 72, 75, 76, 79, 80, 83, 93, 144, 207, 208, 209, 210, 211, 212, 214, 215, 228, 229, 230, 231, 232, 245, 283, 284, 298, 306, 316, 321, 323, 325, 327, 338, 345, 346, 350, 355, 358, 366, 367, 369, 374], "multipli": [224, 227, 323, 327, 331, 369], "multivari": [315, 323, 325, 330, 336, 339, 340], "must": [114, 119, 144, 209, 215, 218, 222, 235, 237, 246, 299, 301, 324, 332, 335, 355], "mutual": [323, 327, 355], "mz": [49, 373, 374], "mz_new": 49, "n": [90, 322, 326, 330, 332, 333, 336, 338, 358, 365, 366, 367, 368, 369], "n_": [330, 332, 360, 364], "n_bar": [25, 26, 53, 86, 306, 358], "n_cluster": [57, 58, 75, 76, 117, 210, 224, 226, 283, 284, 300, 358, 366, 367, 368, 369], "n_compon": [3, 124, 125, 345], "n_epoch_no_chang": [23, 24, 274, 275, 289, 290], "n_estim": [9, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 45, 46, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 118, 212, 213, 214, 215, 216, 225, 228, 229, 230, 231, 232, 274, 275, 300, 350, 352, 355, 356, 358, 359, 364, 365, 366, 367, 368, 369, 370, 373], "n_featur": [34, 35, 125, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "n_feature_search": [23, 24, 274, 275, 276, 277], "n_features_in_": [274, 275], "n_forward": 132, "n_forward_phas": 326, "n_fourier": 132, "n_fourier2": 132, "n_i": 368, "n_interactions_": [272, 273], "n_iter": [44, 45, 299, 300, 301, 373], "n_j": 368, "n_job": [9, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 272, 273, 289, 290, 298, 299, 300, 301], "n_l": 360, "n_miss": 324, "n_neighbor": [125, 345], "n_other": 324, "n_output": [266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 292, 293, 296, 297], "n_particl": [45, 300], "n_quantil": 164, "n_redund": 34, "n_repeat": [86, 133, 211, 216, 224, 227, 232, 238, 337], "n_sampl": [34, 35, 125, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "n_screen_grid": [23, 24, 274, 275, 276, 277], "n_split_grid": [23, 24, 274, 275, 276, 277], "n_uniqu": 324, "na": [5, 144], "nabla": 365, "name": [2, 3, 5, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 147, 148, 153, 160, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 180, 181, 195, 197, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 317, 319, 321, 322, 323, 324, 326, 327, 332, 334, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375], "name1": [7, 114, 302], "name2": [7, 114, 302], "name_": 52, "name_list": 306, "namegap": 52, "nameloc": 52, "nametextstyl": 52, "nan": [3, 5, 9, 17, 18, 21, 22, 34, 38, 39, 40, 53, 61, 62, 63, 67, 68, 71, 72, 79, 80, 83, 86, 144, 364], "natur": [164, 354, 358, 359, 366], "nbsp": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "nbviewer": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "ndarrai": [114, 135, 136, 139, 140, 142, 143, 150, 151, 170, 171, 173, 177, 178, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "ne": [354, 355, 359], "nearest": 327, "necessari": [251, 345, 358], "need": [5, 46, 315, 319, 323, 324, 326, 331, 332, 334, 336, 338, 339, 358, 366, 368, 372, 375], "neg": [123, 325, 330, 332, 337, 354, 355, 357, 358, 359, 364, 365, 366], "neglig": [335, 365], "neighbor": [125, 327, 345], "neighborhood": 365, "neither": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "nest": [207, 208, 214, 215, 216, 219, 220, 221, 224, 226, 227, 229, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "net": [272, 273, 315, 339, 353, 356, 358, 359], "net_": [272, 273, 285, 286, 289, 290], "network": [272, 273, 283, 284, 285, 286, 289, 290, 315, 339, 353, 354, 359, 369, 373], "neural": [285, 286, 289, 290, 315, 323, 331, 339, 353, 354, 369, 373], "neural_network": 375, "neuraltre": [49, 359], "neuron": [289, 290, 360], "new": [117, 118, 119, 123, 126, 164, 173, 195, 285, 286, 322, 323, 325, 327, 342, 352, 355, 365, 367, 368, 369, 375], "new_d": [9, 375], "next": [9, 330, 337, 341, 350], "nich": 368, "nicola": 323, "nighttim": 336, "nllm": 251, "nm": 322, "nn": [289, 290], "nn_batch_siz": [23, 24, 285, 286], "nn_epoch_no_chang": [285, 286], "nn_lr": [23, 24, 285, 286], "nn_max_epoch": [23, 24, 49, 285, 286], "nn_n_epoch_no_chang": [23, 24, 285, 286], "nn_temperatur": [23, 24, 49, 285, 286], "nnede": [354, 359], "no_progress": 29, "node": [249, 257, 274, 275, 276, 277, 323, 327, 331, 338, 354, 355, 358, 359, 360, 361, 369], "noic": 339, "nois": [35, 79, 211, 224, 227, 317, 319, 331, 335, 339, 346, 348, 355, 365, 370], "noise_level": [54, 79, 80, 211, 216, 224, 227, 232, 302, 369], "noisi": [365, 366, 367, 369, 370], "nomin": 367, "non": [8, 71, 72, 117, 118, 119, 123, 132, 216, 227, 232, 274, 275, 323, 325, 326, 336, 342, 356, 358, 366, 369, 375], "nonconform": 222, "none": [3, 4, 6, 9, 14, 15, 16, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 44, 45, 46, 52, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 112, 114, 120, 121, 122, 123, 124, 125, 126, 135, 139, 140, 142, 144, 147, 153, 160, 164, 165, 167, 180, 195, 199, 201, 202, 204, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 245, 247, 251, 253, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 365, 369], "nonlinear": [123, 325, 345, 360, 365, 366, 367, 368], "noplot_3_h2o": [29, 36, 378], "noplot_4_spark": [30, 36, 378], "nor": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "norm": 364, "normal": [52, 117, 118, 119, 133, 211, 216, 224, 225, 227, 232, 272, 273, 317, 319, 323, 326, 327, 331, 338, 341, 346, 348, 354, 355, 356, 357, 358, 359, 360, 366], "notabl": 318, "note": [5, 9, 34, 35, 52, 53, 112, 212, 213, 214, 215, 216, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 234, 236, 237, 239, 271, 272, 273, 282, 299, 300, 306, 317, 318, 319, 322, 323, 326, 327, 328, 330, 331, 332, 335, 336, 337, 338], "notebook": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 107, 339], "notic": 323, "notin": 367, "novel": [323, 327, 359], "now": [335, 372], "np": [7, 9, 30, 31, 32, 33, 34, 35, 39, 40, 114, 135, 136, 139, 140, 142, 143, 144, 170, 171, 173, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 373, 375], "nu": 356, "nuanc": [356, 358, 364], "null": 326, "nullabl": 144, "num": 351, "num_leav": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "num_parallel_tre": [9, 38, 39, 40, 53, 61, 62, 63], "number": [112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 132, 133, 155, 164, 180, 210, 211, 212, 213, 214, 215, 216, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 247, 251, 258, 272, 273, 274, 275, 276, 277, 283, 284, 285, 286, 289, 290, 298, 299, 300, 301, 306, 317, 319, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 341, 342, 345, 355, 358, 360, 365, 366, 367, 368, 369, 370, 373], "numer": [2, 3, 5, 19, 20, 23, 25, 26, 63, 64, 111, 112, 120, 121, 122, 123, 124, 125, 126, 130, 131, 144, 164, 166, 181, 208, 212, 213, 214, 215, 216, 219, 220, 221, 224, 227, 228, 229, 230, 231, 232, 239, 246, 247, 271, 272, 273, 282, 300, 317, 319, 325, 326, 330, 332, 336, 341, 343, 344, 345, 350, 352, 354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369, 370], "numpi": [7, 9, 30, 31, 32, 33, 34, 35, 39, 40, 107, 150, 151, 177, 178, 268, 291, 372, 375], "o7": 106, "object": [9, 23, 24, 25, 26, 34, 35, 38, 39, 40, 43, 45, 46, 52, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 164, 180, 181, 195, 196, 198, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 349, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 375], "observ": [318, 322, 323, 327, 334, 336, 366, 368], "obtain": [71, 224, 319, 323, 324, 326, 327, 330, 331, 336, 338, 358, 360], "occur": [144, 235, 364, 366, 369], "occurr": 144, "ocsvm": 323, "od_marginal_outlier_distribut": 323, "od_score_distribut": 323, "od_tsne_comparison": 323, "odd": [330, 332, 333, 334, 336, 364], "off": [239, 299, 300, 301, 331, 338, 360], "offer": [318, 319, 324, 325, 330, 331, 332, 338, 339, 342, 349, 354, 355, 366, 367, 368, 370], "often": [354, 355, 358, 359, 360, 364, 366, 370, 373, 375], "old": [107, 195], "omega": [354, 358], "onc": [112, 332, 349, 360], "one": [68, 71, 72, 114, 123, 124, 126, 144, 164, 207, 208, 209, 213, 218, 219, 220, 221, 224, 225, 228, 229, 230, 231, 232, 234, 237, 246, 271, 282, 298, 299, 300, 301, 306, 319, 321, 322, 323, 324, 325, 326, 327, 330, 332, 334, 336, 337, 343, 349, 354, 358, 360, 364, 368], "oneclasssvm": 323, "onehot": [5, 124, 125, 126, 321, 341], "ones": [132, 326, 330, 336, 354, 355], "ongo": 339, "onli": [52, 112, 114, 119, 121, 122, 127, 128, 129, 130, 134, 135, 139, 140, 142, 144, 155, 193, 194, 209, 211, 212, 213, 214, 215, 216, 222, 224, 228, 229, 230, 231, 232, 242, 243, 245, 267, 270, 271, 272, 273, 275, 277, 279, 281, 284, 286, 288, 290, 291, 293, 295, 297, 299, 300, 306, 319, 323, 327, 330, 335, 337, 338, 341, 342, 343, 346, 347, 352, 354, 355, 358, 360, 364, 366, 367, 372, 373, 375], "ood": 368, "oot": [83, 115, 173], "op": 107, "open": [321, 341, 349], "oper": [1, 11, 124, 285, 286, 315, 320, 339, 354, 359, 360, 361, 364, 366, 378], "operatio": 321, "opportun": 364, "optim": [42, 47, 48, 106, 272, 273, 285, 286, 289, 290, 298, 299, 300, 301, 323, 339, 345, 349, 350, 355, 358, 361, 362, 365, 370, 378], "optimisticbia": 365, "option": [9, 34, 35, 38, 40, 52, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 180, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 265, 268, 271, 282, 289, 290, 291, 292, 293, 298, 299, 300, 301, 306, 317, 322, 323, 324, 325, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 373], "optuna": [42, 47, 48, 299, 378], "order": [52, 121, 123, 199, 323, 325, 326, 332, 343, 355, 360], "order_bi": [49, 199, 374], "ordin": [54, 123, 124, 125, 126, 321, 325, 341, 364, 370], "org": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "orient": 52, "origin": [9, 222, 254, 255, 272, 273, 323, 327, 328, 330, 331, 332, 335, 336, 337, 338, 341, 365, 367, 368, 369], "original_scal": 336, "orthogon": [354, 355, 359], "other": [123, 125, 135, 136, 139, 140, 142, 143, 219, 225, 226, 229, 237, 318, 322, 323, 324, 325, 327, 330, 331, 332, 334, 336, 338, 339, 342, 343, 349, 356, 362, 364, 367, 368, 374], "otherwis": [146, 187, 234, 235, 237, 239, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 317, 319, 323, 324, 331, 332, 333, 334, 335, 336, 337, 338, 352, 365, 367, 368], "our": [331, 334, 335, 337, 367], "out": [115, 173, 220, 237, 258, 272, 273, 367, 368], "outcom": [213, 237, 323, 346, 364, 366, 369], "outer": [75, 76, 210, 226, 346, 348, 368], "outlier": [0, 1, 11, 117, 118, 119, 123, 210, 226, 315, 319, 320, 325, 339, 343, 365, 366, 370, 378], "outlier_detect": 323, "outliers_sample_index": 8, "outlin": [323, 369], "outpupt": 374, "output": [32, 33, 54, 112, 114, 126, 144, 164, 234, 235, 237, 246, 268, 272, 273, 283, 291, 323, 330, 331, 332, 334, 335, 336, 338, 339, 342, 346, 348, 354, 355, 356, 357, 358, 359, 360, 361, 367, 375], "outputcol": 30, "outsid": [224, 226, 277, 319, 330, 332, 336, 367], "over": [228, 229, 230, 231, 232, 237, 322, 324, 330, 332, 338, 343, 344, 350, 358, 367, 368], "overal": [181, 318, 321, 323, 326, 327, 332, 354, 355, 356, 357, 358, 359, 364, 365, 366, 367, 368, 369], "overcom": [330, 332], "overconfid": 367, "overfit": [9, 34, 35, 69, 93, 214, 218, 230, 315, 316, 326, 339, 351, 355, 357, 360, 363, 364, 366, 369, 378], "overflow": [52, 323], "overli": [364, 369, 370], "overrid": [2, 9, 34, 35, 160, 321, 352], "overridden": [165, 167], "overview": [323, 324], "overwrit": 112, "own": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93], "p": [40, 54, 132, 317, 322, 323, 328, 330, 331, 333, 336, 338, 364, 365, 366, 367, 368, 369], "p_": 358, "p_i": [322, 328, 366, 368], "p_j": 358, "p_k": 358, "p_valu": 326, "packag": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 107, 299, 330, 331, 332, 334, 335, 336, 338, 360], "pad": 52, "page": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 323], "pair": [71, 131, 164, 208, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 229, 235, 258, 272, 273, 325, 326, 365], "pairwis": [242, 272, 273, 325, 332, 354, 356, 358, 359, 366], "pam": [57, 58, 224, 366, 367, 369], "panda": [5, 10, 30, 31, 32, 33, 34, 35, 107, 123, 144, 150, 151, 187, 207, 212, 245, 321, 375], "panel": [324, 339, 340, 349], "paper": [123, 325, 330, 332], "paragraph": [331, 338], "parallel": [43, 44, 45, 46, 250, 272, 273, 289, 290, 298, 299, 300, 301, 350, 355], "parallel_backend": [298, 299, 300, 301], "parallelaxi": 52, "param": [43, 44, 45, 46, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "param_bound": [45, 300], "param_distribut": [44, 46, 299, 301, 373], "param_grid": [43, 44, 298], "param_spac": 373, "param_typ": [45, 300], "paramet": [106, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 187, 192, 195, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 319, 323, 324, 326, 328, 332, 334, 335, 336, 337, 338, 352, 354, 357, 358, 359, 361, 365, 373], "parametr": [132, 323, 326], "parent": [54, 265, 352, 354, 355], "pariti": 364, "parsimoni": 354, "part": [322, 358, 365], "partial": [234, 235, 237, 274, 275, 277, 326, 329, 333, 339, 347, 354, 355, 359, 365], "partial_depend": [330, 336], "particl": [42, 47, 48, 300, 358, 378], "particular": [322, 331, 335, 338, 360], "particularli": [123, 322, 323, 325, 331, 338, 354, 355, 359, 367, 368], "partit": [112, 117, 118, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 181, 210, 211, 213, 220, 221, 246, 255, 276, 277, 323, 327, 330, 334, 336, 358], "partitionto": 223, "parzen": 299, "pass": [29, 266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 297, 299, 357, 361], "past": 321, "path": [149, 152, 154, 163, 240, 257, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 304, 305, 306, 323, 327, 331, 338, 355, 356, 361], "path_or_buf": [152, 163], "patienc": [285, 286], "pattern": [123, 223, 322, 323, 325, 327, 334, 343, 345, 354, 355, 356, 358, 360, 366, 367, 368, 369, 370], "pay_1": [2, 3, 5, 7, 13, 17, 19, 21, 23, 25, 49, 57, 63, 67, 71, 75, 79, 83, 208, 302, 317, 360, 364, 370], "pay_1_special_sv2": 5, "pay_2": [2, 3, 5, 13, 19, 25, 63, 67, 71, 79], "pay_3": [2, 3, 5, 13, 25, 63, 67, 71, 79, 360], "pay_4": [2, 3, 5, 25, 63, 79, 83], "pay_5": [2, 3, 5, 25, 63, 67, 71], "pay_6": [2, 3, 5, 25, 63, 67, 71, 79, 83], "pay_amt1": [2, 3, 5, 25, 63, 83, 360, 370], "pay_amt2": [2, 3, 5, 25, 63, 71], "pay_amt3": [2, 3, 5, 25, 63], "pay_amt4": [2, 3, 5, 25, 63], "pay_amt5": [2, 3, 5, 25, 63], "pay_amt6": [2, 3, 5, 25, 63], "pc1": 345, "pc2": 345, "pc3": 345, "pca": [119, 124, 210, 226, 320, 323], "pd": [5, 30, 31, 32, 33, 34, 35, 52, 113, 144, 145, 147, 149, 159, 170, 171, 173, 192, 227, 228, 230, 237, 259, 306, 321, 330, 336, 375], "pd_": [330, 333], "pdf": 338, "pdp": [31, 237, 329, 332, 333, 334, 338, 339, 347], "peak": 332, "pearson": [3, 52, 123, 131, 325, 326], "penal": [354, 359, 360, 366], "penalti": [354, 359, 360, 365, 369], "per": [122, 133, 215, 224, 272, 273, 274, 275, 285, 286, 330, 332, 338, 347, 354, 355, 356, 357, 358, 359, 360], "percent": [367, 368, 369], "percentag": [172, 231, 258, 321, 342], "percentil": [86, 235, 237, 321], "perfect": [123, 322, 325, 364, 366], "perforamnc": [220, 221], "perform": [49, 54, 57, 58, 65, 75, 76, 79, 80, 83, 93, 112, 117, 118, 119, 124, 125, 132, 144, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 224, 225, 226, 227, 228, 230, 231, 232, 272, 273, 298, 299, 300, 301, 315, 318, 322, 323, 326, 327, 328, 330, 337, 339, 342, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 373, 374, 378], "performance_metr": [83, 220, 221, 364], "period": 334, "peripheri": 368, "perman": [326, 352], "permiss": 116, "permut": [32, 33, 133, 238, 326, 329, 339, 347], "permutation_import": [330, 337], "perorm": 368, "perp": 326, "perspect": 318, "perturb": [211, 216, 224, 227, 232, 236, 317, 319, 331, 335, 339, 346, 348, 351, 363, 365, 370], "perturb_featur": [79, 80, 211, 216, 224, 227, 232, 302, 317, 319, 369], "perturb_method": [54, 79, 80, 211, 216, 224, 227, 232, 317, 319, 369], "perturb_s": [317, 319, 369], "perturbaion": 369, "peter": 326, "pfi": [53, 238, 329, 339, 347], "pfi_result": 53, "phase": [326, 341, 369], "phenomenon": [322, 323], "phi_": [331, 338], "phi_0": [331, 338], "phi_j": [331, 338], "pi": 40, "pi_i": 367, "pi_width": [57, 58, 224, 367], "pick": [346, 347, 348, 351], "pilla": 326, "piml": [317, 319, 322, 323, 324, 332, 333, 334, 335, 336, 337, 338, 372], "pinpoint": [323, 339, 366, 367, 368, 370], "pip": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 107], "pipelin": [0, 51, 55, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 339, 375, 378], "pipeline1": [2, 54], "pisa": [323, 327], "pitkin": 334, "pizzuti": 323, "pkdd": 323, "pkl": 152, "place": [106, 338], "placehold": 144, "plai": [331, 338], "platt": [266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 323], "player": [331, 338], "pleas": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 323, 330, 332, 334, 337, 338, 354, 355, 356, 357, 358, 359, 360, 361], "plot": [3, 4, 7, 8, 15, 16, 19, 20, 21, 22, 23, 24, 31, 32, 33, 43, 44, 45, 46, 48, 49, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 87, 114, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 298, 299, 300, 301, 306, 317, 318, 319, 320, 322, 323, 329, 332, 333, 334, 335, 337, 339, 342, 343, 344, 345, 346, 347, 348, 350, 351, 356, 357, 361, 364, 365, 366, 367, 368, 369, 370], "plot_0_accuracy_table_cl": [61, 65, 378], "plot_0_accuracy_table_reg": [62, 65, 378], "plot_0_calibrate_proba": [38, 41, 378], "plot_0_data_oper": [2, 11, 378], "plot_0_fairness_cl": [83, 84, 378], "plot_0_glm_cl": [13, 27, 378], "plot_0_glm_reg": [14, 27, 378], "plot_0_global_explain": [86, 88, 378], "plot_0_grid": [43, 47, 378], "plot_0_modelzoo": [49, 50, 378], "plot_0_pred_interval_cl": [39, 41, 378], "plot_0_pred_interval_reg": [40, 41, 378], "plot_0_reliability_cl": [71, 73, 378], "plot_0_resilience_cl": [75, 77, 378], "plot_0_robustness_cl": [79, 81, 378], "plot_0_sklearn": [31, 36, 378], "plot_0_slice_overfit_cl": [67, 69, 378], "plot_0_valres_attribut": [52, 55, 378], "plot_1_arbitrary_cl": [32, 36, 378], "plot_1_arbitrary_reg": [33, 36, 378], "plot_1_dt_cl": [15, 27, 378], "plot_1_dt_reg": [16, 27, 378], "plot_1_eda": [3, 11, 378], "plot_1_local_explain": [87, 88, 378], "plot_1_random": [44, 47, 378], "plot_1_reliability_reg": [72, 73, 378], "plot_1_residual_cl": [57, 59, 378], "plot_1_residual_reg": [58, 59, 378], "plot_1_resilience_reg": [76, 77, 378], "plot_1_robustness_reg": [80, 81, 378], "plot_1_slice_accuracy_cl": [63, 65, 378], "plot_1_slice_accuracy_reg": [64, 65, 378], "plot_1_slice_overfit_reg": [68, 69, 378], "plot_1_valres_sav": [53, 55, 378], "plot_2_feature_select": [4, 11, 378], "plot_2_pipelin": [54, 55, 378], "plot_2_pso": [45, 47, 378], "plot_2_reludnn_cl": [17, 27, 378], "plot_2_reludnn_reg": [18, 27, 378], "plot_2_scored_cl": [34, 36, 378], "plot_2_scored_reg": [35, 36, 378], "plot_3_feature_engin": [5, 11, 378], "plot_3_gaminet_cl": [19, 27, 378], "plot_3_gaminet_reg": [20, 27, 378], "plot_3_optuna": [46, 47, 378], "plot_4_moe_cl": [21, 27, 378], "plot_4_moe_reg": [22, 27, 378], "plot_4_subsampl": [6, 11, 378], "plot_5_drift_test": [7, 11, 378], "plot_5_lineartree_cl": [23, 27, 378], "plot_5_lineartree_reg": [24, 27, 378], "plot_6_const_tree_cl": [25, 27, 378], "plot_6_const_tree_reg": [26, 27, 378], "plot_6_outlier_detect": [8, 11, 378], "plot_7_data_with_predict": [9, 11, 378], "plot_8_extra_data": [10, 11, 378], "plot_sav": [53, 306], "plot_typ": [3, 120], "plt": 39, "plu": [164, 375], "png": [53, 106, 306], "point": [25, 117, 122, 125, 180, 221, 223, 224, 235, 237, 239, 246, 247, 272, 273, 274, 275, 276, 277, 322, 323, 327, 330, 332, 333, 334, 335, 336, 338, 343, 344, 345, 356, 358, 360, 365, 366, 367, 369, 370], "pointer": 52, "pointsiz": 52, "polynomi": [121, 323, 343], "poor": [360, 367, 368, 370], "poorest": 368, "poorli": [366, 367, 370], "popescu": [330, 333], "popul": [114, 228, 229, 230, 231, 232, 252, 322, 328, 335, 339, 354, 355, 356, 357, 359, 360, 368, 373], "popular": [361, 370, 375], "popup": [52, 306], "posit": [14, 44, 52, 123, 149, 223, 234, 235, 237, 239, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 325, 354, 357, 358, 359, 360, 364, 366], "possess": [331, 338], "possibl": [235, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 318, 331, 338, 366, 373], "post": [0, 85, 89, 326, 337, 339, 347], "poster": 323, "potenti": [132, 214, 218, 226, 230, 323, 326, 327, 351, 364, 366, 368], "power": [122, 339, 351, 354, 355, 356, 359, 360, 364], "pp": [323, 326, 327], "pr": [208, 219, 220, 221, 229], "practic": [318, 331, 338, 360, 364, 366], "practition": [354, 359, 364, 365, 366, 370], "prasanta": 326, "pre": [212, 214, 215, 216, 220, 228, 229, 231, 232, 283, 284, 285, 286, 326, 331, 338, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 375], "prebin": 220, "precis": [52, 61, 208, 218, 219, 220, 221, 323, 327, 364, 366, 369], "precision_recal": [53, 61, 218], "precomput": [14, 44, 63, 64, 112, 212, 213, 214, 215, 216, 220, 225, 228, 229, 230, 231, 232, 321, 370], "pred": [365, 369], "pred_proba": 34, "predecessor": 355, "predefin": [114, 218, 230, 326, 350, 373], "predict": [1, 11, 29, 30, 33, 37, 41, 48, 49, 60, 79, 80, 83, 89, 136, 139, 140, 168, 169, 183, 188, 207, 208, 209, 210, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 234, 235, 236, 237, 238, 239, 246, 248, 250, 255, 257, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 319, 323, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 346, 347, 348, 351, 357, 361, 362, 363, 364, 365, 366, 368, 369, 370, 374, 375, 378], "predict_func": [29, 30, 33, 375], "predict_funct": [29, 30, 33, 291, 375], "predict_interv": [39, 40, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "predict_last_hidden_lay": [17, 18], "predict_proba": [32, 34, 38, 49, 234, 235, 237, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 331, 332, 333, 334, 335, 336, 375], "predict_proba_func": [29, 30, 32, 375], "predict_proba_funct": [29, 30, 32, 268, 375], "prediction_proba": 136, "predictor": [225, 318, 330, 334, 335, 336, 337, 357, 358, 367, 368], "prefer": [114, 120, 207, 208, 209, 213, 218, 219, 220, 221, 224, 225, 228, 229, 230, 231, 232, 298, 299, 300, 301], "prefix": 306, "prepar": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 52, 53, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 320, 323, 337, 341], "preprint": [326, 331, 338], "preprocess": [0, 16, 17, 18, 19, 20, 22, 24, 26, 40, 44, 54, 58, 62, 64, 68, 71, 72, 75, 76, 80, 86, 110, 111, 112, 113, 118, 124, 125, 135, 136, 139, 140, 142, 145, 152, 161, 162, 163, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 271, 273, 282, 317, 320, 327, 341, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "preprocessor": 141, "presenc": 323, "present": [317, 318, 319, 324, 331, 338, 358, 368], "preserv": [345, 354, 355, 357, 359, 361, 369], "preval": 323, "prevent": [323, 357, 364], "preview": 352, "previou": [54, 112, 161, 319, 332, 334, 355, 375], "price": [354, 359, 364], "prime": [331, 338], "princip": [119, 124, 325, 327], "principl": 323, "print": [40, 49, 52, 274, 275, 285, 286, 289, 290, 364], "priorit": [365, 368], "privileg": 364, "proba": [34, 83, 140], "proba_cutoff": [83, 221, 364], "probabilist": [208, 213, 219, 220, 221, 229, 358], "probabl": [29, 30, 140, 169, 208, 213, 219, 220, 221, 223, 229, 234, 235, 237, 239, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 322, 330, 332, 333, 334, 336, 338, 357, 358, 360, 364, 366, 367, 368, 369], "problem": [63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 317, 319, 331, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "problemat": [210, 226, 331, 338], "proceed": [323, 331], "process": [1, 11, 54, 112, 125, 126, 132, 144, 164, 236, 238, 253, 289, 290, 299, 306, 315, 319, 321, 323, 326, 327, 331, 335, 336, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 360, 364, 365, 370, 373, 374, 378], "processor": [298, 299, 300, 301], "prod_j": 355, "produc": [125, 334, 358, 366, 367], "product": [339, 354, 359, 370], "profil": 251, "program": [5, 9, 10, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 54, 83], "programmat": 304, "progress": [52, 206, 274, 275, 285, 286, 289, 290, 349, 350, 368], "progressivethreshold": 52, "project": [345, 352], "promot": [365, 369], "proper": [339, 365, 366, 367], "properti": [0, 110, 111, 113, 127, 128, 129, 130, 134, 155, 156, 157, 159, 162, 179, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 196, 203, 322, 331, 338, 355, 365, 369], "proport": [71, 72, 117, 180, 209, 215, 222, 227, 258, 274, 275, 285, 286, 289, 290, 317, 319, 322, 328, 341, 343, 344, 345, 348, 366, 368], "propos": [323, 327], "propto": 365, "prostat": 29, "protect": [0, 83, 115, 142, 170, 171, 208, 213, 219, 220, 221, 229, 318, 352, 364], "protected_data": 83, "prototyp": 349, "provid": [52, 118, 120, 122, 123, 153, 180, 181, 208, 209, 216, 219, 231, 236, 239, 246, 247, 249, 255, 266, 267, 268, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 318, 321, 322, 323, 324, 325, 327, 328, 330, 331, 334, 336, 337, 338, 339, 342, 345, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 375], "proxim": [224, 331, 335, 366, 367, 368, 369], "prune": [272, 273, 354], "pseudo": [355, 375], "psi": [7, 21, 22, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 114, 322, 328, 339, 348, 358, 365, 366, 367, 369, 370], "psi_bin": [21, 22, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 114, 358, 365, 366, 367, 368, 369, 370], "psi_bucket": 322, "psi_method": [21, 22, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 114, 358, 365, 366, 367, 368, 369, 370], "pso": [299, 300, 358, 373], "public": [29, 323], "purifi": 355, "purpos": [215, 231, 321, 323, 332, 336, 338, 352, 372], "put": [331, 338], "py": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 317, 318, 319, 322, 323, 324, 332, 333, 334, 335, 336, 337, 338, 372, 375, 378], "pyal": [330, 332], "pylab": 39, "pyspark": [28, 36, 48, 375, 378], "pyswarm": 107, "python": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 107, 299, 330, 331, 332, 338, 360, 375], "pytorch": [285, 286], "q": [322, 328, 366, 367, 368, 369], "q1": [324, 342], "q2": 342, "q3": [324, 342], "q_": [365, 367, 368, 369], "q_1": 367, "q_i": [322, 328, 368], "q_k": 365, "q_l": 365, "qmc": [46, 299], "qmcsampler": 299, "qr": 367, "quad": 364, "qualiti": [299, 300, 301, 339, 342, 366, 369], "quantif": [339, 367], "quantifi": [235, 317, 322, 323, 327, 331, 338, 364, 366, 367, 368, 369], "quantil": [5, 54, 63, 64, 67, 68, 79, 80, 112, 114, 117, 118, 119, 164, 209, 211, 212, 213, 214, 215, 216, 220, 222, 224, 225, 227, 228, 229, 230, 231, 232, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 321, 322, 323, 328, 330, 332, 339, 341, 346, 348, 351, 364, 365, 366, 367], "quantiti": [354, 359], "quartil": [324, 341, 342], "quasi": 299, "queri": 366, "question": 0, "quicker": [330, 332], "quit": 332, "r": [358, 359, 360, 364, 365, 366, 367, 368, 369], "r2": [9, 14, 16, 20, 22, 24, 26, 31, 35, 44, 62, 207, 210, 211, 212, 213, 214, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 298, 299, 300, 301, 319, 350, 366, 373], "r_": [355, 365, 367, 368], "r_1": 358, "r_2": 358, "r_i": 367, "r_j": 365, "race": [54, 318, 321, 342, 364], "radar": 52, "radial": 323, "radio": [342, 343, 344], "rain": 332, "rais": [116, 234, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306, 364], "rajeev": 323, "ramani": 326, "ramaswami": 323, "ramaswamy2000": 323, "randint": [46, 373], "random": [42, 46, 47, 48, 117, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 172, 180, 209, 210, 211, 215, 216, 222, 223, 224, 226, 227, 231, 232, 234, 235, 236, 237, 238, 239, 247, 272, 273, 274, 275, 276, 277, 285, 286, 289, 290, 299, 300, 301, 323, 326, 327, 328, 330, 335, 337, 339, 341, 343, 344, 346, 350, 351, 355, 363, 366, 368, 378], "random_st": [14, 15, 16, 19, 20, 23, 24, 25, 26, 31, 32, 33, 34, 35, 43, 44, 45, 46, 49, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 117, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 172, 180, 209, 210, 211, 215, 216, 222, 223, 224, 226, 227, 231, 232, 234, 235, 236, 237, 238, 239, 247, 272, 273, 274, 275, 276, 277, 285, 286, 289, 290, 299, 300, 301, 352, 367, 375], "randomforestclassifi": 287, "randomforestregressor": 288, "randomizedsearchcv": 373, "randomli": [122, 125, 180, 239, 319, 322, 323, 327, 328, 330, 331, 335, 337, 338, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373], "randomsampl": 299, "randomsplit": 30, "rang": [34, 35, 43, 44, 52, 123, 125, 164, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 234, 237, 246, 274, 275, 276, 323, 325, 327, 330, 332, 335, 338, 339, 341, 350, 360, 367, 369, 370, 373], "range_": 52, "rank": [123, 210, 226, 317, 319, 325, 330, 337, 350, 365, 366, 367, 368, 369], "rapid": 349, "rare": 323, "rastogi": 323, "rate": [209, 215, 222, 224, 272, 273, 274, 275, 285, 286, 354, 355, 356, 359, 360, 364, 366, 367, 368, 373], "rather": [234, 335], "ratio": [29, 83, 123, 131, 208, 210, 219, 220, 221, 226, 272, 273, 318, 319, 326, 341, 348, 365], "rational": [323, 368], "ravel": [19, 20, 23, 24, 25, 26, 40, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 300, 354, 360], "raw": [38, 139, 140, 142, 143, 145, 150, 151, 158, 159, 170, 173, 181, 187, 192, 266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 317, 319, 321, 339, 341, 354, 355, 356, 357, 359, 360], "raw_data": [187, 192, 364], "raw_extra_data": 10, "rbf": 373, "rcit": 132, "re": [321, 358, 375], "reach": [17, 18, 23, 24, 323, 332, 358], "read": 153, "read_csv": 149, "readi": [321, 375], "real": [348, 355, 358, 366, 368, 369], "realist": 369, "realtim": 52, "reason": 327, "recal": [61, 208, 218, 219, 220, 221, 364, 366, 369], "receiv": 358, "reclassifi": [342, 343, 344], "recogn": [331, 338, 361], "recognit": [323, 327], "recommend": [326, 360], "recomput": 358, "reconst_error": [8, 119], "reconstruct": [119, 323, 327], "record": [317, 319, 323, 330, 334, 337, 342, 352], "recur": 370, "recurs": [276, 277, 323, 327, 330, 336, 355, 360, 361], "red": [323, 338], "reduc": [123, 125, 220, 221, 234, 323, 326, 327, 331, 332, 338, 343, 344, 345, 350, 354, 355, 356, 358, 359, 360, 364, 367, 368, 369], "reduct": [119, 125, 323, 325, 327, 331, 338, 345, 365, 366, 367], "redund": [132, 326], "refer": [83, 124, 126, 208, 213, 219, 220, 221, 229, 239, 274, 275, 318, 320, 322, 329, 332, 336, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 364, 365, 366, 367, 368, 369, 370], "refin": [358, 366, 367, 368, 369, 370], "refit": 367, "reflect": [342, 368, 369], "reg": [9, 40, 62], "reg_alpha": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "reg_clar": [272, 273], "reg_lambda": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 274, 275, 276, 277], "reg_mono": [23, 24, 272, 273, 285, 286, 354, 359], "regard": 324, "regardless": 370, "region": [214, 215, 216, 228, 230, 231, 232, 283, 284, 317, 319, 354, 355, 356, 358, 359, 360, 366, 367, 368, 369, 370], "regist": [9, 34, 35, 116, 135, 136, 139, 140, 142, 143, 147, 153, 197, 201, 202, 217, 233, 260, 261, 265, 321, 342, 346, 347, 348, 351, 352, 362], "register_nam": [204, 262], "registered_model": 49, "registr": [320, 349, 352], "registri": [0, 315, 339, 340], "registry_hub": 352, "regress": [0, 12, 21, 27, 48, 56, 59, 60, 65, 66, 69, 70, 73, 74, 77, 78, 81, 89, 176, 182, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 316, 321, 323, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 346, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 373, 375, 378], "regressor": [28, 36, 37, 41, 48, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 355, 378], "regular": [225, 272, 273, 274, 275, 276, 277, 285, 286, 289, 290, 323, 354, 357, 359, 360, 365, 369], "regulatori": [339, 347, 364, 368], "rel": [319, 323, 326, 327, 354, 355, 356, 357, 359, 360], "relat": [136, 209, 210, 222, 229, 317, 319, 322, 326, 328, 334, 351], "relationship": [121, 122, 123, 131, 223, 225, 237, 250, 274, 275, 285, 286, 322, 323, 325, 326, 330, 332, 334, 336, 337, 338, 343, 344, 345, 354, 355, 356, 357, 359, 360, 365, 366, 368, 370], "releas": 337, "relev": [219, 326, 332, 333, 334, 336, 358, 373], "reli": [238, 323, 324, 327, 365, 370], "reliability_coverag": 319, "reliability_perf": 317, "reliabl": [9, 34, 35, 73, 93, 209, 210, 215, 222, 224, 231, 238, 315, 316, 323, 330, 332, 339, 351, 354, 355, 359, 363, 365, 366, 368, 369, 370, 378], "relianc": [330, 337], "reload": 9, "reload_d": [9, 34, 35], "relu": [272, 273, 289, 290, 315, 339, 353], "relu_net": 360, "reludnn": [49, 289, 290, 332], "remain": [75, 76, 211, 227, 317, 319, 326, 331, 334, 335, 338, 358, 367, 369], "remark": [355, 360], "remedi": [363, 364, 368], "remov": [8, 132, 161, 323, 326, 330, 331, 337, 338, 352, 355, 360, 365, 369], "remove_outli": 323, "render": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 345], "rendermod": 52, "rental": [319, 332, 333, 334, 335, 336, 337, 338], "repai": 364, "repaid": 364, "repeat": [79, 211, 216, 224, 227, 238, 300, 323, 326, 327, 330, 335, 337, 355, 358], "repetit": [232, 337], "replac": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 126, 144, 195, 221, 331, 338, 352, 356, 375], "report": [240, 339, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "repositori": [317, 319, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 374], "repres": [122, 180, 221, 289, 290, 317, 318, 319, 322, 323, 325, 327, 330, 332, 333, 334, 335, 336, 338, 350, 352, 354, 355, 358, 359, 360, 361, 366, 368, 373], "represent": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 114, 236, 245, 247, 323, 327, 353, 355, 356, 360, 364, 370], "reproduc": [117, 119, 120, 121, 123, 124, 125, 131, 132, 133, 180, 209, 210, 211, 215, 216, 222, 223, 224, 226, 227, 231, 232, 234, 236, 237, 238, 239, 247, 274, 275, 276, 285, 286, 289, 290, 299, 300, 301, 339, 341, 346], "requir": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 126, 131, 274, 275, 276, 317, 323, 324, 327, 330, 331, 332, 336, 338, 339, 347, 352, 360, 364, 367], "rerun": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "res_valu": [63, 64, 67, 68, 71, 72, 79, 80, 83, 302, 365, 369, 370], "research": 326, "resect": [322, 328], "resembl": 368, "reset": 352, "reset_calibrate_interv": [39, 40], "reset_calibrate_proba": 38, "reset_preprocess": [5, 54, 321], "reshap": [34, 35, 300], "reshuffl": [272, 273], "residu": [9, 34, 35, 59, 61, 62, 63, 64, 93, 222, 223, 224, 225, 228, 229, 231, 232, 267, 270, 271, 273, 274, 275, 277, 279, 281, 284, 286, 288, 290, 291, 293, 295, 297, 315, 339, 348, 351, 355, 356, 363, 365, 367, 368, 369, 370, 378], "resili": [9, 34, 35, 77, 79, 80, 93, 210, 226, 315, 316, 339, 358, 363, 370, 378], "resilience_dist": [317, 319], "resilience_perf": [317, 319], "resilreli": 367, "resiz": [306, 343, 344], "resolut": 246, "respect": [133, 229, 272, 273, 322, 326, 328, 330, 333, 335, 338, 354, 355, 358, 359, 360, 364, 367, 369], "respons": [17, 18, 222, 224, 225, 252, 272, 289, 290, 317, 319, 322, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "response_kwarg": 224, "response_method": [86, 234, 235, 237, 332, 333, 334, 336], "response_typ": [57, 58, 224, 366, 367, 369], "rest": [63, 64, 235, 323, 327, 330, 332, 334, 337, 358, 367, 369, 370], "restrict": 358, "result": [0, 3, 4, 5, 6, 7, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 43, 44, 45, 46, 49, 52, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 114, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 180, 181, 199, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 265, 277, 298, 299, 300, 301, 302, 316, 317, 318, 319, 323, 326, 327, 330, 331, 332, 335, 336, 337, 338, 349, 350, 352, 354, 356, 357, 358, 359, 360, 361, 364, 365, 367, 368, 369, 370, 373], "result1": 54, "result2": 54, "retain": 132, "retrain": [354, 358], "retriev": [245, 251, 306, 365, 369, 370, 374], "return": [29, 30, 32, 33, 54, 106, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 153, 156, 159, 164, 173, 179, 180, 181, 187, 192, 196, 198, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 321, 328, 331, 333, 338, 375], "return_data": [333, 335], "return_html": [38, 40], "reus": 321, "reveal": [317, 319, 323, 330, 337, 368, 370], "revert": 4, "reweight": 368, "rewritten": 355, "rf": [366, 374], "rf2": 49, "rf_max_depth": [57, 58, 224, 366, 367, 368, 369], "rf_n_estim": [57, 58, 224, 366, 367, 368, 369], "rgba": 52, "ribeiro": 331, "ribeiro2016": [331, 335], "rich": 339, "ridg": [225, 365, 369], "right": [52, 318, 323, 326, 330, 331, 333, 335, 338, 355, 358, 359, 364, 365, 366], "right_inclus": 25, "rightarrow": 365, "rigor": 339, "risk": [354, 355, 359, 363, 364, 367, 370], "robsut": 369, "robust": [9, 34, 35, 75, 81, 83, 93, 123, 164, 211, 216, 224, 227, 232, 315, 316, 325, 339, 350, 351, 355, 357, 358, 361, 363, 366, 368, 370, 378], "robustness_perf": [317, 319], "robustness_perf_worst": [317, 319], "roc": [61, 218, 366], "roc_auc": [53, 61, 218], "role": [331, 338], "root": 317, "rotat": [52, 344], "rough": [272, 273, 277], "roughli": 360, "round": [4, 274, 275], "row": [2, 3, 5, 8, 9, 17, 18, 30, 34, 35, 63, 64, 67, 68, 71, 72, 79, 80, 83, 246, 342, 349, 350, 351, 352, 360], "row_nam": 52, "royal": 330, "rr": [208, 219, 220, 221, 229], "rule": [330, 333, 361, 364], "run": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 38, 39, 40, 49, 52, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93, 106, 114, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 163, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 261, 262, 265, 298, 299, 300, 301, 321, 325, 326, 341, 373], "run_id": [163, 204, 217, 233, 261, 262], "runtim": [299, 300, 301], "rush": 332, "rv": 301, "s3": 29, "s_1": 354, "s_2": 354, "s_i": 367, "s_l": 323, "s_m": [354, 355, 359], "s_r": 323, "said": 360, "same": [170, 171, 173, 195, 204, 236, 262, 319, 323, 327, 352, 360, 364, 366, 369, 370], "sameer": 331, "samesign": 52, "sampl": [0, 2, 3, 5, 7, 8, 19, 20, 29, 40, 63, 64, 67, 68, 71, 72, 75, 76, 112, 114, 117, 118, 119, 120, 121, 122, 123, 125, 131, 135, 136, 139, 140, 142, 162, 164, 168, 169, 172, 174, 177, 178, 180, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 222, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 247, 251, 254, 255, 256, 257, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 321, 322, 323, 324, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 343, 344, 345, 346, 347, 348, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 375], "sample_dataset": [212, 213, 214, 215, 216, 228, 229, 230, 231, 232], "sample_id": [212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 335, 338], "sample_idx": [6, 8, 180, 328], "sample_idx1": [7, 114, 302], "sample_idx2": [7, 114, 302], "sample_idx_by_llm": 251, "sample_index": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 57, 58, 87, 236, 239, 254, 255, 256, 257, 354, 355, 356, 357, 358, 359, 361, 366], "sample_method": [121, 122], "sample_s": [3, 6, 52, 57, 58, 86, 120, 121, 122, 123, 124, 125, 180, 223, 224, 234, 235, 237, 238, 247, 272, 273, 328, 332, 333, 334, 336, 338, 366, 367, 369], "sample_weight": [135, 136, 184, 189, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297], "sampler": [46, 299], "sampler_arg": 299, "san": 52, "sarinnapakorn": [323, 327], "satisfi": [355, 364], "save": [52, 152, 163, 259, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306, 349], "save_data": [54, 265], "save_img": 52, "save_model": [54, 265], "save_preprocess": 152, "save_testsuit": [54, 265], "saveasimag": 52, "scalabl": [272, 273], "scale": [5, 125, 164, 224, 227, 319, 336, 339, 341, 350, 352, 354, 355, 356, 357, 358, 359, 361, 369], "scale_numer": [5, 14, 16, 17, 18, 19, 20, 22, 24, 26, 40, 44, 54, 58, 62, 64, 68, 71, 72, 75, 76, 80, 86, 321, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369], "scaler": 164, "scatter": [121, 122, 223, 315, 338, 340, 343, 345, 366], "scatterplot": 38, "scenario": [226, 317, 319, 323, 339, 366, 368, 369], "schema": 30, "scheme": [322, 323, 327, 328], "schoelkopf": 326, "sch\u00f6lkopf": 323, "sch\u00f6lkopf2001": 323, "scientist": 339, "scikit": [107, 268, 291, 292, 293, 323, 330, 334, 336, 337, 339, 357, 361, 373, 375], "scikitlearn": 375, "scipi": [46, 107, 299, 301, 322, 328, 373], "score": [2, 8, 9, 28, 36, 48, 71, 72, 114, 117, 118, 119, 131, 133, 210, 211, 219, 220, 221, 222, 224, 225, 226, 227, 232, 250, 251, 253, 254, 255, 294, 295, 299, 327, 330, 331, 332, 337, 338, 354, 355, 359, 362, 364, 366, 368, 369, 378], "scoredmodel_californiah": 375, "scott": [331, 338], "screen": [272, 273, 274, 275, 276, 277, 343, 344], "script": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 372], "scroll": [343, 344], "seamless": [339, 362], "search": [42, 47, 48, 274, 275, 277, 298, 299, 300, 301, 378], "season": [4, 8, 9, 10, 14, 26, 52, 64, 68, 72, 80, 86, 336, 338, 354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369], "seciton": 362, "second": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 114, 272, 273, 317, 324, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "section": [0, 48, 93, 315, 317, 318, 319, 321, 322, 323, 324, 331, 332, 334, 338, 350, 360, 364, 365, 368, 369, 370], "see": [123, 300, 301, 318, 319, 323, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 343, 344, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "seed": [29, 30, 117, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 172, 180, 209, 210, 211, 215, 216, 222, 223, 224, 226, 227, 231, 232, 234, 235, 236, 237, 238, 239, 247, 272, 273, 274, 275, 276, 285, 286, 289, 290, 299, 300, 301, 346], "seem": [337, 338], "segment": [9, 34, 35, 63, 64, 67, 68, 71, 72, 79, 80, 83, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 316, 339, 358, 367, 368, 370], "segment1": [63, 67, 68, 71, 79, 80], "segment2": [63, 67, 68, 71, 79, 80], "segment_info": [212, 213, 214, 215, 216, 228, 229, 230, 231, 232], "select": [0, 1, 11, 14, 30, 44, 114, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 155, 162, 164, 166, 193, 194, 212, 214, 215, 216, 223, 226, 228, 229, 230, 231, 232, 234, 236, 237, 239, 252, 254, 255, 256, 257, 272, 273, 277, 315, 317, 319, 320, 323, 327, 330, 332, 339, 352, 354, 357, 358, 364, 365, 366, 367, 368, 369, 373, 378], "self": [175, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306], "sens": 335, "sensit": [123, 227, 319, 323, 324, 325, 338, 345, 364, 366, 369, 370], "separ": [227, 228, 229, 230, 231, 232, 323, 324, 327, 354, 355, 366], "septemb": [317, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "sequenc": [265, 355], "sequenti": [272, 273, 326, 355, 356], "seri": [52, 330], "seriesasc": 52, "serieslayoutbi": 52, "serif": 52, "serv": [306, 317, 323, 327, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 374], "session": 30, "set": [1, 2, 4, 7, 11, 19, 20, 29, 30, 63, 64, 67, 68, 71, 72, 79, 80, 83, 112, 114, 119, 122, 125, 132, 144, 151, 158, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 209, 210, 212, 213, 214, 215, 216, 218, 222, 228, 229, 230, 231, 232, 236, 238, 248, 250, 251, 252, 253, 254, 257, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 317, 319, 321, 322, 323, 324, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 375, 378], "set_active_featur": [4, 321], "set_active_sampl": 328, "set_feature_typ": [355, 356, 358, 359, 365, 366, 367, 368, 369], "set_inactive_featur": [2, 10, 54, 63, 321, 354, 355, 356, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370], "set_inactive_sampl": 8, "set_legend": 40, "set_mlflow_hom": [0, 49], "set_param": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "set_predict": [9, 35, 375], "set_prediction_proba": 34, "set_protected_data": [83, 364], "set_protected_extra_data": 83, "set_random_split": [2, 4, 5, 7, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 44, 45, 46, 49, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 321, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "set_raw_extra_data": [10, 83], "set_sample_weight": [2, 321], "set_target": [2, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 54, 57, 58, 62, 63, 64, 83, 321, 357, 361, 364, 370, 375], "set_task_typ": [29, 54, 175], "set_test_idx": [9, 29, 30, 31, 32, 33, 34, 35, 375], "set_train_idx": [9, 29, 30, 31, 32, 33, 34, 35, 375], "set_xaxi": [38, 40], "set_yaxi": [38, 40], "setup": [354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "sever": [48, 328, 331, 338, 355, 364, 365, 366, 367, 368, 369, 370, 373], "sex": [2, 3, 5, 13, 25, 63, 83, 364, 370], "sex_2": [2, 5], "shade": 332, "shadowcolor": 52, "shallow": 358, "shap": [107, 239, 329, 339, 347, 355], "shap_": 338, "shap_fi": 338, "shap_scatt": 338, "shap_summari": 338, "shap_waterfal": 338, "shapblog": 338, "shape": [6, 8, 31, 32, 33, 34, 35, 40, 49, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 342, 354, 355, 375], "shaplei": [31, 239, 329, 339, 347], "share": [343, 344], "shaw": 323, "shengchun": [323, 327], "shift": [209, 210, 224, 227, 317, 319, 322, 339, 348, 358, 367, 368, 369, 370], "shim": 323, "short": 358, "shorter": [323, 327], "should": [32, 33, 125, 152, 170, 171, 173, 180, 221, 228, 229, 230, 231, 232, 245, 272, 273, 285, 286, 330, 331, 332, 333, 336, 337, 354, 355, 359, 364, 369, 375], "show": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 51, 52, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 114, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 199, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 298, 299, 300, 301, 306, 317, 319, 323, 325, 332, 333, 334, 335, 336, 337, 338, 346, 355, 357, 360, 361, 365, 366, 367, 368, 369, 372], "show_featur": 322, "showcas": 374, "showcont": 52, "showminlabel": 52, "shown": [245, 300, 317, 322, 332, 333, 338, 360, 364, 366], "showtitl": 52, "shrink": 360, "shrinkag": [274, 275], "shu": [323, 327], "shuffl": [172, 180, 328, 330, 337], "shutdown": 29, "shyam": 326, "shyu": [323, 327], "shyu2003": [323, 327], "side": [325, 365, 368], "sigkdd": 331, "sigma": [326, 359, 360, 365, 369], "sigma_": [326, 365], "sigmod": 323, "sigmoid": [266, 268, 269, 272, 273, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 359, 360], "signifi": 318, "signific": [123, 132, 319, 325, 326, 330, 331, 337, 338, 348, 354, 355, 364, 367, 368], "significantli": [319, 322, 323, 327, 332, 335, 364, 365, 368], "silent": [38, 40, 49, 206], "similar": [212, 213, 214, 215, 216, 221, 228, 229, 230, 231, 232, 272, 273, 317, 322, 323, 330, 332, 334, 335, 338, 358, 364, 365, 366, 368, 369, 373], "similarli": [319, 323], "simpl": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 323, 332, 364, 366, 370], "simpler": 360, "simplest": 365, "simpli": 356, "simplif": 364, "simplifi": [23, 24, 274, 275, 277, 339, 341, 352, 355, 360, 364, 374], "simucredit": [43, 46, 54, 148, 204, 318, 321, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "simucredit_md": [341, 346, 347, 348, 349, 350, 351], "simul": [8, 331, 335, 338, 366, 368, 369], "simultan": [345, 354], "sinc": [318, 319], "singh": 331, "singl": [52, 53, 67, 68, 71, 72, 75, 76, 79, 80, 83, 120, 211, 224, 227, 228, 229, 230, 231, 232, 234, 236, 237, 245, 246, 254, 257, 306, 317, 319, 330, 332, 336, 338, 354, 355, 356, 359, 360, 361, 365, 373], "site": 337, "size": [9, 34, 35, 57, 58, 63, 64, 67, 68, 71, 72, 79, 80, 83, 117, 120, 124, 164, 180, 212, 213, 214, 215, 216, 223, 224, 228, 229, 230, 231, 232, 238, 258, 272, 273, 274, 275, 289, 290, 306, 317, 319, 322, 323, 327, 336, 346, 350, 352, 354, 355, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 373], "skew": [323, 365, 366, 370], "skip": [283, 284], "sklearn": [8, 28, 30, 32, 33, 34, 35, 36, 48, 269, 270, 271, 278, 279, 282, 287, 288, 321, 323, 327, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 372, 378], "skmlp": 375, "slice": [9, 34, 35, 60, 65, 89, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 302, 317, 319, 332, 336, 339, 351, 363, 367, 369, 378], "slice_featur": [317, 319], "sliced_lin": [332, 336], "slicing_util": [0, 63, 64, 67, 68, 71, 72, 79, 80, 83, 365, 369, 370], "slight": [319, 369], "slightli": [317, 326, 354, 359], "slow": [345, 350], "slower": [331, 338], "small": [79, 80, 117, 227, 323, 327, 330, 331, 332, 338, 354, 356, 359, 360, 365, 368, 369], "smalldata": 29, "smaller": [124, 208, 213, 219, 220, 221, 229, 234, 272, 273, 354, 359, 360, 361, 370], "smallest": [144, 319], "smd": [208, 219, 220, 221, 229, 364], "smirnov": [114, 322, 328], "smola": 323, "smooth": [3, 121, 220, 285, 286, 354, 364, 365], "smoother": [246, 355], "smoother_ord": [3, 121], "sne": 323, "snippet": 334, "so": [5, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 319, 324, 326, 330, 331, 335, 337, 338], "soccer": [331, 338], "social": [364, 373], "societ": 364, "societi": 330, "soft": 358, "softmax": 358, "sole": [324, 331, 338], "solid": [52, 339], "solut": [299, 300, 301, 367, 368], "some": [272, 273, 317, 321, 323, 330, 336, 337, 354, 355, 356, 358, 359, 360, 364, 365, 366, 367, 368, 369], "sometim": 375, "sort": [323, 326, 368], "sound": [354, 359], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 187, 321], "space": [119, 125, 224, 227, 235, 237, 272, 273, 276, 277, 283, 284, 323, 327, 350, 358, 365, 366, 367, 368, 369, 370, 373], "spap": 338, "spark": [30, 154], "spark_df": 30, "sparksess": 30, "spars": [119, 354, 355, 359, 367, 370], "sparse_pca": 119, "sparsiti": [119, 354, 357, 369], "spearman": [3, 123, 325], "speci": 321, "special": [5, 144, 283, 284, 315, 321, 358, 360, 365, 367, 368], "special_valu": [5, 144, 321], "specif": [57, 58, 79, 112, 164, 211, 212, 213, 214, 215, 216, 226, 228, 229, 230, 231, 232, 236, 239, 245, 251, 254, 255, 256, 257, 317, 318, 319, 322, 323, 324, 327, 328, 330, 331, 332, 334, 336, 337, 345, 346, 347, 348, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "specifi": [52, 112, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 131, 133, 164, 180, 181, 207, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 223, 228, 229, 230, 231, 232, 234, 237, 239, 246, 253, 254, 255, 274, 275, 289, 290, 298, 299, 300, 301, 306, 317, 319, 324, 326, 328, 331, 332, 336, 337, 338, 350, 354, 359, 360, 366, 367, 369, 373], "spectral": 366, "speed": [234, 235, 237, 238, 239, 322, 332, 333, 334, 336, 338, 355], "speedup": 224, "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 89], "sphx_glr__source_auto_galleries_dev_1_extmodels_plot_1_arbitrari": 375, "sphx_glr__source_auto_galleries_dev_1_extmodels_plot_2_scor": 375, "sphx_glr_auto_examples_0_data_plot_1_data_summari": 324, "sphx_glr_auto_examples_0_data_plot_4_data_qu": [322, 323], "sphx_glr_auto_examples_1_train_plot_2_register_1_h2o": 372, "sphx_glr_auto_examples_2_explain_plot_0_pfi": 337, "sphx_glr_auto_examples_2_explain_plot_1_pdp": 336, "sphx_glr_auto_examples_2_explain_plot_1_pdp_hstat": 333, "sphx_glr_auto_examples_2_explain_plot_2_ic": 334, "sphx_glr_auto_examples_2_explain_plot_3_al": 332, "sphx_glr_auto_examples_2_explain_plot_4_lim": 335, "sphx_glr_auto_examples_2_explain_plot_5_shap": 338, "sphx_glr_auto_examples_2_explain_plot_6_data_dependent_explain": [332, 333, 334, 335, 336, 337, 338], "sphx_glr_auto_examples_5_compare_plot_0_compare_classif": 317, "sphx_glr_auto_examples_5_compare_plot_0_compare_regress": 319, "sphx_glr_auto_examples_5_compare_plot_1_compare_fair": 318, "split": [0, 2, 23, 24, 25, 26, 29, 30, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 133, 135, 136, 137, 138, 139, 140, 142, 143, 146, 171, 172, 173, 180, 209, 218, 222, 231, 249, 267, 270, 271, 273, 274, 275, 276, 277, 279, 281, 283, 284, 286, 288, 290, 291, 293, 295, 297, 298, 299, 300, 301, 321, 323, 327, 330, 332, 339, 342, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 368, 369, 370], "split_custom": [23, 24, 274, 275, 276, 277], "split_fram": 29, "splitarea": 52, "splitlin": 52, "splitnumb": 52, "splitter": [15, 16, 298, 299, 300, 301], "sport": [331, 338], "sq_residu": 224, "sq_residual_perturb": 224, "sql": 30, "squar": [5, 164, 224, 317, 321, 323, 327, 355, 358, 360, 366, 368, 369], "squared_error": 16, "squarederror": [9, 40, 62], "sridhar": 323, "stabil": [114, 118, 216, 227, 322, 328, 339, 346, 348, 357, 358, 365, 368, 369], "stabl": [133, 354, 355, 356, 357, 359, 360, 365, 369], "stack": [121, 325], "stackstrategi": 52, "stage": [23, 24, 132, 272, 273, 326], "stake": [364, 367], "stand": [115, 173], "standalon": 352, "standard": [119, 124, 164, 208, 219, 220, 221, 224, 227, 250, 252, 321, 324, 326, 330, 332, 341, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369], "start": [349, 350, 354, 355, 359, 360, 365], "start_tim": 49, "stat": [46, 299, 301, 322, 328, 373], "state": [331, 338, 341, 346, 351, 360], "static": 360, "statist": [123, 181, 210, 212, 215, 226, 235, 250, 252, 253, 285, 286, 289, 290, 321, 322, 325, 326, 328, 329, 334, 339, 342, 360, 364, 366, 367, 369, 370], "statu": [54, 131, 132, 133, 321, 343, 344, 349, 350, 352, 364], "std": [3, 5, 17, 18, 164, 252, 324, 365], "std_dev": 250, "steep": [226, 359], "stem": [236, 254, 255, 335, 357, 360], "step": [112, 132, 136, 152, 161, 163, 265, 283, 284, 289, 290, 321, 323, 326, 327, 330, 331, 337, 338, 352, 355, 360, 367, 368, 369, 373, 375], "step_log": 132, "still": [323, 332, 334, 354, 359, 375], "stop": [23, 24, 272, 273, 274, 275, 285, 286, 289, 290, 326, 365, 369], "store": [52, 112, 268, 291, 306, 342, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "str": [34, 35, 52, 106, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 139, 140, 142, 143, 144, 147, 148, 149, 152, 153, 154, 160, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 180, 181, 195, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306], "straightforward": [331, 335, 336, 369], "strategi": [112, 114, 144, 210, 226, 283, 284, 298, 299, 300, 301, 326, 327, 339, 363], "stratif": [180, 328], "stratifi": [180, 299, 300, 301, 328, 365], "streamlin": [339, 345, 349, 350], "strength": [123, 131, 235, 272, 273, 274, 275, 276, 277, 285, 286, 289, 290, 325, 326, 330, 333, 346, 348, 354, 356, 357, 359, 360, 364], "stress": 226, "strict": [354, 359], "strike": 365, "string": [53, 144, 272, 273, 283, 284, 285, 286, 289, 290, 317, 319, 324, 373], "strobl": 326, "strobl2019": 326, "strong": [123, 325], "stronger": [225, 235, 330, 333, 354, 355, 356, 357, 358, 359, 369], "strongli": [330, 332, 354, 359], "structur": [125, 181, 212, 246, 249, 254, 276, 277, 298, 299, 300, 301, 302, 323, 327, 331, 338, 342, 345, 352, 354, 355, 356, 359, 360, 361, 366, 368, 369], "struggl": [366, 368, 370], "style": [28, 36, 48, 52, 362, 372, 375, 378], "su": [331, 338], "sub": [272, 273, 367, 369], "sub_item": 208, "subgroup": [345, 358, 364, 368], "subitem": 207, "subject": [211, 272, 273, 326, 365, 370], "sublink": 52, "submodul": 323, "subnet_size_interact": [272, 273], "subnet_size_main_effect": [272, 273], "subnetwork": [272, 273, 354], "subobject": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "suboptim": 358, "subpopul": [358, 368], "subsampl": [1, 11, 23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 122, 124, 125, 135, 139, 140, 142, 180, 223, 235, 237, 315, 320, 323, 331, 332, 333, 334, 336, 338, 378], "subsample_for_bin": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "subsample_freq": [23, 24, 25, 26, 43, 45, 46, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "subsample_random": [6, 328], "subscript": 364, "subsect": [323, 372], "subsequ": [112, 323, 355], "subset": [224, 226, 238, 299, 318, 323, 326, 330, 332, 333, 334, 336, 338, 345, 361, 365, 366, 368, 370], "subseteq": [331, 338], "substanti": 336, "subtarget": 52, "subtext": 52, "subtract": [236, 254, 255, 332, 335, 355], "success": [331, 338], "successfulli": 2, "sudjianto2020": 360, "suffer": 319, "suffici": 368, "suffix": 341, "suggest": [235, 319, 322, 323, 330, 332, 336, 338, 364, 366], "suit": [0, 263, 264, 315, 324, 325, 339, 346, 348, 351, 352], "suitabl": [323, 327, 339, 366, 369], "sum": [235, 284, 322, 323, 326, 327, 328, 354, 355, 356, 357, 358, 359, 360], "sum_": [322, 323, 326, 328, 330, 331, 332, 333, 336, 338, 354, 355, 356, 358, 359, 360, 365, 366, 368, 369], "sum_i": [358, 359], "sum_j": [355, 356, 368], "sum_k": [354, 355, 359], "sum_m": 355, "summar": [228, 230, 232, 258, 319, 324, 343, 364, 366, 369, 370], "summari": [7, 21, 22, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 114, 208, 209, 210, 211, 219, 222, 224, 226, 227, 239, 252, 315, 320, 339, 340, 343, 348, 358, 365, 366, 367, 368, 369, 370], "sup_": 368, "sup_x": [322, 328], "supabas": 107, "superior": 318, "supervis": [330, 363], "supplement": 352, "support": [120, 121, 122, 125, 126, 176, 208, 213, 219, 221, 228, 229, 230, 231, 232, 234, 236, 285, 286, 289, 290, 306, 319, 321, 323, 325, 328, 331, 332, 338, 339, 350, 351, 355, 358, 364, 369, 373], "suppos": [330, 331, 336, 338, 375], "surpris": 337, "surrog": [331, 335, 338], "survei": 326, "sv1": [5, 321], "sv2": [5, 321], "svg": 306, "swarm": [42, 47, 48, 300, 358, 378], "switch": [342, 347], "symbol": 304, "symmetr": [123, 330, 333], "system": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 319, 331, 332, 333, 334, 335, 336, 337, 338, 339, 364], "systemat": [364, 366, 369, 370], "t": [9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 43, 44, 45, 46, 49, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 116, 274, 275, 302, 323, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 375], "t_k": 355, "tab": [342, 345, 347, 352], "tabl": [3, 5, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 38, 43, 44, 45, 46, 52, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 79, 80, 83, 86, 114, 117, 118, 119, 123, 124, 125, 131, 132, 133, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 252, 254, 255, 259, 298, 299, 300, 301, 306, 321, 322, 341, 342, 348, 354, 355, 356, 357, 358, 359, 361, 364, 365, 366, 367, 369, 370, 373, 375], "tabular": [239, 245, 247, 298, 299, 300, 301], "tag": [160, 204, 262, 330, 331, 332, 333, 336, 338, 354, 360], "tailor": [358, 367, 368], "taiwancredit": [2, 3, 5, 7, 13, 15, 17, 19, 21, 23, 25, 38, 39, 45, 49, 53, 57, 61, 63, 67, 71, 75, 79, 83, 87, 148, 317, 321, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370], "taiwancreditdata": [317, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "take": [229, 268, 291, 323, 327, 331, 338, 345], "taken": 319, "tanh": [272, 273, 375], "target": [2, 5, 29, 30, 31, 32, 33, 52, 126, 131, 164, 175, 194, 209, 215, 222, 223, 224, 235, 237, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 321, 322, 326, 328, 330, 332, 336, 337, 341, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 375], "target_featur": 54, "target_nam": [31, 32, 33, 321, 375], "task": [175, 176, 182, 208, 209, 215, 219, 220, 222, 223, 231, 234, 235, 236, 237, 239, 267, 270, 271, 273, 275, 277, 279, 281, 283, 284, 286, 288, 289, 290, 291, 293, 295, 297, 317, 321, 323, 327, 330, 332, 333, 334, 336, 337, 338, 339, 341, 346, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 375], "task_typ": [54, 176, 222, 267, 270, 271, 273, 275, 277, 279, 281, 284, 286, 288, 290, 291, 293, 295, 297, 372], "tau": [123, 325, 358, 367], "tau_1": 367, "tau_2": 367, "taylor": 323, "teacher": [272, 273], "team": [331, 338], "technic": 332, "techniqu": [323, 327, 339, 345, 364, 365, 367, 368, 369, 370, 373], "tell": 332, "temp": [4, 8, 9, 10, 52, 64, 68, 72, 80, 324, 354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369], "temperatur": 358, "templat": [292, 293], "tempor": 366, "temporari": 326, "temporarili": 326, "tend": [336, 360, 365], "tendenc": [354, 359], "term": [250, 253, 318, 331, 335, 338, 354, 355, 356, 358, 359, 360, 365, 367, 368, 370], "termin": [17, 18, 23, 24, 358, 359, 369], "test": [0, 1, 2, 9, 10, 11, 13, 14, 15, 16, 19, 20, 23, 24, 25, 26, 38, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 66, 67, 68, 71, 72, 83, 86, 87, 89, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 139, 140, 142, 143, 144, 151, 164, 172, 173, 177, 180, 181, 183, 184, 185, 186, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 283, 284, 298, 299, 300, 301, 302, 315, 317, 319, 321, 323, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 367, 368, 370, 374, 375, 378], "test1": 233, "test2": 233, "test_dataset": [9, 34, 35, 38, 54, 61, 62, 67, 68, 71, 72, 207, 209, 214, 215, 218, 222, 230, 231, 364, 365, 366, 367, 370], "test_explain": 347, "test_i": [2, 38, 39, 40], "test_idx": [9, 31, 32, 33, 34, 35, 177, 375], "test_indic": [30, 34, 35], "test_list": 233, "test_model": 54, "test_ratio": [54, 172], "test_result": 262, "test_sample_s": [335, 338], "test_sample_weight": 2, "test_scor": [207, 218], "test_siz": [31, 32, 33, 34, 35, 71, 72, 209, 215, 222, 231, 367, 375], "test_weak": 351, "test_x": [2, 38, 39, 40], "testsuit": [0, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 43, 44, 45, 46, 49, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "testsuite_nam": 233, "text": [52, 356, 358, 364, 365, 366, 367, 368, 369], "textalign": 52, "textbf": [330, 332, 354, 360], "textbordertyp": 52, "textgap": 52, "textshadowcolor": 52, "textstyl": 52, "textverticalalign": 52, "th": [224, 323, 327, 330, 331, 332, 333, 336, 338, 355, 360], "than": [123, 144, 225, 234, 235, 272, 273, 317, 318, 319, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 338, 356, 360, 365, 373], "thei": [237, 321, 323, 327, 330, 331, 336, 338, 355, 360, 364], "theil": [123, 131, 326], "theilsu": 326, "them": [49, 114, 123, 218, 321, 325, 326, 356, 362, 364, 365, 368, 375], "theoret": 368, "theori": 326, "therebi": [323, 358], "therefor": [330, 331, 332, 335, 338, 360], "theta": [354, 358, 359], "theta_i": 359, "thi": [0, 5, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 48, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 156, 160, 166, 173, 179, 180, 181, 199, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 315, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375], "third": [121, 272, 273, 324, 342, 343, 344, 360], "thorough": 369, "those": [301, 318, 319, 364, 369], "three": [122, 208, 213, 219, 221, 229, 272, 273, 317, 319, 322, 324, 325, 326, 327, 344, 354, 358, 359, 369, 370], "threre": 364, "threshold": [4, 8, 9, 34, 35, 63, 64, 67, 68, 71, 72, 79, 80, 83, 117, 118, 119, 131, 132, 133, 208, 212, 213, 214, 215, 216, 219, 221, 222, 227, 228, 229, 230, 231, 232, 272, 273, 302, 323, 326, 327, 348, 355, 356, 359, 365, 366, 367, 369, 370], "through": [121, 124, 133, 220, 246, 257, 285, 286, 289, 290, 319, 325, 343, 350, 353, 354, 356, 357, 358, 359, 360, 361, 363, 365, 367, 370, 373], "throuput": 339, "ti": [228, 229, 231, 232], "tild": 360, "time": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 115, 118, 123, 133, 173, 211, 216, 224, 227, 234, 238, 246, 272, 273, 322, 326, 331, 337, 338, 349, 350, 352, 360, 367, 368], "time_cost_": [272, 273], "ting": [323, 327], "titl": [52, 265], "tn": 366, "to_df": [5, 9], "toarrai": 30, "togeth": [195, 354, 359, 364], "token": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "tol": [14, 44], "toler": [272, 273], "tolist": 30, "toni": [323, 327], "too": [319, 330, 331, 332, 338, 345, 360, 365], "tool": [237, 325, 330, 331, 335, 336, 338, 339, 342, 351, 366, 372, 376], "toolbox": 52, "tooltip": [52, 122], "top": [52, 251, 252, 272, 273, 276, 306, 317, 319, 321, 323, 324, 326, 333, 335, 354, 358, 360, 367], "top1": [3, 324], "top2": [3, 324], "top3": [3, 324], "torch": [107, 272, 273, 289, 290], "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 258, 342, 354, 355, 359, 360, 365, 369, 378], "toward": [360, 364, 368], "tp": 366, "tp_": 364, "tpe": [46, 299], "tpesampl": 299, "tpr": [364, 366], "tqdm": 107, "track": [144, 323, 339, 368, 369], "trade": [239, 299, 300, 301, 367], "tradeoff": [221, 365], "tradit": [323, 354, 356, 357, 358, 359, 366], "train": [0, 2, 5, 7, 9, 10, 23, 24, 29, 30, 31, 34, 35, 38, 43, 44, 45, 46, 53, 54, 57, 58, 61, 62, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 139, 140, 142, 143, 144, 151, 164, 172, 173, 178, 180, 181, 188, 189, 190, 191, 197, 199, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 315, 317, 319, 321, 322, 323, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 348, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 370, 373, 375], "train_al": [49, 374], "train_dataset": [9, 34, 35, 38, 54, 61, 62, 67, 68, 71, 72, 207, 209, 214, 215, 218, 222, 230, 231, 364, 365, 366, 367, 370], "train_epoch_loss_": [289, 290], "train_i": [2, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 44, 45, 46, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "train_idx": [9, 31, 32, 33, 34, 35, 178, 375], "train_indic": [30, 34, 35], "train_model": 54, "train_sample_s": [335, 338], "train_sample_weight": 2, "train_scor": [207, 218], "train_siz": 180, "train_test_split": [31, 32, 33, 34, 35, 375], "train_x": [2, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 44, 45, 46, 49, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 300, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370], "training_fram": 29, "transfom": [354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369], "transform": [30, 112, 119, 124, 126, 164, 225, 321, 323, 326, 327, 331, 338, 352, 360, 365, 366, 367, 368, 369, 372], "transitiondur": 52, "translat": 366, "transpar": [52, 355, 360], "travers": [257, 361], "treat": [144, 173, 300, 326], "treatment": [221, 339], "tree": [12, 27, 48, 118, 209, 214, 215, 222, 224, 225, 246, 248, 249, 254, 257, 267, 269, 270, 271, 273, 274, 275, 276, 277, 279, 281, 284, 285, 286, 288, 290, 291, 293, 295, 297, 299, 315, 317, 323, 327, 330, 331, 335, 336, 338, 339, 353, 354, 358, 366, 367, 368, 369, 373, 378], "tree_": [276, 277], "tree_method": 300, "treeclassifi": 338, "treeregressor": 338, "treeshap": 338, "trend": [121, 343, 356, 365, 366], "trial": [5, 9, 10, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 54, 83], "trigger": [52, 336], "triggeron": 52, "trivial": [354, 360], "troubleshoot": 340, "true": [2, 5, 9, 13, 14, 17, 18, 19, 20, 23, 24, 25, 26, 29, 34, 35, 38, 40, 44, 49, 52, 54, 57, 58, 63, 64, 67, 68, 71, 72, 79, 80, 83, 119, 144, 146, 172, 180, 187, 208, 213, 219, 220, 221, 223, 229, 233, 236, 254, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306, 321, 323, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 374], "truncat": [330, 337], "trust": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 331], "trustworthi": [354, 359, 364, 367, 370], "truth": [266, 268, 269, 272, 274, 276, 278, 280, 282, 283, 285, 287, 289, 292, 294, 296, 375], "try": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 298, 299, 301], "ts_residu": [57, 58, 366], "tsamardino": 326, "tsc": [38, 54, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 364, 365, 366, 368, 369, 370], "tset_task_typ": 321, "tulio": 331, "tune": [0, 23, 24, 47, 49, 54, 93, 268, 272, 273, 285, 286, 291, 298, 299, 300, 301, 315, 323, 339, 340, 346, 349, 352, 354, 359, 362, 378], "tupl": [53, 106, 112, 114, 123, 124, 125, 126, 144, 164, 165, 167, 207, 210, 211, 216, 218, 220, 221, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 237, 245, 246, 247, 272, 273, 285, 286, 289, 290, 298, 299, 300, 301, 306, 357, 360, 364], "tutori": 375, "tw": 5, "twcredit": 352, "twice": 326, "two": [3, 114, 119, 121, 123, 132, 230, 231, 232, 234, 235, 237, 246, 247, 318, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 338, 343, 352, 355, 356, 360, 364, 365, 366, 367, 368, 369], "tx": 359, "type": [2, 52, 111, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 164, 166, 175, 176, 180, 181, 182, 187, 192, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 321, 323, 325, 326, 327, 341, 349, 350, 351, 352, 356, 357, 364, 366, 367, 369, 372], "type_": 52, "typic": [123, 125, 323, 325, 330, 337, 355, 366, 367, 368, 373], "u": [107, 123, 131, 323, 326, 327, 330, 332, 336, 337, 364, 366, 369], "u_": [354, 355, 359], "uci": [317, 319, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "ultim": [253, 366], "umap": [107, 125], "umer": 321, "unabl": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "unbias": [330, 332], "uncent": [330, 332, 335, 354, 355, 356, 357, 359, 360], "uncertain": [368, 370], "uncertainti": [319, 326, 339, 367, 368, 369, 370], "unchang": [330, 335, 337, 369], "uncov": [343, 344, 358, 366, 370], "under": [67, 68, 71, 72, 79, 80, 83, 209, 210, 211, 216, 225, 226, 227, 232, 253, 317, 319, 323, 326, 327, 339, 348, 350, 364, 366, 367, 368, 369, 370], "underbrac": 365, "underestim": 365, "underfit": [218, 315, 326, 363, 366], "undergo": [317, 319], "underli": [266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 296, 297, 323, 355, 357, 361, 366], "underperform": [366, 368, 370], "understand": [226, 237, 323, 325, 334, 342, 358, 360, 364, 366, 367, 368, 370], "understood": 365, "uneven": 370, "unfair": [208, 219, 220, 221, 318, 364], "unfit": [285, 286], "uni_featur": [332, 334, 336], "unifi": [331, 355], "uniform": [21, 22, 46, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 112, 114, 212, 213, 214, 215, 216, 220, 221, 224, 225, 227, 228, 229, 230, 231, 232, 317, 319, 321, 322, 341, 345, 351, 358, 364, 365, 366, 367, 368, 373], "uniformli": [272, 273, 299, 301, 351, 358, 370], "union": [228, 229, 230, 231, 232], "uniqu": [3, 5, 321, 323, 324, 327, 341, 342, 349, 355, 358, 359, 360, 368], "unit": 164, "univ": [323, 327], "univari": [120, 320, 323, 339, 364, 367, 368, 369], "unless": [298, 299, 300, 301, 317, 319], "unlik": [317, 319, 323, 331, 338, 355, 366], "unmodel": 366, "unnecessarili": 360, "unpen": 360, "unprivileg": 364, "unreli": [71, 209, 210, 215, 222, 231, 232, 330, 332, 364, 367], "unseen": [322, 365, 366], "unstabl": 360, "unsupervis": [323, 366], "unsupport": 306, "until": [323, 327, 354, 355, 358, 359], "unus": 352, "unusu": 366, "unwrap": 360, "unwrapp": 252, "up": [40, 107, 234, 235, 237, 322, 330, 332, 333, 334, 336, 338, 343, 344, 355], "updat": [2, 107, 166, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 342, 352, 355, 356, 358], "upon": 360, "upper": [83, 208, 213, 219, 220, 221, 229, 235, 237, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 364], "upper_inclus": [83, 208, 213, 219, 220, 221, 229, 364], "us": [2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 48, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 135, 136, 139, 140, 142, 143, 144, 147, 152, 153, 160, 164, 168, 169, 173, 174, 175, 180, 181, 187, 199, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375], "usag": [51, 322, 323, 362], "use_multi_thread": 29, "use_predict": [57, 58, 223], "use_test": [332, 333, 334, 335, 336, 337, 338], "use_weight": 117, "user": [120, 210, 299, 304, 321, 323, 324, 326, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 361, 362, 370], "usual": [330, 331, 332, 337, 338, 373], "util": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93, 107, 214, 215, 318, 319, 321, 323, 327, 352, 365, 369], "v": [208, 219, 239, 299, 300, 301, 326, 328, 343, 348, 366, 367, 368, 369], "v_": 358, "v_m": [354, 355, 359], "val": [331, 338], "val_ratio": [272, 273, 274, 275, 285, 286, 289, 290], "valid": [0, 9, 17, 18, 23, 24, 52, 93, 222, 229, 246, 254, 262, 265, 272, 273, 274, 275, 283, 284, 285, 286, 289, 290, 298, 299, 300, 301, 306, 335, 338, 339, 347, 354, 359, 365, 366, 372, 373, 376], "validation_epoch_loss_": [289, 290], "validationresult": [0, 51, 55, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 144, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 298, 299, 300, 301, 378], "valu": [4, 5, 6, 21, 22, 25, 29, 31, 43, 44, 45, 46, 52, 57, 58, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 112, 114, 117, 118, 119, 123, 124, 125, 126, 131, 132, 133, 144, 164, 180, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 318, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 350, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373], "valuabl": [237, 323, 337, 368], "valueerror": [234, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306], "var": 365, "vari": [235, 237, 334, 335, 358, 364, 370], "variabl": [3, 7, 79, 80, 83, 123, 124, 125, 126, 131, 136, 223, 225, 237, 266, 267, 269, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 296, 297, 304, 305, 317, 318, 319, 322, 323, 325, 326, 327, 328, 330, 334, 337, 338, 339, 345, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 370], "varialb": 225, "varianc": [119, 124, 164, 225, 235, 323, 325, 327, 338, 354, 355, 356, 357, 358, 359, 365, 366], "variat": [227, 368, 369], "variou": [49, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 112, 114, 121, 144, 164, 181, 208, 209, 211, 214, 215, 216, 219, 229, 232, 317, 319, 322, 323, 327, 331, 338, 354, 364, 369], "vdot": 356, "vector": [30, 323, 331, 332, 338, 355, 358, 360], "vectorassembl": 30, "veloc": 358, "vendor": 375, "verbos": [17, 18, 23, 24, 25, 26, 31, 32, 33, 43, 45, 46, 49, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 272, 273, 274, 275, 285, 286, 289, 290], "veri": [272, 273, 318, 330, 332, 335, 337, 354], "verifi": [354, 359], "versa": 360, "version": [2, 49, 107, 113, 136, 139, 140, 142, 143, 153, 162, 187, 193, 194, 202, 254, 322, 328], "vertic": 52, "via": [23, 24, 224, 330, 333, 354, 358, 362, 367, 368, 369], "vice": 360, "vicin": 323, "victori": [331, 338], "view": [2, 123, 249, 325, 330, 332, 336, 337, 338, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361], "viewport": 122, "violat": [354, 359, 364, 367], "violin": 253, "visual": [51, 55, 67, 68, 107, 114, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 298, 299, 300, 301, 306, 323, 325, 330, 332, 334, 336, 339, 346, 348, 350, 354, 355, 360, 361, 365, 366, 367, 369, 370, 378], "visualmap": 52, "visualmap_typ": 52, "visweswaran": 326, "vulner": [226, 339, 358, 368], "w": [330, 359, 360, 367, 368, 369], "w_": 365, "w_1": 357, "w_2": 357, "w_d": 357, "w_i": [359, 365, 369], "wai": [237, 242, 319, 322, 323, 330, 331, 334, 338, 356, 360, 366, 367, 375], "wang": 326, "want": [324, 331, 334, 336, 338, 341], "warm_start": [14, 44, 272, 273], "wasserstein": [114, 322, 328, 339], "wasserstein_dist": [322, 328], "wd": 339, "wd1": [114, 322, 328], "we": [9, 71, 72, 272, 273, 299, 300, 301, 317, 318, 319, 322, 323, 324, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 360, 364, 366, 368, 369, 372, 374, 375], "weak": [9, 34, 35, 63, 64, 67, 68, 71, 72, 79, 80, 83, 213, 214, 215, 216, 228, 229, 230, 231, 232, 235, 315, 317, 319, 339, 340, 346, 363, 366], "weakspot": 316, "weathersit": [4, 8, 9, 10, 14, 64, 68, 72, 80, 332], "websit": [317, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370], "weekdai": [4, 8, 9, 10, 64, 72, 80, 354, 367, 369], "weight": [2, 117, 162, 168, 169, 174, 247, 250, 253, 256, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 321, 327, 331, 335, 338, 341, 352, 355, 358, 359, 360, 365, 367, 368], "well": [226, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 322, 323, 346, 358, 364, 366, 367, 368, 369, 370], "went": [331, 338], "were": 144, "what": 315, "when": [114, 119, 120, 123, 144, 195, 199, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 239, 257, 267, 270, 271, 272, 273, 274, 275, 277, 279, 281, 284, 286, 288, 290, 291, 293, 295, 297, 317, 318, 322, 323, 326, 330, 331, 332, 334, 335, 337, 338, 354, 355, 358, 359, 360, 361, 364, 365, 366, 369, 370, 373], "where": [117, 118, 119, 123, 144, 207, 208, 210, 212, 214, 215, 216, 222, 223, 226, 227, 228, 231, 232, 234, 235, 236, 237, 238, 239, 245, 248, 250, 254, 255, 256, 283, 284, 289, 290, 298, 299, 318, 322, 323, 325, 326, 327, 330, 331, 332, 333, 336, 338, 354, 355, 356, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 373], "wherea": 360, "whether": [117, 119, 172, 180, 195, 201, 213, 214, 215, 216, 223, 228, 229, 230, 231, 232, 236, 254, 265, 272, 273, 274, 275, 276, 277, 283, 284, 306, 323, 326, 330, 336, 358, 366, 368], "which": [93, 112, 117, 118, 120, 121, 122, 123, 124, 125, 126, 180, 181, 208, 209, 210, 211, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 246, 255, 289, 290, 299, 305, 317, 319, 321, 322, 323, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 375], "while": [224, 234, 237, 274, 275, 323, 330, 332, 334, 337, 338, 345, 354, 355, 357, 358, 359, 360, 361, 364, 365, 369, 370, 373], "who": [331, 338, 364], "whole": [228, 229, 230, 231, 232, 322, 347], "whose": [245, 367, 368], "why": [331, 366], "wide": [360, 361], "widest": [222, 367], "width": [9, 34, 35, 38, 40, 52, 71, 72, 112, 209, 212, 214, 215, 216, 220, 222, 224, 228, 229, 230, 231, 232, 306, 322, 328, 346, 348, 367, 370], "width_threshold": 222, "wiggli": 365, "wikipedia": 326, "windspe": [4, 8, 9, 10, 64, 72, 80, 358], "winner": [331, 338], "wise": [114, 232], "withcolumn": 30, "within": [210, 221, 224, 226, 239, 254, 272, 273, 317, 318, 322, 323, 327, 339, 341, 345, 358, 364, 367, 368], "without": [9, 34, 35, 285, 286, 294, 295, 331, 338, 354, 359], "won": [331, 338], "word": [322, 330, 332], "work": [221, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 323, 336, 338, 354, 355, 359, 364, 367, 370], "workflow": [124, 339, 340, 362, 372, 375], "workingdai": [4, 8, 9, 10, 14, 64, 336, 337, 354, 359, 365], "world": [348, 355, 358, 366, 368, 369], "worst": [75, 76, 210, 211, 226, 339, 346, 348, 367, 368, 369], "worth": [323, 331, 338], "would": [71, 72, 272, 273, 332, 333, 334, 336], "wrap": [28, 36, 48, 292, 293, 315, 349, 350, 374, 378], "wrap_estim": 49, "wraparbmodel": 375, "wrapper": [0, 29, 30, 49, 266, 267, 268, 269, 270, 271, 278, 279, 280, 281, 282, 287, 288, 291, 292, 293, 294, 295, 296, 297, 315, 323, 327, 355, 357, 361, 362], "wrapscoredmodel": 375, "wrapskmlp": 375, "written": 355, "wu": 326, "x": [6, 8, 9, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 114, 117, 118, 119, 121, 122, 127, 128, 129, 130, 134, 135, 136, 155, 185, 190, 207, 208, 210, 212, 214, 215, 216, 222, 223, 224, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 245, 248, 250, 254, 255, 256, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 319, 322, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 343, 344, 345, 348, 351, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 375], "x0": [112, 212, 213, 214, 215, 216, 228, 229, 230, 231, 232, 333], "x1": [34, 35, 228, 229, 230, 231, 232, 333], "x2": [228, 229, 230, 231, 232, 333], "x27": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 38, 39, 40, 43, 44, 45, 46, 53, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "x3": 333, "x4": 333, "x5": 333, "x6": 333, "x7": 333, "x8": 333, "x9": 333, "x_": [322, 323, 327, 330, 332, 334, 336, 354, 355, 356, 358, 359, 365, 367, 369], "x_1": 357, "x_2": 357, "x_c": [330, 336], "x_column": 29, "x_d": 357, "x_h2o": 29, "x_i": [354, 355, 358, 359, 365, 367, 368], "x_j": [330, 333, 354, 355, 356, 359, 365], "x_k": [330, 333, 354, 355, 356, 358, 359], "x_n": 367, "x_spark": 30, "x_test": [34, 35], "x_train": [34, 35], "xaxi": 52, "xgb": [9, 38, 64, 326, 339, 350, 373, 374], "xgb1": [63, 64, 67, 68, 79, 80, 83, 112, 212, 213, 214, 215, 216, 220, 225, 228, 229, 230, 231, 232, 302, 351, 364, 365, 369, 370], "xgb2": [49, 317, 319, 333, 334, 335, 336, 338], "xgb7": 319, "xgb_kwarg": 225, "xgb_model": [355, 364, 365, 366, 367, 368, 369, 370], "xgbclassifi": 296, "xgboost": [63, 107, 112, 133, 212, 213, 214, 215, 216, 220, 225, 228, 229, 230, 231, 232, 283, 284, 296, 297, 323, 326, 327, 346, 347, 348, 349, 350, 351, 352, 355, 358, 364, 365, 366, 367, 368, 369], "xgbregressor": 297, "xi": [123, 325], "xianji": 326, "xiaofei": [323, 327], "xicor": [3, 123, 325], "xindong": 326, "xiyang": 323, "xu": [323, 327], "xxx": [114, 207, 208, 209, 213, 218, 219, 220, 221, 224, 225, 228, 229, 230, 231, 232, 233, 298, 299, 300, 301], "xxxxxx": 321, "y": [5, 29, 31, 32, 33, 34, 35, 38, 39, 40, 114, 117, 118, 119, 121, 122, 135, 136, 186, 191, 207, 208, 210, 212, 214, 215, 216, 222, 223, 226, 227, 234, 235, 236, 237, 238, 239, 245, 248, 250, 254, 255, 256, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 317, 318, 319, 322, 326, 331, 335, 338, 343, 344, 345, 354, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369], "y_": [322, 367], "y_column": 29, "y_hat": 223, "y_i": [355, 358, 365, 366, 367, 368], "y_n": 367, "y_test": [34, 35], "y_train": [34, 35], "yaxi": 52, "yet": 370, "yield": [283, 284, 298, 299, 300, 301, 373], "you": [5, 9, 10, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 46, 54, 83, 93, 107, 175, 315, 323, 324, 326, 331, 332, 333, 334, 335, 336, 338, 341, 343, 346, 368, 372, 373], "your": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87, 93, 324, 342, 343, 344, 345, 349, 350], "yr": [4, 8, 9, 10, 14, 20, 64, 324, 354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369], "yu": 326, "yu2020": 326, "yue": 323, "z": [52, 122, 326, 331, 338, 344, 345, 359, 360], "z_": [323, 327, 330, 332], "z_i": 326, "z_j": [331, 338, 354, 359], "zengyou": [323, 327], "zero": [123, 164, 322, 325, 326, 330, 332, 337, 354, 355, 359, 360, 366], "zhang": 326, "zhang2012": 326, "zhao": 323, "zhaolong": 326, "zheng": 323, "zhi": [323, 327], "zhou": [323, 327], "zhu": 330, "zip": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 49, 52, 53, 54, 57, 58, 61, 62, 63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 86, 87], "zoo": [0, 315, 362], "\u03b1": 367, "\u03b2": [367, 368], "\u03b5": 368, "\u03c4": 367, "\u211d": 359}, "titles": ["API Reference", "Dataset", "Basic Dataset Operations", "Exploratory Data Analysis", "Feature Selection", "Data Processing and Feature Engineering", "Subsampling", "Data Drift Test", "Outlier Detection", "Data with Model Predictions", "Dealing with Extra Data Sets", "Computation times", "Built-in Interpretable Models", "Logistic Regression (Classification)", "Linear Regression (Regression)", "Decision Tree Classification", "Decision Tree Regression", "MoReLUDNN Classification", "MoReLUDNN Regression", "GAMINet Classification", "GAMINet Regression", "Mixture of Expert (MoE) Classification", "Mixture of Expert (MoE) Regression", "Linear Tree Classification", "Linear Tree Regression", "Tree Ensemble Models (Classification)", "Tree Ensemble Models (Regression)", "Computation times", "External Models", "Wrapping H2O Models", "Wrapping PySpark Models", "Wrapping sklearn-style Models", "Wrapping Arbitrary Classifier", "Wrapping Arbitrary Regressor", "Wrapping Scored Classifier", "Wrapping Scored Regressor", "Computation times", "Model Calibration", "Calibrating Binary Classifier", "Calibrating Binary Classifier Prediction Interval", "Calibrating Regressor Prediction Interval", "Computation times", "Hyperparameter Tuning", "Grid Search", "Random Search", "Particle Swarm Optimization Search", "Tuning with optuna (Experimental)", "Computation times", "Model Development", "ModelZoo", "Computation times", "Utilities", "ValidationResult - Attributes", "ValidationResult - Visualization", "Pipeline", "Computation times", "Model Residual", "Residual Analysis (Classification)", "Residual Analysis (Regression)", "Computation times", "Model Performance", "Performance Metrics (Classification)", "Performance Metrics (Regression)", "Sliced Performance (Classification)", "Sliced Performance (Regression)", "Computation times", "Overfit Detection", "Overfitting Analysis (Classification)", "Overfitting Analysis (Regression)", "Computation times", "Reliability Analysis", "Reliability Analysis (Classification)", "Reliability Analysis (Regression)", "Computation times", "Resilience Analysis", "Resilience Analysis (Classification)", "Resilience Analysis (Regression)", "Computation times", "Robustness Analysis", "Robustness Analysis (Classification)", "Robustness Analysis (Regression)", "Computation times", "Fairness Analysis", "Model Fairness Analysis (Classification)", "Computation times", "Explainability", "Global Explainability", "Local Explainability", "Computation times", "Model Validation", "Computation times", "Change Log", "Frequently Asked Questions", "Gallery of Modeva Examples", "sphinx_gallery.backreferences", "sphinx_gallery.block_parser", "sphinx_gallery.directives", "sphinx_gallery.docs_resolv", "sphinx_gallery.downloads", "sphinx_gallery.gen_gallery", "sphinx_gallery.gen_rst", "sphinx_gallery.interactive_example", "sphinx_gallery.notebook", "sphinx_gallery.py_source_parser", "sphinx_gallery.scrapers", "sphinx_gallery.sorting", "sphinx_gallery.utils.optipng", "Installation", "Low Code", "DataSet", "modeva.DataSet.all_feature_names", "modeva.DataSet.all_feature_types", "modeva.DataSet.bin_numerical", "modeva.DataSet.data", "modeva.DataSet.data_drift_test", "modeva.DataSet.delete_extra_data", "modeva.DataSet.delete_registered_data", "modeva.DataSet.detect_outlier_cblof", "modeva.DataSet.detect_outlier_isolation_forest", "modeva.DataSet.detect_outlier_pca", "modeva.DataSet.eda_1d", "modeva.DataSet.eda_2d", "modeva.DataSet.eda_3d", "modeva.DataSet.eda_correlation", "modeva.DataSet.eda_pca", "modeva.DataSet.eda_umap", "modeva.DataSet.encode_categorical", "modeva.DataSet.feature_names", "modeva.DataSet.feature_names_categorical", "modeva.DataSet.feature_names_mixed", "modeva.DataSet.feature_names_numerical", "modeva.DataSet.feature_select_corr", "modeva.DataSet.feature_select_rcit", "modeva.DataSet.feature_select_xgbpfi", "modeva.DataSet.feature_types", "modeva.DataSet.get_X_y_data", "modeva.DataSet.get_data", "modeva.DataSet.get_data_list", "modeva.DataSet.get_extra_data_list", "modeva.DataSet.get_prediction_data", "modeva.DataSet.get_prediction_proba_data", "modeva.DataSet.get_preprocessor", "modeva.DataSet.get_protected_data", "modeva.DataSet.get_raw_data", "modeva.DataSet.impute_missing", "modeva.DataSet.inverse_transform", "modeva.DataSet.is_splitted", "modeva.DataSet.list_registered_data", "modeva.DataSet.load", "modeva.DataSet.load_csv", "modeva.DataSet.load_dataframe", "modeva.DataSet.load_dataframe_train_test", "modeva.DataSet.load_preprocessing", "modeva.DataSet.load_registered_data", "modeva.DataSet.load_spark", "modeva.DataSet.n_features", "modeva.DataSet.name", "modeva.DataSet.prediction", "modeva.DataSet.preprocess", "modeva.DataSet.raw_data", "modeva.DataSet.register", "modeva.DataSet.reset_preprocess", "modeva.DataSet.sample_weight", "modeva.DataSet.save_preprocessing", "modeva.DataSet.scale_numerical", "modeva.DataSet.set_active_features", "modeva.DataSet.set_feature_type", "modeva.DataSet.set_inactive_features", "modeva.DataSet.set_prediction", "modeva.DataSet.set_prediction_proba", "modeva.DataSet.set_protected_data", "modeva.DataSet.set_protected_extra_data", "modeva.DataSet.set_random_split", "modeva.DataSet.set_raw_extra_data", "modeva.DataSet.set_sample_weight", "modeva.DataSet.set_target", "modeva.DataSet.set_task_type", "modeva.DataSet.set_test_idx", "modeva.DataSet.set_train_idx", "modeva.DataSet.shape", "modeva.DataSet.subsample_random", "modeva.DataSet.summary", "modeva.DataSet.task_type", "modeva.DataSet.test_prediction", "modeva.DataSet.test_sample_weight", "modeva.DataSet.test_x", "modeva.DataSet.test_y", "modeva.DataSet.to_df", "modeva.DataSet.train_prediction", "modeva.DataSet.train_sample_weight", "modeva.DataSet.train_x", "modeva.DataSet.train_y", "modeva.DataSet.transform", "modeva.DataSet.x", "modeva.DataSet.y", "modeva.ModelZoo.add_model", "modeva.ModelZoo.dataset", "modeva.ModelZoo.delete_registered_model", "modeva.ModelZoo.get_model", "modeva.ModelZoo.leaderboard", "modeva.ModelZoo.list_model_names", "modeva.ModelZoo.list_registered_models", "modeva.ModelZoo.load_registered_model", "modeva.ModelZoo.models", "modeva.ModelZoo.register", "modeva.ModelZoo.train", "modeva.ModelZoo.train_all", "modeva.TestSuite.compare_accuracy_table", "modeva.TestSuite.compare_fairness", "modeva.TestSuite.compare_reliability", "modeva.TestSuite.compare_resilience", "modeva.TestSuite.compare_robustness", "modeva.TestSuite.compare_slicing_accuracy", "modeva.TestSuite.compare_slicing_fairness", "modeva.TestSuite.compare_slicing_overfit", "modeva.TestSuite.compare_slicing_reliability", "modeva.TestSuite.compare_slicing_robustness", "modeva.TestSuite.delete_registed_test", "modeva.TestSuite.diagnose_accuracy_table", "modeva.TestSuite.diagnose_fairness", "modeva.TestSuite.diagnose_mitigate_unfair_binning", "modeva.TestSuite.diagnose_mitigate_unfair_thresholding", "modeva.TestSuite.diagnose_reliability", "modeva.TestSuite.diagnose_residual_analysis", "modeva.TestSuite.diagnose_residual_cluster", "modeva.TestSuite.diagnose_residual_interpret", "modeva.TestSuite.diagnose_resilience", "modeva.TestSuite.diagnose_robustness", "modeva.TestSuite.diagnose_slicing_accuracy", "modeva.TestSuite.diagnose_slicing_fairness", "modeva.TestSuite.diagnose_slicing_overfit", "modeva.TestSuite.diagnose_slicing_reliability", "modeva.TestSuite.diagnose_slicing_robustness", "modeva.TestSuite.display_test_results", "modeva.TestSuite.explain_ale", "modeva.TestSuite.explain_hstatistic", "modeva.TestSuite.explain_lime", "modeva.TestSuite.explain_pdp", "modeva.TestSuite.explain_pfi", "modeva.TestSuite.explain_shap", "modeva.TestSuite.export_report", "modeva.TestSuite.get_dataset", "modeva.TestSuite.get_interactions", "modeva.TestSuite.get_main_effects", "modeva.TestSuite.get_model", "modeva.TestSuite.interpret_coef", "modeva.TestSuite.interpret_effects", "modeva.TestSuite.interpret_effects_moe_average", "modeva.TestSuite.interpret_fi", "modeva.TestSuite.interpret_global_tree", "modeva.TestSuite.interpret_llm_pc", "modeva.TestSuite.interpret_llm_profile", "modeva.TestSuite.interpret_llm_summary", "modeva.TestSuite.interpret_llm_violin", "modeva.TestSuite.interpret_local_fi", "modeva.TestSuite.interpret_local_linear_fi", "modeva.TestSuite.interpret_local_moe_weights", "modeva.TestSuite.interpret_local_tree", "modeva.TestSuite.interpret_moe_cluster_analysis", "modeva.TestSuite.list", "modeva.TestSuite.list_registered_tests", "modeva.TestSuite.load_registered_test", "modeva.TestSuite.register", "modeva.TestSuite.set_dataset", "modeva.TestSuite.set_model", "modeva.automation.pipeline.Pipeline", "modeva.models.MoCatBoostClassifier", "modeva.models.MoCatBoostRegressor", "modeva.models.MoClassifier", "modeva.models.MoDecisionTreeClassifier", "modeva.models.MoDecisionTreeRegressor", "modeva.models.MoElasticNet", "modeva.models.MoGAMINetClassifier", "modeva.models.MoGAMINetRegressor", "modeva.models.MoGLMTreeBoostClassifier", "modeva.models.MoGLMTreeBoostRegressor", "modeva.models.MoGLMTreeClassifier", "modeva.models.MoGLMTreeRegressor", "modeva.models.MoGradientBoostingClassifier", "modeva.models.MoGradientBoostingRegressor", "modeva.models.MoLGBMClassifier", "modeva.models.MoLGBMRegressor", "modeva.models.MoLogisticRegression", "modeva.models.MoMoEClassifier", "modeva.models.MoMoERegressor", "modeva.models.MoNeuralTreeClassifier", "modeva.models.MoNeuralTreeRegressor", "modeva.models.MoRandomForestClassifier", "modeva.models.MoRandomForestRegressor", "modeva.models.MoReLUDNNClassifier", "modeva.models.MoReLUDNNRegressor", "modeva.models.MoRegressor", "modeva.models.MoSKLearnClassifier", "modeva.models.MoSKLearnRegressor", "modeva.models.MoScoredClassifier", "modeva.models.MoScoredRegressor", "modeva.models.MoXGBClassifier", "modeva.models.MoXGBRegressor", "modeva.models.ModelTuneGridSearch", "modeva.models.ModelTuneOptuna", "modeva.models.ModelTunePSO", "modeva.models.ModelTuneRandomSearch", "modeva.testsuite.utils.slicing_utils.get_data_info", "modeva.utils.mlflow.clear_mlflow_home", "modeva.utils.mlflow.get_mlflow_home", "modeva.utils.mlflow.set_mlflow_home", "modeva.utils.results.ValidationResult", "Hyperparameter Tuning", "Interpretable Models", "Model Zoo", "Pipeline", "Validation Result", "Test Suite", "Utilities", "Model Wrappers", "Using Modeva", "Model Comparison", "Comparison for Classification", "Fairness Comparison", "Comparison for Regression", "Data Processing", "Basic Data Operations", "Data Quality (Drift Test)", "Data Quality (Outlier Detection)", "Data Summary", "Exploratory Data Analysis", "Feature Selection", "Outlier Detection", "Subsampling and Data Drift", "Model Explainability", "Global Explainability", "Local Explainability", "ALE (Accumulated Local Effects)", "Hstats (Friedman\u2019s H-statistic)", "ICE (Individual Conditional Expectation)", "LIME (Local Interpretable Model-Agnostic Explanation)", "PDP (Partial Dependence Plot)", "PFI (Permutation Feature Importance)", "SHAP (SHapley Additive exPlanations)", "Introduction", "Low code", "Data Processing", "Data Summary", "EDA 2D Charts", "EDA 3D Scatter", "EDA Multivariate", "Model Comparison", "Model Explainability", "Model Test", "Model Training", "Model Tuning", "Weakness Test", "Registry Hub", "Interpretable Models", "GAMI-Net", "Gradient Boosted Decision Trees", "Linear Tree and Gradient Boosted Linear Trees", "Generalized Linear Models", "Mixture of Experts (MoE)", "Neural Tree", "ReLU Neural Network", "Decision Tree", "Model Wrapping", "Diagnostic Suite", "Fairness", "Underfitting and Overfitting", "Performance and Residual Analysis", "Reliability", "Resilience", "Robustness", "Weakness Detection", "Model Training", "Register H2O Models", "Model Tuning", "Model Zoo and Leaderboard", "Model Wrappers", "MoDeVa.ai", "Unused API Entries", "Computation times"], "titleterms": {"": [330, 333], "0": 90, "00": [11, 36, 41, 55, 65, 69, 73, 77, 81, 84, 88, 90], "000": 90, "01": [50, 59], "018": 69, "02": [47, 50], "04": 41, "06": [27, 77, 84], "07": 27, "08": 59, "1": [21, 22, 50, 84, 317, 319, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375], "10": [36, 55, 88], "14": 27, "15": [73, 81], "17": 65, "189": 73, "1d": [3, 67, 68, 86, 325], "2": [57, 58, 59, 69, 73, 77, 81, 88, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 373, 375], "23": 69, "2d": [3, 67, 68, 86, 325, 343], "3": [41, 55, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 365, 370, 373, 375], "3d": [3, 325, 344], "4": [47, 65, 342, 343, 344, 345, 346, 347, 348, 349, 350, 375], "445": 41, "5": [342, 345, 346, 348, 375], "5000": 10, "538": 55, "54": 11, "564": 36, "59": 47, "595": 11, "6": [342, 346, 348], "642": 50, "663": 84, "666": 27, "7": 36, "725": 65, "730": 47, "739": 77, "768": 81, "8000": 10, "862": 88, "9": 11, "9000": 10, "949": 59, "If": [342, 343, 344], "One": [323, 332, 336], "The": 338, "_sourceauto_galleriesdata": 11, "_sourceauto_galleriesdev": 50, "_sourceauto_galleriesdev0_model": 27, "_sourceauto_galleriesdev1_extmodel": 36, "_sourceauto_galleriesdev2_calibr": 41, "_sourceauto_galleriesdev3_hpo": 47, "_sourceauto_galleriesutil": 55, "_sourceauto_galleriesv": 90, "_sourceauto_galleriesval0_residu": 59, "_sourceauto_galleriesval1_perform": 65, "_sourceauto_galleriesval2_overfit": 69, "_sourceauto_galleriesval3_reli": 73, "_sourceauto_galleriesval4_resili": 77, "_sourceauto_galleriesval5_robust": 81, "_sourceauto_galleriesval6_fair": 84, "_sourceauto_galleriesval7_explain": 88, "abov": [5, 14], "absolut": [57, 58, 319], "access": 109, "accumul": [330, 332], "accuraci": [14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 61, 62, 63, 64, 317, 319], "activ": 6, "add": 49, "add_model": 195, "addit": [331, 338, 370], "address": [367, 368, 369], "adjust": [342, 343, 344, 364], "advanc": [49, 63, 64, 345, 370], "advantag": 356, "advers": 364, "after": 38, "against": [17, 18, 57, 58], "aggreg": 355, "agnost": [331, 335], "ai": 376, "air": 364, "al": [86, 330, 332], "algorithm": [326, 332, 333, 334, 335, 336, 337, 338], "all": 49, "all_feature_nam": 110, "all_feature_typ": 111, "analysi": [3, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 57, 58, 61, 62, 63, 64, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 89, 323, 325, 339, 345, 354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369], "analyz": [57, 58, 342], "anova": [354, 355, 358, 359], "api": [0, 377], "appli": [6, 345], "applic": [364, 365, 366], "approach": [365, 367, 368, 369, 370], "arbitrari": [32, 33, 375], "architectur": [358, 359, 360], "ask": 92, "assess": [365, 367], "attribut": [52, 354, 358, 359], "auc": 317, "autom": 265, "automat": 370, "avail": [10, 53], "backrefer": 94, "bandwidth": [317, 319], "bar": 53, "base": [4, 57, 58, 323, 327, 359], "baselin": 87, "basic": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 61, 62, 63, 64, 71, 72, 75, 76, 79, 80, 83, 321, 354, 359], "batch": [67, 68], "befor": 38, "benefit": 355, "best": [43, 44, 45, 46, 350], "between": [21, 22, 364], "bike": [332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370], "bikeshar": 319, "bin": [321, 364, 370], "bin_numer": 112, "binari": [38, 39], "bivari": 325, "block_pars": 95, "boost": [23, 24, 355, 356], "build": [29, 30, 31, 32, 33, 34, 35, 38, 39, 40], "built": [2, 12, 48, 321], "calibr": [37, 38, 39, 40, 48], "case": 355, "categor": [321, 324, 342, 354, 369], "cblof": [8, 323, 327], "centric": [365, 367, 368, 369], "challeng": 366, "chang": [91, 324], "character": 365, "chart": 343, "check": 38, "class": 323, "classif": [13, 15, 17, 19, 21, 23, 25, 57, 61, 63, 67, 71, 75, 79, 83, 308, 317, 366], "classifi": [32, 34, 38, 39], "clear_mlflow_hom": 303, "cluster": [21, 22, 57, 58, 323, 367, 368, 369], "code": [108, 340], "coeffici": [13, 14, 326], "combin": 364, "compar": [38, 61, 62, 349], "compare_accuracy_t": 207, "compare_fair": 208, "compare_reli": 209, "compare_resili": 210, "compare_robust": 211, "compare_slicing_accuraci": 212, "compare_slicing_fair": 213, "compare_slicing_overfit": 214, "compare_slicing_reli": 215, "compare_slicing_robust": 216, "comparison": [63, 64, 67, 68, 71, 72, 75, 76, 79, 80, 83, 312, 316, 317, 318, 319, 323, 346, 364, 365, 366, 367, 368, 369, 370], "complex": 365, "compon": [323, 345], "comput": [11, 27, 36, 41, 47, 50, 55, 59, 65, 69, 73, 77, 81, 84, 88, 90, 354, 359, 378], "conceptu": 339, "condit": [326, 334], "conduct": [67, 68], "configur": [49, 343, 344, 350], "conform": 367, "connect": 365, "consider": [354, 359, 369], "constraint": [23, 24, 354, 355, 359], "continu": 368, "convert": [34, 35], "coordin": [17, 18, 360], "correl": [3, 4, 325, 326, 345], "coverag": 319, "creat": [29, 30, 31, 32, 33, 34, 35, 352, 375], "credit": [317, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370], "cumul": 323, "curvatur": 365, "d": 6, "data": [2, 3, 5, 7, 9, 10, 21, 22, 29, 30, 31, 32, 33, 34, 35, 109, 113, 320, 321, 322, 323, 324, 325, 328, 341, 342, 352, 365, 367, 368, 369, 375], "data_drift_test": 114, "dataset": [1, 2, 49, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 321, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "deal": 10, "decis": [15, 16, 355, 361], "decomposit": [354, 355, 358, 359, 365], "defin": [5, 14], "definit": 364, "delet": 10, "delete_extra_data": 115, "delete_registed_test": 217, "delete_registered_data": 116, "delete_registered_model": 197, "depend": [86, 330, 336, 338], "depth": [57, 58, 355, 356, 359, 370], "detail": [332, 333, 334, 335, 336, 337, 338], "detect": [8, 66, 89, 109, 323, 327, 351, 365, 370], "detect_outlier_cblof": 117, "detect_outlier_isolation_forest": 118, "detect_outlier_pca": 119, "develop": 48, "diagnos": [43, 44, 45, 46], "diagnose_accuracy_t": 218, "diagnose_fair": 219, "diagnose_mitigate_unfair_bin": 220, "diagnose_mitigate_unfair_threshold": 221, "diagnose_reli": 222, "diagnose_residual_analysi": 223, "diagnose_residual_clust": 224, "diagnose_residual_interpret": 225, "diagnose_resili": 226, "diagnose_robust": 227, "diagnose_slicing_accuraci": 228, "diagnose_slicing_fair": 229, "diagnose_slicing_overfit": 230, "diagnose_slicing_reli": 231, "diagnose_slicing_robust": 232, "diagnost": [29, 30, 31, 32, 33, 34, 35, 312, 363, 364, 367, 372], "diagram": 317, "differ": 323, "direct": 96, "discret": 368, "dispar": 364, "displai": 53, "display_test_result": 233, "distanc": [317, 319, 322, 368], "distribut": [322, 323, 328, 368, 369], "diverg": 368, "dnn": 360, "docs_resolv": 97, "download": 98, "drift": [7, 21, 22, 109, 322, 328, 368], "eda": [3, 343, 344, 345], "eda_1d": 120, "eda_2d": 121, "eda_3d": 122, "eda_correl": 123, "eda_pca": 124, "eda_umap": 125, "effect": [13, 14, 19, 20, 21, 22, 25, 26, 330, 332, 354, 355, 358, 359], "empir": [323, 355, 365], "encod": 321, "encode_categor": 126, "energi": 322, "engin": [5, 365], "enhanc": 355, "ensembl": [25, 26, 355], "entri": 377, "error": [319, 365, 370], "estim": 365, "evalu": [348, 349, 364, 366], "exact": [331, 338], "exampl": [49, 93, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375], "execut": [5, 11, 14, 27, 36, 41, 47, 50, 55, 59, 65, 69, 73, 77, 81, 84, 88, 90], "expect": 334, "experi": 352, "experiment": 46, "expert": [21, 22, 358], "explain": [85, 86, 87, 89, 329, 330, 331, 347], "explain_al": 234, "explain_hstatist": 235, "explain_lim": 236, "explain_pdp": 237, "explain_pfi": 238, "explain_shap": 239, "explan": [312, 331, 335, 338, 347, 354], "explor": [109, 325], "exploratori": [3, 325], "export": [342, 345], "export_report": 240, "extern": [28, 48, 321, 375], "extra": [10, 109], "extract": [17, 18], "f1": 317, "factor": 323, "fair": [82, 83, 89, 318, 364], "fbedk": 326, "featur": [4, 5, 13, 14, 17, 18, 19, 20, 21, 22, 25, 26, 57, 58, 67, 68, 86, 109, 324, 326, 330, 337, 338, 339, 341, 342, 343, 344, 351, 354, 358, 359, 360, 364, 365], "feature_nam": 127, "feature_names_categor": 128, "feature_names_mix": 129, "feature_names_numer": 130, "feature_select_corr": 131, "feature_select_rcit": 132, "feature_select_xgbpfi": 133, "feature_typ": 134, "figur": 53, "file": [11, 27, 36, 41, 47, 50, 55, 59, 65, 69, 73, 77, 81, 84, 88, 90], "first": 10, "fit": 372, "forest": [8, 57, 58, 323, 327, 367, 369], "formul": [355, 358, 368], "framework": 365, "frequent": 92, "friedman": [330, 333], "from": [2, 10, 11, 27, 36, 41, 47, 50, 55, 59, 65, 69, 73, 77, 81, 84, 88, 90, 365], "full": 367, "function": [354, 355, 358, 359], "galleri": 93, "gami": 354, "gaminet": [19, 20], "gap": 365, "gate": 358, "gbdt": 355, "gblt": [356, 359], "gen_galleri": 99, "gen_rst": 100, "gener": [53, 357, 365], "get": [10, 39, 40], "get_data": 136, "get_data_info": 302, "get_data_list": 137, "get_dataset": 241, "get_extra_data_list": 138, "get_interact": 242, "get_main_effect": 243, "get_mlflow_hom": 304, "get_model": [198, 244], "get_prediction_data": 139, "get_prediction_proba_data": 140, "get_preprocessor": 141, "get_protected_data": 142, "get_raw_data": 143, "get_x_y_data": 135, "glm": 357, "glmtree": [23, 24], "global": [15, 16, 19, 86, 330, 341, 347, 354, 355, 356, 357, 358, 359, 361], "gradient": [355, 356, 365], "grid": [43, 373], "group": [87, 364], "h": [86, 330, 333], "h2o": [29, 372], "handl": 321, "heatmap": 325, "hidden": [17, 18], "histogram": 323, "hoc": 312, "hpo": 46, "hstat": [330, 333], "hub": 352, "hyperparamet": [42, 43, 44, 45, 46, 48, 307], "i": 370, "ic": 334, "identif": [367, 369], "identifi": 365, "impact": [364, 367, 369], "implement": [354, 359, 365], "import": [13, 14, 17, 18, 19, 20, 21, 22, 25, 26, 57, 58, 86, 326, 330, 337, 338, 354, 358, 359, 360, 370], "impute_miss": 144, "independ": 326, "index": 10, "individu": [334, 354, 355, 356, 358, 359, 360], "inher": 312, "initi": [49, 54, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352], "input": 369, "instal": 107, "interact": [67, 68, 355], "interactive_exampl": 101, "interpret": [12, 13, 14, 15, 16, 19, 20, 21, 22, 48, 49, 57, 58, 308, 312, 331, 335, 353, 354, 355, 356, 357, 358, 359, 360, 361, 366], "interpret_coef": 245, "interpret_effect": 246, "interpret_effects_moe_averag": 247, "interpret_fi": 248, "interpret_global_tre": 249, "interpret_llm_pc": 250, "interpret_llm_profil": 251, "interpret_llm_summari": 252, "interpret_llm_violin": 253, "interpret_local_fi": 254, "interpret_local_linear_fi": 255, "interpret_local_moe_weight": 256, "interpret_local_tre": 257, "interpret_moe_cluster_analysi": 258, "interv": [39, 40, 57, 58], "introduct": [339, 366, 370], "inverse_transform": 145, "is_split": 146, "isol": [8, 323, 327], "issu": [367, 369], "its": 53, "jensen": 368, "k": 323, "kei": [339, 370], "kernel": 87, "kernelshap": [331, 338], "kmeanstre": 323, "kolmogorov": 368, "last": [10, 17, 18], "layer": [17, 18], "leaderboard": [49, 199, 374], "learn": [49, 366, 367, 369], "lgbm": [23, 24, 38, 61, 62], "lime": [87, 331, 335], "limit": [53, 355], "linear": [13, 14, 23, 24, 356, 357, 360], "linearshap": 331, "list": [53, 259], "list_model_nam": 200, "list_registered_data": 147, "list_registered_model": 201, "list_registered_test": 260, "llm": [17, 18, 360], "load": [2, 5, 10, 49, 109, 148, 321, 342, 343, 344, 345, 347, 372], "load_csv": 149, "load_datafram": 150, "load_dataframe_train_test": 151, "load_preprocess": 152, "load_registered_data": 153, "load_registered_model": 202, "load_registered_test": 261, "load_spark": 154, "local": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 87, 323, 330, 331, 332, 335, 347, 354, 355, 356, 357, 358, 359, 360, 361, 365], "log": 91, "logist": 13, "loss": [354, 359], "low": [108, 340], "machin": [367, 369], "main": [13, 14, 25, 26, 355], "manag": [109, 309, 352, 374], "manifest": 365, "manipul": 324, "margin": [322, 323], "mathemat": [355, 358], "mean": 319, "measur": [365, 366, 368], "method": [323, 327, 350, 365], "methodologi": [323, 366], "metric": [61, 62, 318, 364, 366], "miss": 321, "mitig": [83, 364], "mixtur": [21, 22, 358], "ml": 49, "mlflow": [2, 49, 303, 304, 305], "mocatboostclassifi": 266, "mocatboostregressor": 267, "moclassifi": 268, "mode": [67, 68], "modecisiontreeclassifi": 269, "modecisiontreeregressor": 270, "model": [9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 48, 49, 56, 57, 58, 60, 61, 62, 63, 64, 67, 68, 71, 72, 80, 83, 89, 203, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 308, 309, 312, 314, 316, 329, 331, 335, 338, 346, 347, 348, 349, 350, 351, 353, 355, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375], "modeltun": 373, "modeltunegridsearch": 298, "modeltuneoptuna": 299, "modeltunepso": 300, "modeltunerandomsearch": 301, "modelzoo": [49, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "modeva": [10, 29, 30, 31, 32, 33, 34, 35, 93, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 375, 376], "modul": 339, "moe": [21, 22, 358], "moelasticnet": 271, "mogaminetclassifi": 272, "mogaminetregressor": 273, "moglmtreeboostclassifi": 274, "moglmtreeboostregressor": 275, "moglmtreeclassifi": 276, "moglmtreeregressor": 277, "mogradientboostingclassifi": 278, "mogradientboostingregressor": 279, "molgbmclassifi": 280, "molgbmregressor": 281, "mologisticregress": 282, "momoeclassifi": 283, "momoeregressor": 284, "moneuraltreeclassifi": 285, "moneuraltreeregressor": 286, "monoton": [23, 24, 354, 355, 359], "morandomforestclassifi": 287, "morandomforestregressor": 288, "moregressor": 291, "moreludnn": [17, 18], "moreludnnclassifi": 289, "moreludnnregressor": 290, "moscoredclassifi": 294, "moscoredregressor": 295, "mosklearnclassifi": 292, "mosklearnregressor": 293, "moxgbclassifi": 296, "moxgbregressor": 297, "multivari": [345, 365], "n_featur": 155, "name": [10, 53, 156], "nearest": 323, "necessari": [342, 343, 344], "need": [10, 38, 39, 40], "neighbor": 323, "net": 354, "network": 360, "neural": [23, 24, 359, 360], "nois": 369, "nonconform": 367, "normal": 369, "notebook": 102, "number": 53, "numer": [321, 324, 342], "one": [10, 53], "oot1": 10, "oot2": 10, "oot3": 10, "oper": [2, 4, 321], "optim": [45, 373], "option": 54, "optipng": 106, "optuna": 46, "outcom": 339, "outlier": [8, 109, 323, 327], "output": [17, 18], "overfit": [66, 67, 68, 89, 317, 319, 365], "overview": 342, "pairwis": 355, "panel": [341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352], "parallel": [17, 18, 360], "paramet": 350, "partial": [86, 330, 336], "particl": [45, 373], "partit": 365, "pca": [3, 8, 325, 327, 345], "pdp": [330, 336], "perform": [60, 61, 62, 63, 64, 89, 317, 319, 345, 346, 348, 364, 366], "permut": [86, 330, 337], "perturb": [57, 58, 369], "pfi": [4, 330, 337], "pipelin": [54, 265, 310], "plot": [13, 14, 17, 18, 25, 26, 53, 86, 325, 330, 336, 338, 354, 355, 358, 359, 360], "post": 312, "practic": [365, 369], "predict": [9, 34, 35, 39, 40, 57, 58, 157, 354, 355, 356, 358, 359, 360, 367], "predictor": [57, 58], "prepar": [49, 321, 375], "preprocess": [5, 14, 109, 158, 321], "prerequisit": 107, "princip": [323, 345], "proba": [38, 57], "problemat": 365, "process": [5, 320, 341, 355, 358], "profil": [17, 18, 360], "properti": [109, 309], "protect": 109, "psi": 368, "pso": 45, "purif": [354, 355, 359], "purpos": 366, "py_source_pars": 103, "pyspark": 30, "qualiti": [322, 323, 355], "quantil": [369, 370], "question": 92, "r": 319, "random": [6, 44, 57, 58, 367, 369, 373], "ratio": 364, "raw_data": 159, "rcit": [4, 326], "refer": [0, 323, 325, 326, 327, 330, 331, 333, 334, 337, 338], "region": [67, 68, 365], "regist": [2, 49, 160, 204, 262, 341, 343, 344, 349, 350, 372], "registr": [49, 321], "registri": [309, 352], "regress": [13, 14, 16, 18, 20, 22, 24, 26, 58, 62, 64, 68, 72, 76, 80, 308, 319, 366], "regressor": [33, 35, 40], "reliabl": [70, 71, 72, 89, 317, 319, 346, 348, 367], "relu": 360, "remedi": 365, "remov": 324, "represent": [354, 358, 359], "reset": [5, 6], "reset_preprocess": 161, "residu": [56, 57, 58, 89, 366], "resili": [74, 75, 76, 89, 317, 319, 346, 348, 368], "respons": [57, 58], "rest": [21, 22, 38, 39, 40], "result": [8, 54, 306, 311, 342, 345, 346, 347, 348, 351, 355, 366], "retrain": [43, 44, 45, 46], "review": 342, "risk": 365, "robust": [78, 79, 80, 89, 317, 319, 346, 348, 365, 369], "row": 10, "run": [43, 44, 45, 46, 54, 350, 372], "sampl": [6, 10, 21, 22, 87, 109, 317, 319, 341], "sample_weight": 162, "save": [34, 35, 53, 54, 342, 343, 344, 345, 346, 347, 348, 351, 372], "save_preprocess": 163, "scale": 321, "scale_numer": 164, "scatter": [325, 344], "scikit": 49, "score": [34, 35, 317, 319, 323, 367, 375], "scraper": 104, "script": [29, 30, 32, 33], "search": [43, 44, 45, 350, 373], "segment": [318, 351], "select": [4, 109, 326, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "sensit": 365, "set": [5, 6, 10, 49, 341, 343, 344], "set_active_featur": 165, "set_active_sampl": 6, "set_dataset": 263, "set_feature_typ": 166, "set_inactive_featur": 167, "set_mlflow_hom": 305, "set_model": 264, "set_predict": 168, "set_prediction_proba": 169, "set_protected_data": 170, "set_protected_extra_data": 171, "set_random_split": 172, "set_raw_extra_data": 173, "set_sample_weight": 174, "set_target": 175, "set_task_typ": 176, "set_test_idx": 177, "set_train_idx": 178, "shannon": 368, "shap": [87, 331, 338], "shape": 179, "shaplei": [331, 338], "share": [332, 333, 334, 335, 336, 337, 338, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370], "shoot": 107, "show": [10, 49], "simpl": 369, "simucredit": [332, 333, 334, 335, 336, 337, 338], "singl": 87, "sklearn": [31, 375], "slice": [63, 64, 67, 68, 71, 72, 79, 80, 83, 364, 365, 370], "slicing_util": 302, "smirnov": 368, "solut": [331, 338, 365], "sort": 105, "sound": 339, "sparsiti": 365, "special": [339, 355], "specif": 338, "sphinx_galleri": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "split": [10, 109, 341, 367], "squar": 319, "stage": 355, "statist": [86, 324, 330, 333, 368], "step": [5, 14, 54, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 358, 366], "strategi": [365, 367, 368, 369], "style": 31, "sub": 53, "subplot": 53, "subsampl": [6, 328], "subsample_random": 180, "suit": [29, 30, 31, 32, 33, 34, 35, 312, 363], "summari": [3, 5, 17, 18, 181, 321, 324, 338, 342, 360], "supervis": [366, 367, 368, 369], "svm": 323, "swarm": [45, 373], "tabl": [17, 18, 360], "taiwan": [317, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370], "taiwancredit": 325, "task_typ": 182, "techniqu": 366, "test": [7, 21, 22, 29, 30, 31, 32, 33, 34, 35, 109, 312, 322, 326, 348, 351, 365, 369, 372], "test_i": 186, "test_predict": 183, "test_sample_weight": 184, "test_x": 185, "testsuit": [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 302, 375], "theoret": 365, "threshold": 364, "through": [355, 368], "time": [11, 27, 36, 41, 47, 50, 55, 59, 65, 69, 73, 77, 81, 84, 88, 90, 378], "to_df": 187, "total": [11, 27, 36, 41, 47, 50, 55, 59, 65, 69, 73, 77, 81, 84, 88, 90], "track": 352, "tradeoff": 364, "tradit": 49, "train": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 49, 109, 205, 309, 349, 365, 371, 372, 374], "train_al": 206, "train_i": 191, "train_predict": 188, "train_sample_weight": 189, "train_x": 190, "transform": [192, 359], "tree": [15, 16, 23, 24, 25, 26, 355, 356, 359, 361, 370], "treeshap": 331, "troubl": 107, "troubleshoot": [345, 350], "tune": [42, 43, 44, 45, 46, 48, 307, 350, 373], "two": [332, 336], "type": [324, 342, 343, 344], "umap": [3, 345], "uncertainti": 365, "underfit": 365, "unfair": 83, "uniform": [369, 370], "univari": [325, 365], "unus": 377, "upload": 352, "us": [8, 315, 370], "usag": [332, 333, 334, 335, 336, 337, 338, 373], "util": [51, 106, 302, 303, 304, 305, 306, 312, 313, 370], "valid": [89, 311, 375], "validationresult": [52, 53, 306], "valu": 321, "variabl": [57, 58, 321, 341, 354, 367, 369], "verifi": 49, "view": 8, "visual": [40, 53, 57, 58, 343, 344, 345], "wai": [332, 336], "wasserstein": 368, "waterfal": 338, "weak": [351, 365, 367, 368, 369, 370], "weakspot": [317, 319], "weight": [21, 22], "when": [38, 39, 40], "why": 370, "width": [57, 58], "workflow": [341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "worst": [317, 319], "wrap": [29, 30, 31, 32, 33, 34, 35, 49, 362, 375], "wrapper": [314, 375], "x": 193, "xgb": [4, 57, 58], "xgboost": [38, 61, 62, 370], "xi": 3, "y": 194, "zoo": [309, 374]}})